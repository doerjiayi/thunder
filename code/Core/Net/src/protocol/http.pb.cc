// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#include "http.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_http_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_http_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HttpMsg_Header;
}  // namespace protobuf_http_2eproto
class HttpMsg_HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpMsg_Header>
      _instance;
} _HttpMsg_Header_default_instance_;
class HttpMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpMsg>
      _instance;
} _HttpMsg_default_instance_;
namespace protobuf_http_2eproto {
static void InitDefaultsHttpMsg_Header() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_Header_default_instance_;
    new (ptr) ::HttpMsg_Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HttpMsg_Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HttpMsg_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHttpMsg_Header}, {}};

static void InitDefaultsHttpMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HttpMsg_default_instance_;
    new (ptr) ::HttpMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HttpMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HttpMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHttpMsg}, {
      &protobuf_http_2eproto::scc_info_HttpMsg_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HttpMsg_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HttpMsg.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_Header, header_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg_Header, header_value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, http_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, http_minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, content_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HttpMsg, is_decoding_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  ~0u,
  1,
  2,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::HttpMsg_Header)},
  { 9, 26, sizeof(::HttpMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HttpMsg_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HttpMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "http.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nhttp.proto\"\243\002\n\007HttpMsg\022\014\n\004type\030\001 \002(\005\022\022"
      "\n\nhttp_major\030\002 \002(\005\022\022\n\nhttp_minor\030\003 \002(\005\022\026"
      "\n\016content_length\030\004 \001(\005\022\016\n\006method\030\005 \001(\005\022\023"
      "\n\013status_code\030\006 \001(\005\022\020\n\010encoding\030\007 \001(\005\022\013\n"
      "\003url\030\010 \001(\t\022 \n\007headers\030\t \003(\0132\017.HttpMsg.He"
      "ader\022\014\n\004body\030\n \001(\014\022\014\n\004path\030\016 \001(\t\022\023\n\013is_d"
      "ecoding\030\017 \001(\010\0323\n\006Header\022\023\n\013header_name\030\001"
      " \001(\t\022\024\n\014header_value\030\002 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "http.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_http_2eproto

// ===================================================================

void HttpMsg_Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpMsg_Header::kHeaderNameFieldNumber;
const int HttpMsg_Header::kHeaderValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpMsg_Header::HttpMsg_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_http_2eproto::scc_info_HttpMsg_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HttpMsg.Header)
}
HttpMsg_Header::HttpMsg_Header(const HttpMsg_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_name()) {
    header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
  }
  header_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_value()) {
    header_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_value_);
  }
  // @@protoc_insertion_point(copy_constructor:HttpMsg.Header)
}

void HttpMsg_Header::SharedCtor() {
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HttpMsg_Header::~HttpMsg_Header() {
  // @@protoc_insertion_point(destructor:HttpMsg.Header)
  SharedDtor();
}

void HttpMsg_Header::SharedDtor() {
  header_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HttpMsg_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HttpMsg_Header::descriptor() {
  ::protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpMsg_Header& HttpMsg_Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_http_2eproto::scc_info_HttpMsg_Header.base);
  return *internal_default_instance();
}


void HttpMsg_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:HttpMsg.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      header_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      header_value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HttpMsg_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HttpMsg.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string header_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header_name().data(), static_cast<int>(this->header_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HttpMsg.Header.header_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes header_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HttpMsg.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HttpMsg.Header)
  return false;
#undef DO_
}

void HttpMsg_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HttpMsg.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string header_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_name().data(), static_cast<int>(this->header_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.Header.header_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->header_name(), output);
  }

  // optional bytes header_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->header_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HttpMsg.Header)
}

::google::protobuf::uint8* HttpMsg_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HttpMsg.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string header_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_name().data(), static_cast<int>(this->header_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.Header.header_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header_name(), target);
  }

  // optional bytes header_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->header_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpMsg.Header)
  return target;
}

size_t HttpMsg_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HttpMsg.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string header_name = 1;
    if (has_header_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header_name());
    }

    // optional bytes header_value = 2;
    if (has_header_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpMsg_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HttpMsg.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpMsg_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpMsg_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpMsg.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpMsg.Header)
    MergeFrom(*source);
  }
}

void HttpMsg_Header::MergeFrom(const HttpMsg_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HttpMsg.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_header_name();
      header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_header_value();
      header_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_value_);
    }
  }
}

void HttpMsg_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HttpMsg.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpMsg_Header::CopyFrom(const HttpMsg_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HttpMsg.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpMsg_Header::IsInitialized() const {
  return true;
}

void HttpMsg_Header::Swap(HttpMsg_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpMsg_Header::InternalSwap(HttpMsg_Header* other) {
  using std::swap;
  header_name_.Swap(&other->header_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  header_value_.Swap(&other->header_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HttpMsg_Header::GetMetadata() const {
  protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HttpMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpMsg::kTypeFieldNumber;
const int HttpMsg::kHttpMajorFieldNumber;
const int HttpMsg::kHttpMinorFieldNumber;
const int HttpMsg::kContentLengthFieldNumber;
const int HttpMsg::kMethodFieldNumber;
const int HttpMsg::kStatusCodeFieldNumber;
const int HttpMsg::kEncodingFieldNumber;
const int HttpMsg::kUrlFieldNumber;
const int HttpMsg::kHeadersFieldNumber;
const int HttpMsg::kBodyFieldNumber;
const int HttpMsg::kPathFieldNumber;
const int HttpMsg::kIsDecodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpMsg::HttpMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_http_2eproto::scc_info_HttpMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HttpMsg)
}
HttpMsg::HttpMsg(const HttpMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_decoding_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_decoding_));
  // @@protoc_insertion_point(copy_constructor:HttpMsg)
}

void HttpMsg::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_decoding_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_decoding_));
}

HttpMsg::~HttpMsg() {
  // @@protoc_insertion_point(destructor:HttpMsg)
  SharedDtor();
}

void HttpMsg::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HttpMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HttpMsg::descriptor() {
  ::protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpMsg& HttpMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_http_2eproto::scc_info_HttpMsg.base);
  return *internal_default_instance();
}


void HttpMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:HttpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      body_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_) -
        reinterpret_cast<char*>(&type_)) + sizeof(method_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&status_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_decoding_) -
        reinterpret_cast<char*>(&status_code_)) + sizeof(is_decoding_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HttpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HttpMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 http_major = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_http_major();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 http_minor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_http_minor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 content_length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_content_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 method = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status_code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 encoding = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_encoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HttpMsg.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .HttpMsg.Header headers = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HttpMsg.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_decoding = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_is_decoding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_decoding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HttpMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HttpMsg)
  return false;
#undef DO_
}

void HttpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HttpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 http_major = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->http_major(), output);
  }

  // required int32 http_minor = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->http_minor(), output);
  }

  // optional int32 content_length = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->content_length(), output);
  }

  // optional int32 method = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->method(), output);
  }

  // optional int32 status_code = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status_code(), output);
  }

  // optional int32 encoding = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->encoding(), output);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  // repeated .HttpMsg.Header headers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->headers(static_cast<int>(i)),
      output);
  }

  // optional bytes body = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->body(), output);
  }

  // optional string path = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->path(), output);
  }

  // optional bool is_decoding = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_decoding(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HttpMsg)
}

::google::protobuf::uint8* HttpMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HttpMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 http_major = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->http_major(), target);
  }

  // required int32 http_minor = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->http_minor(), target);
  }

  // optional int32 content_length = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->content_length(), target);
  }

  // optional int32 method = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->method(), target);
  }

  // optional int32 status_code = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status_code(), target);
  }

  // optional int32 encoding = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->encoding(), target);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // repeated .HttpMsg.Header headers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->headers(static_cast<int>(i)), deterministic, target);
  }

  // optional bytes body = 10;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->body(), target);
  }

  // optional string path = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->path(), target);
  }

  // optional bool is_decoding = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_decoding(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpMsg)
  return target;
}

size_t HttpMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HttpMsg)
  size_t total_size = 0;

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_http_major()) {
    // required int32 http_major = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_major());
  }

  if (has_http_minor()) {
    // required int32 http_minor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_minor());
  }

  return total_size;
}
size_t HttpMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HttpMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000038) ^ 0x00000038) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 http_major = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_major());

    // required int32 http_minor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_minor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .HttpMsg.Header headers = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bytes body = 10;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional string path = 14;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 content_length = 4;
    if (has_content_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_length());
    }

    // optional int32 method = 5;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 status_code = 6;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

    // optional int32 encoding = 7;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encoding());
    }

    // optional bool is_decoding = 15;
    if (has_is_decoding()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HttpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpMsg)
    MergeFrom(*source);
  }
}

void HttpMsg::MergeFrom(const HttpMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HttpMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      http_major_ = from.http_major_;
    }
    if (cached_has_bits & 0x00000020u) {
      http_minor_ = from.http_minor_;
    }
    if (cached_has_bits & 0x00000040u) {
      content_length_ = from.content_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      status_code_ = from.status_code_;
    }
    if (cached_has_bits & 0x00000200u) {
      encoding_ = from.encoding_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_decoding_ = from.is_decoding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HttpMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HttpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpMsg::CopyFrom(const HttpMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HttpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000038) != 0x00000038) return false;
  return true;
}

void HttpMsg::Swap(HttpMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpMsg::InternalSwap(HttpMsg* other) {
  using std::swap;
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(http_major_, other->http_major_);
  swap(http_minor_, other->http_minor_);
  swap(content_length_, other->content_length_);
  swap(method_, other->method_);
  swap(status_code_, other->status_code_);
  swap(encoding_, other->encoding_);
  swap(is_decoding_, other->is_decoding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HttpMsg::GetMetadata() const {
  protobuf_http_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HttpMsg_Header* Arena::CreateMaybeMessage< ::HttpMsg_Header >(Arena* arena) {
  return Arena::CreateInternal< ::HttpMsg_Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HttpMsg* Arena::CreateMaybeMessage< ::HttpMsg >(Arena* arena) {
  return Arena::CreateInternal< ::HttpMsg >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
