// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#ifndef PROTOBUF_INCLUDED_http_2eproto
#define PROTOBUF_INCLUDED_http_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_http_2eproto 

namespace protobuf_http_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_http_2eproto
class HttpMsg;
class HttpMsgDefaultTypeInternal;
extern HttpMsgDefaultTypeInternal _HttpMsg_default_instance_;
class HttpMsg_Header;
class HttpMsg_HeaderDefaultTypeInternal;
extern HttpMsg_HeaderDefaultTypeInternal _HttpMsg_Header_default_instance_;
namespace google {
namespace protobuf {
template<> ::HttpMsg* Arena::CreateMaybeMessage<::HttpMsg>(Arena*);
template<> ::HttpMsg_Header* Arena::CreateMaybeMessage<::HttpMsg_Header>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class HttpMsg_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HttpMsg.Header) */ {
 public:
  HttpMsg_Header();
  virtual ~HttpMsg_Header();

  HttpMsg_Header(const HttpMsg_Header& from);

  inline HttpMsg_Header& operator=(const HttpMsg_Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpMsg_Header(HttpMsg_Header&& from) noexcept
    : HttpMsg_Header() {
    *this = ::std::move(from);
  }

  inline HttpMsg_Header& operator=(HttpMsg_Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpMsg_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpMsg_Header* internal_default_instance() {
    return reinterpret_cast<const HttpMsg_Header*>(
               &_HttpMsg_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HttpMsg_Header* other);
  friend void swap(HttpMsg_Header& a, HttpMsg_Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpMsg_Header* New() const final {
    return CreateMaybeMessage<HttpMsg_Header>(NULL);
  }

  HttpMsg_Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HttpMsg_Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HttpMsg_Header& from);
  void MergeFrom(const HttpMsg_Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpMsg_Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string header_name = 1;
  bool has_header_name() const;
  void clear_header_name();
  static const int kHeaderNameFieldNumber = 1;
  const ::std::string& header_name() const;
  void set_header_name(const ::std::string& value);
  #if LANG_CXX11
  void set_header_name(::std::string&& value);
  #endif
  void set_header_name(const char* value);
  void set_header_name(const char* value, size_t size);
  ::std::string* mutable_header_name();
  ::std::string* release_header_name();
  void set_allocated_header_name(::std::string* header_name);

  // optional bytes header_value = 2;
  bool has_header_value() const;
  void clear_header_value();
  static const int kHeaderValueFieldNumber = 2;
  const ::std::string& header_value() const;
  void set_header_value(const ::std::string& value);
  #if LANG_CXX11
  void set_header_value(::std::string&& value);
  #endif
  void set_header_value(const char* value);
  void set_header_value(const void* value, size_t size);
  ::std::string* mutable_header_value();
  ::std::string* release_header_value();
  void set_allocated_header_value(::std::string* header_value);

  // @@protoc_insertion_point(class_scope:HttpMsg.Header)
 private:
  void set_has_header_name();
  void clear_has_header_name();
  void set_has_header_value();
  void clear_has_header_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr header_name_;
  ::google::protobuf::internal::ArenaStringPtr header_value_;
  friend struct ::protobuf_http_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HttpMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HttpMsg) */ {
 public:
  HttpMsg();
  virtual ~HttpMsg();

  HttpMsg(const HttpMsg& from);

  inline HttpMsg& operator=(const HttpMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpMsg(HttpMsg&& from) noexcept
    : HttpMsg() {
    *this = ::std::move(from);
  }

  inline HttpMsg& operator=(HttpMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpMsg* internal_default_instance() {
    return reinterpret_cast<const HttpMsg*>(
               &_HttpMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HttpMsg* other);
  friend void swap(HttpMsg& a, HttpMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpMsg* New() const final {
    return CreateMaybeMessage<HttpMsg>(NULL);
  }

  HttpMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HttpMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HttpMsg& from);
  void MergeFrom(const HttpMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HttpMsg_Header Header;

  // accessors -------------------------------------------------------

  // repeated .HttpMsg.Header headers = 9;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 9;
  ::HttpMsg_Header* mutable_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::HttpMsg_Header >*
      mutable_headers();
  const ::HttpMsg_Header& headers(int index) const;
  ::HttpMsg_Header* add_headers();
  const ::google::protobuf::RepeatedPtrField< ::HttpMsg_Header >&
      headers() const;

  // optional string url = 8;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 8;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional bytes body = 10;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 10;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional string path = 14;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 14;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 http_major = 2;
  bool has_http_major() const;
  void clear_http_major();
  static const int kHttpMajorFieldNumber = 2;
  ::google::protobuf::int32 http_major() const;
  void set_http_major(::google::protobuf::int32 value);

  // required int32 http_minor = 3;
  bool has_http_minor() const;
  void clear_http_minor();
  static const int kHttpMinorFieldNumber = 3;
  ::google::protobuf::int32 http_minor() const;
  void set_http_minor(::google::protobuf::int32 value);

  // optional int32 content_length = 4;
  bool has_content_length() const;
  void clear_content_length();
  static const int kContentLengthFieldNumber = 4;
  ::google::protobuf::int32 content_length() const;
  void set_content_length(::google::protobuf::int32 value);

  // optional int32 method = 5;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 5;
  ::google::protobuf::int32 method() const;
  void set_method(::google::protobuf::int32 value);

  // optional int32 status_code = 6;
  bool has_status_code() const;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 6;
  ::google::protobuf::int32 status_code() const;
  void set_status_code(::google::protobuf::int32 value);

  // optional int32 encoding = 7;
  bool has_encoding() const;
  void clear_encoding();
  static const int kEncodingFieldNumber = 7;
  ::google::protobuf::int32 encoding() const;
  void set_encoding(::google::protobuf::int32 value);

  // optional bool is_decoding = 15;
  bool has_is_decoding() const;
  void clear_is_decoding();
  static const int kIsDecodingFieldNumber = 15;
  bool is_decoding() const;
  void set_is_decoding(bool value);

  // @@protoc_insertion_point(class_scope:HttpMsg)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_http_major();
  void clear_has_http_major();
  void set_has_http_minor();
  void clear_has_http_minor();
  void set_has_content_length();
  void clear_has_content_length();
  void set_has_method();
  void clear_has_method();
  void set_has_status_code();
  void clear_has_status_code();
  void set_has_encoding();
  void clear_has_encoding();
  void set_has_url();
  void clear_has_url();
  void set_has_body();
  void clear_has_body();
  void set_has_path();
  void clear_has_path();
  void set_has_is_decoding();
  void clear_has_is_decoding();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::HttpMsg_Header > headers_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 http_major_;
  ::google::protobuf::int32 http_minor_;
  ::google::protobuf::int32 content_length_;
  ::google::protobuf::int32 method_;
  ::google::protobuf::int32 status_code_;
  ::google::protobuf::int32 encoding_;
  bool is_decoding_;
  friend struct ::protobuf_http_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HttpMsg_Header

// optional string header_name = 1;
inline bool HttpMsg_Header::has_header_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpMsg_Header::set_has_header_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpMsg_Header::clear_has_header_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpMsg_Header::clear_header_name() {
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_name();
}
inline const ::std::string& HttpMsg_Header::header_name() const {
  // @@protoc_insertion_point(field_get:HttpMsg.Header.header_name)
  return header_name_.GetNoArena();
}
inline void HttpMsg_Header::set_header_name(const ::std::string& value) {
  set_has_header_name();
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.Header.header_name)
}
#if LANG_CXX11
inline void HttpMsg_Header::set_header_name(::std::string&& value) {
  set_has_header_name();
  header_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HttpMsg.Header.header_name)
}
#endif
inline void HttpMsg_Header::set_header_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header_name();
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.Header.header_name)
}
inline void HttpMsg_Header::set_header_name(const char* value, size_t size) {
  set_has_header_name();
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.Header.header_name)
}
inline ::std::string* HttpMsg_Header::mutable_header_name() {
  set_has_header_name();
  // @@protoc_insertion_point(field_mutable:HttpMsg.Header.header_name)
  return header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpMsg_Header::release_header_name() {
  // @@protoc_insertion_point(field_release:HttpMsg.Header.header_name)
  if (!has_header_name()) {
    return NULL;
  }
  clear_has_header_name();
  return header_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpMsg_Header::set_allocated_header_name(::std::string* header_name) {
  if (header_name != NULL) {
    set_has_header_name();
  } else {
    clear_has_header_name();
  }
  header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_name);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.Header.header_name)
}

// optional bytes header_value = 2;
inline bool HttpMsg_Header::has_header_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpMsg_Header::set_has_header_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpMsg_Header::clear_has_header_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpMsg_Header::clear_header_value() {
  header_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_value();
}
inline const ::std::string& HttpMsg_Header::header_value() const {
  // @@protoc_insertion_point(field_get:HttpMsg.Header.header_value)
  return header_value_.GetNoArena();
}
inline void HttpMsg_Header::set_header_value(const ::std::string& value) {
  set_has_header_value();
  header_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.Header.header_value)
}
#if LANG_CXX11
inline void HttpMsg_Header::set_header_value(::std::string&& value) {
  set_has_header_value();
  header_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HttpMsg.Header.header_value)
}
#endif
inline void HttpMsg_Header::set_header_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header_value();
  header_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.Header.header_value)
}
inline void HttpMsg_Header::set_header_value(const void* value, size_t size) {
  set_has_header_value();
  header_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.Header.header_value)
}
inline ::std::string* HttpMsg_Header::mutable_header_value() {
  set_has_header_value();
  // @@protoc_insertion_point(field_mutable:HttpMsg.Header.header_value)
  return header_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpMsg_Header::release_header_value() {
  // @@protoc_insertion_point(field_release:HttpMsg.Header.header_value)
  if (!has_header_value()) {
    return NULL;
  }
  clear_has_header_value();
  return header_value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpMsg_Header::set_allocated_header_value(::std::string* header_value) {
  if (header_value != NULL) {
    set_has_header_value();
  } else {
    clear_has_header_value();
  }
  header_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_value);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.Header.header_value)
}

// -------------------------------------------------------------------

// HttpMsg

// required int32 type = 1;
inline bool HttpMsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HttpMsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HttpMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HttpMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 HttpMsg::type() const {
  // @@protoc_insertion_point(field_get:HttpMsg.type)
  return type_;
}
inline void HttpMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.type)
}

// required int32 http_major = 2;
inline bool HttpMsg::has_http_major() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HttpMsg::set_has_http_major() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HttpMsg::clear_has_http_major() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HttpMsg::clear_http_major() {
  http_major_ = 0;
  clear_has_http_major();
}
inline ::google::protobuf::int32 HttpMsg::http_major() const {
  // @@protoc_insertion_point(field_get:HttpMsg.http_major)
  return http_major_;
}
inline void HttpMsg::set_http_major(::google::protobuf::int32 value) {
  set_has_http_major();
  http_major_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.http_major)
}

// required int32 http_minor = 3;
inline bool HttpMsg::has_http_minor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HttpMsg::set_has_http_minor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HttpMsg::clear_has_http_minor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HttpMsg::clear_http_minor() {
  http_minor_ = 0;
  clear_has_http_minor();
}
inline ::google::protobuf::int32 HttpMsg::http_minor() const {
  // @@protoc_insertion_point(field_get:HttpMsg.http_minor)
  return http_minor_;
}
inline void HttpMsg::set_http_minor(::google::protobuf::int32 value) {
  set_has_http_minor();
  http_minor_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.http_minor)
}

// optional int32 content_length = 4;
inline bool HttpMsg::has_content_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HttpMsg::set_has_content_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HttpMsg::clear_has_content_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HttpMsg::clear_content_length() {
  content_length_ = 0;
  clear_has_content_length();
}
inline ::google::protobuf::int32 HttpMsg::content_length() const {
  // @@protoc_insertion_point(field_get:HttpMsg.content_length)
  return content_length_;
}
inline void HttpMsg::set_content_length(::google::protobuf::int32 value) {
  set_has_content_length();
  content_length_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.content_length)
}

// optional int32 method = 5;
inline bool HttpMsg::has_method() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HttpMsg::set_has_method() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HttpMsg::clear_has_method() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HttpMsg::clear_method() {
  method_ = 0;
  clear_has_method();
}
inline ::google::protobuf::int32 HttpMsg::method() const {
  // @@protoc_insertion_point(field_get:HttpMsg.method)
  return method_;
}
inline void HttpMsg::set_method(::google::protobuf::int32 value) {
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.method)
}

// optional int32 status_code = 6;
inline bool HttpMsg::has_status_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HttpMsg::set_has_status_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HttpMsg::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HttpMsg::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
inline ::google::protobuf::int32 HttpMsg::status_code() const {
  // @@protoc_insertion_point(field_get:HttpMsg.status_code)
  return status_code_;
}
inline void HttpMsg::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.status_code)
}

// optional int32 encoding = 7;
inline bool HttpMsg::has_encoding() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HttpMsg::set_has_encoding() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HttpMsg::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HttpMsg::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
inline ::google::protobuf::int32 HttpMsg::encoding() const {
  // @@protoc_insertion_point(field_get:HttpMsg.encoding)
  return encoding_;
}
inline void HttpMsg::set_encoding(::google::protobuf::int32 value) {
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.encoding)
}

// optional string url = 8;
inline bool HttpMsg::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpMsg::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpMsg::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpMsg::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& HttpMsg::url() const {
  // @@protoc_insertion_point(field_get:HttpMsg.url)
  return url_.GetNoArena();
}
inline void HttpMsg::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.url)
}
#if LANG_CXX11
inline void HttpMsg::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HttpMsg.url)
}
#endif
inline void HttpMsg::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.url)
}
inline void HttpMsg::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.url)
}
inline ::std::string* HttpMsg::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:HttpMsg.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpMsg::release_url() {
  // @@protoc_insertion_point(field_release:HttpMsg.url)
  if (!has_url()) {
    return NULL;
  }
  clear_has_url();
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpMsg::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.url)
}

// repeated .HttpMsg.Header headers = 9;
inline int HttpMsg::headers_size() const {
  return headers_.size();
}
inline void HttpMsg::clear_headers() {
  headers_.Clear();
}
inline ::HttpMsg_Header* HttpMsg::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:HttpMsg.headers)
  return headers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HttpMsg_Header >*
HttpMsg::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:HttpMsg.headers)
  return &headers_;
}
inline const ::HttpMsg_Header& HttpMsg::headers(int index) const {
  // @@protoc_insertion_point(field_get:HttpMsg.headers)
  return headers_.Get(index);
}
inline ::HttpMsg_Header* HttpMsg::add_headers() {
  // @@protoc_insertion_point(field_add:HttpMsg.headers)
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HttpMsg_Header >&
HttpMsg::headers() const {
  // @@protoc_insertion_point(field_list:HttpMsg.headers)
  return headers_;
}

// optional bytes body = 10;
inline bool HttpMsg::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpMsg::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpMsg::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpMsg::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& HttpMsg::body() const {
  // @@protoc_insertion_point(field_get:HttpMsg.body)
  return body_.GetNoArena();
}
inline void HttpMsg::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.body)
}
#if LANG_CXX11
inline void HttpMsg::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HttpMsg.body)
}
#endif
inline void HttpMsg::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.body)
}
inline void HttpMsg::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.body)
}
inline ::std::string* HttpMsg::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:HttpMsg.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpMsg::release_body() {
  // @@protoc_insertion_point(field_release:HttpMsg.body)
  if (!has_body()) {
    return NULL;
  }
  clear_has_body();
  return body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpMsg::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.body)
}

// optional string path = 14;
inline bool HttpMsg::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpMsg::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpMsg::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpMsg::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& HttpMsg::path() const {
  // @@protoc_insertion_point(field_get:HttpMsg.path)
  return path_.GetNoArena();
}
inline void HttpMsg::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.path)
}
#if LANG_CXX11
inline void HttpMsg::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HttpMsg.path)
}
#endif
inline void HttpMsg::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.path)
}
inline void HttpMsg::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.path)
}
inline ::std::string* HttpMsg::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:HttpMsg.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HttpMsg::release_path() {
  // @@protoc_insertion_point(field_release:HttpMsg.path)
  if (!has_path()) {
    return NULL;
  }
  clear_has_path();
  return path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HttpMsg::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.path)
}

// optional bool is_decoding = 15;
inline bool HttpMsg::has_is_decoding() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HttpMsg::set_has_is_decoding() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HttpMsg::clear_has_is_decoding() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HttpMsg::clear_is_decoding() {
  is_decoding_ = false;
  clear_has_is_decoding();
}
inline bool HttpMsg::is_decoding() const {
  // @@protoc_insertion_point(field_get:HttpMsg.is_decoding)
  return is_decoding_;
}
inline void HttpMsg::set_is_decoding(bool value) {
  set_has_is_decoding();
  is_decoding_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.is_decoding)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_http_2eproto
