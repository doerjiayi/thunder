syntax = "proto2";

/**
 * @brief 请求响应
 * @note 普通（简单、一般）响应，用于只返回错误码和错误信息的场景，错误码为0表示成功，其他错误码各自定义
 */
message OrdinaryResponse
{
    optional int32 err_no           = 1;    	///< 错误码
    optional bytes err_msg          = 2;    	///< 错误信息
}


/**
 * @brief 消息头
 */
message MsgHead
{
    required fixed32 cmd = 1 ;               	///< 命令字（压缩加密算法占高位1字节）
    required fixed32 msgbody_len = 2;        	///< 消息体长度（单个消息体长度不能超过4294967296‬即4G）
    required fixed32 seq = 3;                	///< 序列号
    required fixed32 checksum  = 4;             ///< 校验码
}

/**
 * @brief 消息体
 * @note 消息体主体是body，所有业务逻辑内容均放在body里。session_id和session用于接入层路由，
 * 两者只需要填充一个即可，首选session_id，当session_id用整型无法表达时才使用session。
 */
message MsgBody
{
    optional bytes body         = 1;			///< 消息体主体
    optional string sbody       = 2;       	 	///< 消息体主体(字符串类型,json)string sbody       			= 2;        ///< 消息体主体(字符串类型,json)
    
    optional uint32 session_id  = 3;			///< 会话ID（单聊消息为接收者uid，个人信息修改为uid，群聊消息为groupid，群管理为groupid）
    optional string session     = 4;			///< 会话ID（当session_id用整型无法表达时使用）
    
    optional bytes additional   = 5;			///< 接入层附加的数据（客户端无须理会）

    optional string trace_id    = 6;            ///< for log trace
	optional Response rsp_result      = 7;		///< 为了方便附带响应结果 
	
	message Response
    {
        optional int32 code            = 1;           ///< 错误码
        optional bytes msg             = 2;           ///< 错误信息
    }
}



