// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oss_sys.proto

#ifndef PROTOBUF_INCLUDED_oss_5fsys_2eproto
#define PROTOBUF_INCLUDED_oss_5fsys_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_oss_5fsys_2eproto 

namespace protobuf_oss_5fsys_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_oss_5fsys_2eproto
class ConfigInfo;
class ConfigInfoDefaultTypeInternal;
extern ConfigInfoDefaultTypeInternal _ConfigInfo_default_instance_;
class ConnectWorker;
class ConnectWorkerDefaultTypeInternal;
extern ConnectWorkerDefaultTypeInternal _ConnectWorker_default_instance_;
class LogLevel;
class LogLevelDefaultTypeInternal;
extern LogLevelDefaultTypeInternal _LogLevel_default_instance_;
class TargetWorker;
class TargetWorkerDefaultTypeInternal;
extern TargetWorkerDefaultTypeInternal _TargetWorker_default_instance_;
class WorkerLoad;
class WorkerLoadDefaultTypeInternal;
extern WorkerLoadDefaultTypeInternal _WorkerLoad_default_instance_;
namespace google {
namespace protobuf {
template<> ::ConfigInfo* Arena::CreateMaybeMessage<::ConfigInfo>(Arena*);
template<> ::ConnectWorker* Arena::CreateMaybeMessage<::ConnectWorker>(Arena*);
template<> ::LogLevel* Arena::CreateMaybeMessage<::LogLevel>(Arena*);
template<> ::TargetWorker* Arena::CreateMaybeMessage<::TargetWorker>(Arena*);
template<> ::WorkerLoad* Arena::CreateMaybeMessage<::WorkerLoad>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ConfigInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConfigInfo) */ {
 public:
  ConfigInfo();
  virtual ~ConfigInfo();

  ConfigInfo(const ConfigInfo& from);

  inline ConfigInfo& operator=(const ConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigInfo(ConfigInfo&& from) noexcept
    : ConfigInfo() {
    *this = ::std::move(from);
  }

  inline ConfigInfo& operator=(ConfigInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigInfo* internal_default_instance() {
    return reinterpret_cast<const ConfigInfo*>(
               &_ConfigInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConfigInfo* other);
  friend void swap(ConfigInfo& a, ConfigInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigInfo* New() const final {
    return CreateMaybeMessage<ConfigInfo>(NULL);
  }

  ConfigInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigInfo& from);
  void MergeFrom(const ConfigInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // required string file_content = 2;
  bool has_file_content() const;
  void clear_file_content();
  static const int kFileContentFieldNumber = 2;
  const ::std::string& file_content() const;
  void set_file_content(const ::std::string& value);
  #if LANG_CXX11
  void set_file_content(::std::string&& value);
  #endif
  void set_file_content(const char* value);
  void set_file_content(const char* value, size_t size);
  ::std::string* mutable_file_content();
  ::std::string* release_file_content();
  void set_allocated_file_content(::std::string* file_content);

  // @@protoc_insertion_point(class_scope:ConfigInfo)
 private:
  void set_has_file_name();
  void clear_has_file_name();
  void set_has_file_content();
  void clear_has_file_content();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_content_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WorkerLoad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WorkerLoad) */ {
 public:
  WorkerLoad();
  virtual ~WorkerLoad();

  WorkerLoad(const WorkerLoad& from);

  inline WorkerLoad& operator=(const WorkerLoad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkerLoad(WorkerLoad&& from) noexcept
    : WorkerLoad() {
    *this = ::std::move(from);
  }

  inline WorkerLoad& operator=(WorkerLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkerLoad* internal_default_instance() {
    return reinterpret_cast<const WorkerLoad*>(
               &_WorkerLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WorkerLoad* other);
  friend void swap(WorkerLoad& a, WorkerLoad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkerLoad* New() const final {
    return CreateMaybeMessage<WorkerLoad>(NULL);
  }

  WorkerLoad* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkerLoad>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkerLoad& from);
  void MergeFrom(const WorkerLoad& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerLoad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // required int32 load = 2;
  bool has_load() const;
  void clear_load();
  static const int kLoadFieldNumber = 2;
  ::google::protobuf::int32 load() const;
  void set_load(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorkerLoad)
 private:
  void set_has_pid();
  void clear_has_pid();
  void set_has_load();
  void clear_has_load();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 load_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectWorker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConnectWorker) */ {
 public:
  ConnectWorker();
  virtual ~ConnectWorker();

  ConnectWorker(const ConnectWorker& from);

  inline ConnectWorker& operator=(const ConnectWorker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectWorker(ConnectWorker&& from) noexcept
    : ConnectWorker() {
    *this = ::std::move(from);
  }

  inline ConnectWorker& operator=(ConnectWorker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectWorker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectWorker* internal_default_instance() {
    return reinterpret_cast<const ConnectWorker*>(
               &_ConnectWorker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConnectWorker* other);
  friend void swap(ConnectWorker& a, ConnectWorker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectWorker* New() const final {
    return CreateMaybeMessage<ConnectWorker>(NULL);
  }

  ConnectWorker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectWorker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectWorker& from);
  void MergeFrom(const ConnectWorker& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectWorker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 worker_index = 1;
  bool has_worker_index() const;
  void clear_worker_index();
  static const int kWorkerIndexFieldNumber = 1;
  ::google::protobuf::int32 worker_index() const;
  void set_worker_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConnectWorker)
 private:
  void set_has_worker_index();
  void clear_has_worker_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 worker_index_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TargetWorker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TargetWorker) */ {
 public:
  TargetWorker();
  virtual ~TargetWorker();

  TargetWorker(const TargetWorker& from);

  inline TargetWorker& operator=(const TargetWorker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TargetWorker(TargetWorker&& from) noexcept
    : TargetWorker() {
    *this = ::std::move(from);
  }

  inline TargetWorker& operator=(TargetWorker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetWorker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetWorker* internal_default_instance() {
    return reinterpret_cast<const TargetWorker*>(
               &_TargetWorker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TargetWorker* other);
  friend void swap(TargetWorker& a, TargetWorker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetWorker* New() const final {
    return CreateMaybeMessage<TargetWorker>(NULL);
  }

  TargetWorker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TargetWorker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TargetWorker& from);
  void MergeFrom(const TargetWorker& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetWorker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string worker_identify = 2;
  bool has_worker_identify() const;
  void clear_worker_identify();
  static const int kWorkerIdentifyFieldNumber = 2;
  const ::std::string& worker_identify() const;
  void set_worker_identify(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_identify(::std::string&& value);
  #endif
  void set_worker_identify(const char* value);
  void set_worker_identify(const char* value, size_t size);
  ::std::string* mutable_worker_identify();
  ::std::string* release_worker_identify();
  void set_allocated_worker_identify(::std::string* worker_identify);

  // required string node_type = 3;
  bool has_node_type() const;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 3;
  const ::std::string& node_type() const;
  void set_node_type(const ::std::string& value);
  #if LANG_CXX11
  void set_node_type(::std::string&& value);
  #endif
  void set_node_type(const char* value);
  void set_node_type(const char* value, size_t size);
  ::std::string* mutable_node_type();
  ::std::string* release_node_type();
  void set_allocated_node_type(::std::string* node_type);

  // optional string err_msg = 4;
  bool has_err_msg() const;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 4;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // required int32 err_no = 1;
  bool has_err_no() const;
  void clear_err_no();
  static const int kErrNoFieldNumber = 1;
  ::google::protobuf::int32 err_no() const;
  void set_err_no(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TargetWorker)
 private:
  void set_has_err_no();
  void clear_has_err_no();
  void set_has_worker_identify();
  void clear_has_worker_identify();
  void set_has_node_type();
  void clear_has_node_type();
  void set_has_err_msg();
  void clear_has_err_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr worker_identify_;
  ::google::protobuf::internal::ArenaStringPtr node_type_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::google::protobuf::int32 err_no_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LogLevel) */ {
 public:
  LogLevel();
  virtual ~LogLevel();

  LogLevel(const LogLevel& from);

  inline LogLevel& operator=(const LogLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogLevel(LogLevel&& from) noexcept
    : LogLevel() {
    *this = ::std::move(from);
  }

  inline LogLevel& operator=(LogLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogLevel* internal_default_instance() {
    return reinterpret_cast<const LogLevel*>(
               &_LogLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LogLevel* other);
  friend void swap(LogLevel& a, LogLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogLevel* New() const final {
    return CreateMaybeMessage<LogLevel>(NULL);
  }

  LogLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogLevel& from);
  void MergeFrom(const LogLevel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 log_level = 1;
  bool has_log_level() const;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 1;
  ::google::protobuf::int32 log_level() const;
  void set_log_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LogLevel)
 private:
  void set_has_log_level();
  void clear_has_log_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 log_level_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigInfo

// required string file_name = 1;
inline bool ConfigInfo::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigInfo::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigInfo::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& ConfigInfo::file_name() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.file_name)
  return file_name_.GetNoArena();
}
inline void ConfigInfo::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.file_name)
}
#if LANG_CXX11
inline void ConfigInfo::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigInfo.file_name)
}
#endif
inline void ConfigInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.file_name)
}
inline void ConfigInfo::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.file_name)
}
inline ::std::string* ConfigInfo::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:ConfigInfo.file_name)
  if (!has_file_name()) {
    return NULL;
  }
  clear_has_file_name();
  return file_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.file_name)
}

// required string file_content = 2;
inline bool ConfigInfo::has_file_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigInfo::set_has_file_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigInfo::clear_has_file_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigInfo::clear_file_content() {
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_content();
}
inline const ::std::string& ConfigInfo::file_content() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.file_content)
  return file_content_.GetNoArena();
}
inline void ConfigInfo::set_file_content(const ::std::string& value) {
  set_has_file_content();
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.file_content)
}
#if LANG_CXX11
inline void ConfigInfo::set_file_content(::std::string&& value) {
  set_has_file_content();
  file_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigInfo.file_content)
}
#endif
inline void ConfigInfo::set_file_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_content();
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.file_content)
}
inline void ConfigInfo::set_file_content(const char* value, size_t size) {
  set_has_file_content();
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.file_content)
}
inline ::std::string* ConfigInfo::mutable_file_content() {
  set_has_file_content();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.file_content)
  return file_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_file_content() {
  // @@protoc_insertion_point(field_release:ConfigInfo.file_content)
  if (!has_file_content()) {
    return NULL;
  }
  clear_has_file_content();
  return file_content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_file_content(::std::string* file_content) {
  if (file_content != NULL) {
    set_has_file_content();
  } else {
    clear_has_file_content();
  }
  file_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_content);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.file_content)
}

// -------------------------------------------------------------------

// WorkerLoad

// required int32 pid = 1;
inline bool WorkerLoad::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkerLoad::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkerLoad::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkerLoad::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 WorkerLoad::pid() const {
  // @@protoc_insertion_point(field_get:WorkerLoad.pid)
  return pid_;
}
inline void WorkerLoad::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:WorkerLoad.pid)
}

// required int32 load = 2;
inline bool WorkerLoad::has_load() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorkerLoad::set_has_load() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorkerLoad::clear_has_load() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorkerLoad::clear_load() {
  load_ = 0;
  clear_has_load();
}
inline ::google::protobuf::int32 WorkerLoad::load() const {
  // @@protoc_insertion_point(field_get:WorkerLoad.load)
  return load_;
}
inline void WorkerLoad::set_load(::google::protobuf::int32 value) {
  set_has_load();
  load_ = value;
  // @@protoc_insertion_point(field_set:WorkerLoad.load)
}

// -------------------------------------------------------------------

// ConnectWorker

// required int32 worker_index = 1;
inline bool ConnectWorker::has_worker_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectWorker::set_has_worker_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectWorker::clear_has_worker_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectWorker::clear_worker_index() {
  worker_index_ = 0;
  clear_has_worker_index();
}
inline ::google::protobuf::int32 ConnectWorker::worker_index() const {
  // @@protoc_insertion_point(field_get:ConnectWorker.worker_index)
  return worker_index_;
}
inline void ConnectWorker::set_worker_index(::google::protobuf::int32 value) {
  set_has_worker_index();
  worker_index_ = value;
  // @@protoc_insertion_point(field_set:ConnectWorker.worker_index)
}

// -------------------------------------------------------------------

// TargetWorker

// required int32 err_no = 1;
inline bool TargetWorker::has_err_no() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TargetWorker::set_has_err_no() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TargetWorker::clear_has_err_no() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TargetWorker::clear_err_no() {
  err_no_ = 0;
  clear_has_err_no();
}
inline ::google::protobuf::int32 TargetWorker::err_no() const {
  // @@protoc_insertion_point(field_get:TargetWorker.err_no)
  return err_no_;
}
inline void TargetWorker::set_err_no(::google::protobuf::int32 value) {
  set_has_err_no();
  err_no_ = value;
  // @@protoc_insertion_point(field_set:TargetWorker.err_no)
}

// required string worker_identify = 2;
inline bool TargetWorker::has_worker_identify() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TargetWorker::set_has_worker_identify() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TargetWorker::clear_has_worker_identify() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TargetWorker::clear_worker_identify() {
  worker_identify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_worker_identify();
}
inline const ::std::string& TargetWorker::worker_identify() const {
  // @@protoc_insertion_point(field_get:TargetWorker.worker_identify)
  return worker_identify_.GetNoArena();
}
inline void TargetWorker::set_worker_identify(const ::std::string& value) {
  set_has_worker_identify();
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TargetWorker.worker_identify)
}
#if LANG_CXX11
inline void TargetWorker::set_worker_identify(::std::string&& value) {
  set_has_worker_identify();
  worker_identify_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TargetWorker.worker_identify)
}
#endif
inline void TargetWorker::set_worker_identify(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_worker_identify();
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TargetWorker.worker_identify)
}
inline void TargetWorker::set_worker_identify(const char* value, size_t size) {
  set_has_worker_identify();
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TargetWorker.worker_identify)
}
inline ::std::string* TargetWorker::mutable_worker_identify() {
  set_has_worker_identify();
  // @@protoc_insertion_point(field_mutable:TargetWorker.worker_identify)
  return worker_identify_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetWorker::release_worker_identify() {
  // @@protoc_insertion_point(field_release:TargetWorker.worker_identify)
  if (!has_worker_identify()) {
    return NULL;
  }
  clear_has_worker_identify();
  return worker_identify_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_allocated_worker_identify(::std::string* worker_identify) {
  if (worker_identify != NULL) {
    set_has_worker_identify();
  } else {
    clear_has_worker_identify();
  }
  worker_identify_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_identify);
  // @@protoc_insertion_point(field_set_allocated:TargetWorker.worker_identify)
}

// required string node_type = 3;
inline bool TargetWorker::has_node_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TargetWorker::set_has_node_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TargetWorker::clear_has_node_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TargetWorker::clear_node_type() {
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_type();
}
inline const ::std::string& TargetWorker::node_type() const {
  // @@protoc_insertion_point(field_get:TargetWorker.node_type)
  return node_type_.GetNoArena();
}
inline void TargetWorker::set_node_type(const ::std::string& value) {
  set_has_node_type();
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TargetWorker.node_type)
}
#if LANG_CXX11
inline void TargetWorker::set_node_type(::std::string&& value) {
  set_has_node_type();
  node_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TargetWorker.node_type)
}
#endif
inline void TargetWorker::set_node_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_type();
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TargetWorker.node_type)
}
inline void TargetWorker::set_node_type(const char* value, size_t size) {
  set_has_node_type();
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TargetWorker.node_type)
}
inline ::std::string* TargetWorker::mutable_node_type() {
  set_has_node_type();
  // @@protoc_insertion_point(field_mutable:TargetWorker.node_type)
  return node_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetWorker::release_node_type() {
  // @@protoc_insertion_point(field_release:TargetWorker.node_type)
  if (!has_node_type()) {
    return NULL;
  }
  clear_has_node_type();
  return node_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_allocated_node_type(::std::string* node_type) {
  if (node_type != NULL) {
    set_has_node_type();
  } else {
    clear_has_node_type();
  }
  node_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_type);
  // @@protoc_insertion_point(field_set_allocated:TargetWorker.node_type)
}

// optional string err_msg = 4;
inline bool TargetWorker::has_err_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TargetWorker::set_has_err_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TargetWorker::clear_has_err_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TargetWorker::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err_msg();
}
inline const ::std::string& TargetWorker::err_msg() const {
  // @@protoc_insertion_point(field_get:TargetWorker.err_msg)
  return err_msg_.GetNoArena();
}
inline void TargetWorker::set_err_msg(const ::std::string& value) {
  set_has_err_msg();
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TargetWorker.err_msg)
}
#if LANG_CXX11
inline void TargetWorker::set_err_msg(::std::string&& value) {
  set_has_err_msg();
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TargetWorker.err_msg)
}
#endif
inline void TargetWorker::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_err_msg();
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TargetWorker.err_msg)
}
inline void TargetWorker::set_err_msg(const char* value, size_t size) {
  set_has_err_msg();
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TargetWorker.err_msg)
}
inline ::std::string* TargetWorker::mutable_err_msg() {
  set_has_err_msg();
  // @@protoc_insertion_point(field_mutable:TargetWorker.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetWorker::release_err_msg() {
  // @@protoc_insertion_point(field_release:TargetWorker.err_msg)
  if (!has_err_msg()) {
    return NULL;
  }
  clear_has_err_msg();
  return err_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    set_has_err_msg();
  } else {
    clear_has_err_msg();
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:TargetWorker.err_msg)
}

// -------------------------------------------------------------------

// LogLevel

// required int32 log_level = 1;
inline bool LogLevel::has_log_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogLevel::set_has_log_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogLevel::clear_has_log_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogLevel::clear_log_level() {
  log_level_ = 0;
  clear_has_log_level();
}
inline ::google::protobuf::int32 LogLevel::log_level() const {
  // @@protoc_insertion_point(field_get:LogLevel.log_level)
  return log_level_;
}
inline void LogLevel::set_log_level(::google::protobuf::int32 value) {
  set_has_log_level();
  log_level_ = value;
  // @@protoc_insertion_point(field_set:LogLevel.log_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_oss_5fsys_2eproto
