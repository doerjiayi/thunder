// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oss_sys.proto

#ifndef PROTOBUF_INCLUDED_oss_5fsys_2eproto
#define PROTOBUF_INCLUDED_oss_5fsys_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_oss_5fsys_2eproto 

namespace protobuf_oss_5fsys_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_oss_5fsys_2eproto
class ConfigInfo;
class ConfigInfoDefaultTypeInternal;
extern ConfigInfoDefaultTypeInternal _ConfigInfo_default_instance_;
class ConnectWorker;
class ConnectWorkerDefaultTypeInternal;
extern ConnectWorkerDefaultTypeInternal _ConnectWorker_default_instance_;
class LogLevel;
class LogLevelDefaultTypeInternal;
extern LogLevelDefaultTypeInternal _LogLevel_default_instance_;
class TargetWorker;
class TargetWorkerDefaultTypeInternal;
extern TargetWorkerDefaultTypeInternal _TargetWorker_default_instance_;
class TraceLog;
class TraceLogDefaultTypeInternal;
extern TraceLogDefaultTypeInternal _TraceLog_default_instance_;
namespace google {
namespace protobuf {
template<> ::ConfigInfo* Arena::CreateMaybeMessage<::ConfigInfo>(Arena*);
template<> ::ConnectWorker* Arena::CreateMaybeMessage<::ConnectWorker>(Arena*);
template<> ::LogLevel* Arena::CreateMaybeMessage<::LogLevel>(Arena*);
template<> ::TargetWorker* Arena::CreateMaybeMessage<::TargetWorker>(Arena*);
template<> ::TraceLog* Arena::CreateMaybeMessage<::TraceLog>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ConnectWorker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConnectWorker) */ {
 public:
  ConnectWorker();
  virtual ~ConnectWorker();

  ConnectWorker(const ConnectWorker& from);

  inline ConnectWorker& operator=(const ConnectWorker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectWorker(ConnectWorker&& from) noexcept
    : ConnectWorker() {
    *this = ::std::move(from);
  }

  inline ConnectWorker& operator=(ConnectWorker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectWorker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectWorker* internal_default_instance() {
    return reinterpret_cast<const ConnectWorker*>(
               &_ConnectWorker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConnectWorker* other);
  friend void swap(ConnectWorker& a, ConnectWorker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectWorker* New() const final {
    return CreateMaybeMessage<ConnectWorker>(NULL);
  }

  ConnectWorker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectWorker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectWorker& from);
  void MergeFrom(const ConnectWorker& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectWorker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 worker_index = 1;
  void clear_worker_index();
  static const int kWorkerIndexFieldNumber = 1;
  ::google::protobuf::int32 worker_index() const;
  void set_worker_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConnectWorker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 worker_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TargetWorker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TargetWorker) */ {
 public:
  TargetWorker();
  virtual ~TargetWorker();

  TargetWorker(const TargetWorker& from);

  inline TargetWorker& operator=(const TargetWorker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TargetWorker(TargetWorker&& from) noexcept
    : TargetWorker() {
    *this = ::std::move(from);
  }

  inline TargetWorker& operator=(TargetWorker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetWorker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetWorker* internal_default_instance() {
    return reinterpret_cast<const TargetWorker*>(
               &_TargetWorker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TargetWorker* other);
  friend void swap(TargetWorker& a, TargetWorker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TargetWorker* New() const final {
    return CreateMaybeMessage<TargetWorker>(NULL);
  }

  TargetWorker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TargetWorker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TargetWorker& from);
  void MergeFrom(const TargetWorker& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetWorker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string worker_identify = 2;
  void clear_worker_identify();
  static const int kWorkerIdentifyFieldNumber = 2;
  const ::std::string& worker_identify() const;
  void set_worker_identify(const ::std::string& value);
  #if LANG_CXX11
  void set_worker_identify(::std::string&& value);
  #endif
  void set_worker_identify(const char* value);
  void set_worker_identify(const char* value, size_t size);
  ::std::string* mutable_worker_identify();
  ::std::string* release_worker_identify();
  void set_allocated_worker_identify(::std::string* worker_identify);

  // string node_type = 3;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 3;
  const ::std::string& node_type() const;
  void set_node_type(const ::std::string& value);
  #if LANG_CXX11
  void set_node_type(::std::string&& value);
  #endif
  void set_node_type(const char* value);
  void set_node_type(const char* value, size_t size);
  ::std::string* mutable_node_type();
  ::std::string* release_node_type();
  void set_allocated_node_type(::std::string* node_type);

  // string err_msg = 4;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 4;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // int32 err_no = 1;
  void clear_err_no();
  static const int kErrNoFieldNumber = 1;
  ::google::protobuf::int32 err_no() const;
  void set_err_no(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TargetWorker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr worker_identify_;
  ::google::protobuf::internal::ArenaStringPtr node_type_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::google::protobuf::int32 err_no_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LogLevel) */ {
 public:
  LogLevel();
  virtual ~LogLevel();

  LogLevel(const LogLevel& from);

  inline LogLevel& operator=(const LogLevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogLevel(LogLevel&& from) noexcept
    : LogLevel() {
    *this = ::std::move(from);
  }

  inline LogLevel& operator=(LogLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogLevel* internal_default_instance() {
    return reinterpret_cast<const LogLevel*>(
               &_LogLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LogLevel* other);
  friend void swap(LogLevel& a, LogLevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogLevel* New() const final {
    return CreateMaybeMessage<LogLevel>(NULL);
  }

  LogLevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogLevel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogLevel& from);
  void MergeFrom(const LogLevel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 log_level = 1;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 1;
  ::google::protobuf::int32 log_level() const;
  void set_log_level(::google::protobuf::int32 value);

  // int32 net_log_level = 2;
  void clear_net_log_level();
  static const int kNetLogLevelFieldNumber = 2;
  ::google::protobuf::int32 net_log_level() const;
  void set_net_log_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LogLevel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 log_level_;
  ::google::protobuf::int32 net_log_level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConfigInfo) */ {
 public:
  ConfigInfo();
  virtual ~ConfigInfo();

  ConfigInfo(const ConfigInfo& from);

  inline ConfigInfo& operator=(const ConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigInfo(ConfigInfo&& from) noexcept
    : ConfigInfo() {
    *this = ::std::move(from);
  }

  inline ConfigInfo& operator=(ConfigInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigInfo* internal_default_instance() {
    return reinterpret_cast<const ConfigInfo*>(
               &_ConfigInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConfigInfo* other);
  friend void swap(ConfigInfo& a, ConfigInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigInfo* New() const final {
    return CreateMaybeMessage<ConfigInfo>(NULL);
  }

  ConfigInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigInfo& from);
  void MergeFrom(const ConfigInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string file_content = 2;
  void clear_file_content();
  static const int kFileContentFieldNumber = 2;
  const ::std::string& file_content() const;
  void set_file_content(const ::std::string& value);
  #if LANG_CXX11
  void set_file_content(::std::string&& value);
  #endif
  void set_file_content(const char* value);
  void set_file_content(const char* value, size_t size);
  ::std::string* mutable_file_content();
  ::std::string* release_file_content();
  void set_allocated_file_content(::std::string* file_content);

  // string file_path = 3;
  void clear_file_path();
  static const int kFilePathFieldNumber = 3;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // @@protoc_insertion_point(class_scope:ConfigInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_content_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TraceLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TraceLog) */ {
 public:
  TraceLog();
  virtual ~TraceLog();

  TraceLog(const TraceLog& from);

  inline TraceLog& operator=(const TraceLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TraceLog(TraceLog&& from) noexcept
    : TraceLog() {
    *this = ::std::move(from);
  }

  inline TraceLog& operator=(TraceLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceLog* internal_default_instance() {
    return reinterpret_cast<const TraceLog*>(
               &_TraceLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TraceLog* other);
  friend void swap(TraceLog& a, TraceLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TraceLog* New() const final {
    return CreateMaybeMessage<TraceLog>(NULL);
  }

  TraceLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TraceLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TraceLog& from);
  void MergeFrom(const TraceLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string log_time = 1;
  void clear_log_time();
  static const int kLogTimeFieldNumber = 1;
  const ::std::string& log_time() const;
  void set_log_time(const ::std::string& value);
  #if LANG_CXX11
  void set_log_time(::std::string&& value);
  #endif
  void set_log_time(const char* value);
  void set_log_time(const char* value, size_t size);
  ::std::string* mutable_log_time();
  ::std::string* release_log_time();
  void set_allocated_log_time(::std::string* log_time);

  // string node_type = 2;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 2;
  const ::std::string& node_type() const;
  void set_node_type(const ::std::string& value);
  #if LANG_CXX11
  void set_node_type(::std::string&& value);
  #endif
  void set_node_type(const char* value);
  void set_node_type(const char* value, size_t size);
  ::std::string* mutable_node_type();
  ::std::string* release_node_type();
  void set_allocated_node_type(::std::string* node_type);

  // string node_identify = 3;
  void clear_node_identify();
  static const int kNodeIdentifyFieldNumber = 3;
  const ::std::string& node_identify() const;
  void set_node_identify(const ::std::string& value);
  #if LANG_CXX11
  void set_node_identify(::std::string&& value);
  #endif
  void set_node_identify(const char* value);
  void set_node_identify(const char* value, size_t size);
  ::std::string* mutable_node_identify();
  ::std::string* release_node_identify();
  void set_allocated_node_identify(::std::string* node_identify);

  // string log_level = 4;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 4;
  const ::std::string& log_level() const;
  void set_log_level(const ::std::string& value);
  #if LANG_CXX11
  void set_log_level(::std::string&& value);
  #endif
  void set_log_level(const char* value);
  void set_log_level(const char* value, size_t size);
  ::std::string* mutable_log_level();
  ::std::string* release_log_level();
  void set_allocated_log_level(::std::string* log_level);

  // string code_file_name = 5;
  void clear_code_file_name();
  static const int kCodeFileNameFieldNumber = 5;
  const ::std::string& code_file_name() const;
  void set_code_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_code_file_name(::std::string&& value);
  #endif
  void set_code_file_name(const char* value);
  void set_code_file_name(const char* value, size_t size);
  ::std::string* mutable_code_file_name();
  ::std::string* release_code_file_name();
  void set_allocated_code_file_name(::std::string* code_file_name);

  // string code_function = 7;
  void clear_code_function();
  static const int kCodeFunctionFieldNumber = 7;
  const ::std::string& code_function() const;
  void set_code_function(const ::std::string& value);
  #if LANG_CXX11
  void set_code_function(::std::string&& value);
  #endif
  void set_code_function(const char* value);
  void set_code_function(const char* value, size_t size);
  ::std::string* mutable_code_function();
  ::std::string* release_code_function();
  void set_allocated_code_function(::std::string* code_function);

  // bytes log_content = 8;
  void clear_log_content();
  static const int kLogContentFieldNumber = 8;
  const ::std::string& log_content() const;
  void set_log_content(const ::std::string& value);
  #if LANG_CXX11
  void set_log_content(::std::string&& value);
  #endif
  void set_log_content(const char* value);
  void set_log_content(const void* value, size_t size);
  ::std::string* mutable_log_content();
  ::std::string* release_log_content();
  void set_allocated_log_content(::std::string* log_content);

  // uint32 code_file_line = 6;
  void clear_code_file_line();
  static const int kCodeFileLineFieldNumber = 6;
  ::google::protobuf::uint32 code_file_line() const;
  void set_code_file_line(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TraceLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr log_time_;
  ::google::protobuf::internal::ArenaStringPtr node_type_;
  ::google::protobuf::internal::ArenaStringPtr node_identify_;
  ::google::protobuf::internal::ArenaStringPtr log_level_;
  ::google::protobuf::internal::ArenaStringPtr code_file_name_;
  ::google::protobuf::internal::ArenaStringPtr code_function_;
  ::google::protobuf::internal::ArenaStringPtr log_content_;
  ::google::protobuf::uint32 code_file_line_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_oss_5fsys_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectWorker

// int32 worker_index = 1;
inline void ConnectWorker::clear_worker_index() {
  worker_index_ = 0;
}
inline ::google::protobuf::int32 ConnectWorker::worker_index() const {
  // @@protoc_insertion_point(field_get:ConnectWorker.worker_index)
  return worker_index_;
}
inline void ConnectWorker::set_worker_index(::google::protobuf::int32 value) {
  
  worker_index_ = value;
  // @@protoc_insertion_point(field_set:ConnectWorker.worker_index)
}

// -------------------------------------------------------------------

// TargetWorker

// int32 err_no = 1;
inline void TargetWorker::clear_err_no() {
  err_no_ = 0;
}
inline ::google::protobuf::int32 TargetWorker::err_no() const {
  // @@protoc_insertion_point(field_get:TargetWorker.err_no)
  return err_no_;
}
inline void TargetWorker::set_err_no(::google::protobuf::int32 value) {
  
  err_no_ = value;
  // @@protoc_insertion_point(field_set:TargetWorker.err_no)
}

// string worker_identify = 2;
inline void TargetWorker::clear_worker_identify() {
  worker_identify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TargetWorker::worker_identify() const {
  // @@protoc_insertion_point(field_get:TargetWorker.worker_identify)
  return worker_identify_.GetNoArena();
}
inline void TargetWorker::set_worker_identify(const ::std::string& value) {
  
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TargetWorker.worker_identify)
}
#if LANG_CXX11
inline void TargetWorker::set_worker_identify(::std::string&& value) {
  
  worker_identify_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TargetWorker.worker_identify)
}
#endif
inline void TargetWorker::set_worker_identify(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TargetWorker.worker_identify)
}
inline void TargetWorker::set_worker_identify(const char* value, size_t size) {
  
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TargetWorker.worker_identify)
}
inline ::std::string* TargetWorker::mutable_worker_identify() {
  
  // @@protoc_insertion_point(field_mutable:TargetWorker.worker_identify)
  return worker_identify_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetWorker::release_worker_identify() {
  // @@protoc_insertion_point(field_release:TargetWorker.worker_identify)
  
  return worker_identify_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_allocated_worker_identify(::std::string* worker_identify) {
  if (worker_identify != NULL) {
    
  } else {
    
  }
  worker_identify_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_identify);
  // @@protoc_insertion_point(field_set_allocated:TargetWorker.worker_identify)
}

// string node_type = 3;
inline void TargetWorker::clear_node_type() {
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TargetWorker::node_type() const {
  // @@protoc_insertion_point(field_get:TargetWorker.node_type)
  return node_type_.GetNoArena();
}
inline void TargetWorker::set_node_type(const ::std::string& value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TargetWorker.node_type)
}
#if LANG_CXX11
inline void TargetWorker::set_node_type(::std::string&& value) {
  
  node_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TargetWorker.node_type)
}
#endif
inline void TargetWorker::set_node_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TargetWorker.node_type)
}
inline void TargetWorker::set_node_type(const char* value, size_t size) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TargetWorker.node_type)
}
inline ::std::string* TargetWorker::mutable_node_type() {
  
  // @@protoc_insertion_point(field_mutable:TargetWorker.node_type)
  return node_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetWorker::release_node_type() {
  // @@protoc_insertion_point(field_release:TargetWorker.node_type)
  
  return node_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_allocated_node_type(::std::string* node_type) {
  if (node_type != NULL) {
    
  } else {
    
  }
  node_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_type);
  // @@protoc_insertion_point(field_set_allocated:TargetWorker.node_type)
}

// string err_msg = 4;
inline void TargetWorker::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TargetWorker::err_msg() const {
  // @@protoc_insertion_point(field_get:TargetWorker.err_msg)
  return err_msg_.GetNoArena();
}
inline void TargetWorker::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TargetWorker.err_msg)
}
#if LANG_CXX11
inline void TargetWorker::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TargetWorker.err_msg)
}
#endif
inline void TargetWorker::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TargetWorker.err_msg)
}
inline void TargetWorker::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TargetWorker.err_msg)
}
inline ::std::string* TargetWorker::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:TargetWorker.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetWorker::release_err_msg() {
  // @@protoc_insertion_point(field_release:TargetWorker.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:TargetWorker.err_msg)
}

// -------------------------------------------------------------------

// LogLevel

// int32 log_level = 1;
inline void LogLevel::clear_log_level() {
  log_level_ = 0;
}
inline ::google::protobuf::int32 LogLevel::log_level() const {
  // @@protoc_insertion_point(field_get:LogLevel.log_level)
  return log_level_;
}
inline void LogLevel::set_log_level(::google::protobuf::int32 value) {
  
  log_level_ = value;
  // @@protoc_insertion_point(field_set:LogLevel.log_level)
}

// int32 net_log_level = 2;
inline void LogLevel::clear_net_log_level() {
  net_log_level_ = 0;
}
inline ::google::protobuf::int32 LogLevel::net_log_level() const {
  // @@protoc_insertion_point(field_get:LogLevel.net_log_level)
  return net_log_level_;
}
inline void LogLevel::set_net_log_level(::google::protobuf::int32 value) {
  
  net_log_level_ = value;
  // @@protoc_insertion_point(field_set:LogLevel.net_log_level)
}

// -------------------------------------------------------------------

// ConfigInfo

// string file_name = 1;
inline void ConfigInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::file_name() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.file_name)
  return file_name_.GetNoArena();
}
inline void ConfigInfo::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.file_name)
}
#if LANG_CXX11
inline void ConfigInfo::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigInfo.file_name)
}
#endif
inline void ConfigInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.file_name)
}
inline void ConfigInfo::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.file_name)
}
inline ::std::string* ConfigInfo::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:ConfigInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:ConfigInfo.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.file_name)
}

// string file_content = 2;
inline void ConfigInfo::clear_file_content() {
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::file_content() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.file_content)
  return file_content_.GetNoArena();
}
inline void ConfigInfo::set_file_content(const ::std::string& value) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.file_content)
}
#if LANG_CXX11
inline void ConfigInfo::set_file_content(::std::string&& value) {
  
  file_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigInfo.file_content)
}
#endif
inline void ConfigInfo::set_file_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.file_content)
}
inline void ConfigInfo::set_file_content(const char* value, size_t size) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.file_content)
}
inline ::std::string* ConfigInfo::mutable_file_content() {
  
  // @@protoc_insertion_point(field_mutable:ConfigInfo.file_content)
  return file_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_file_content() {
  // @@protoc_insertion_point(field_release:ConfigInfo.file_content)
  
  return file_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_file_content(::std::string* file_content) {
  if (file_content != NULL) {
    
  } else {
    
  }
  file_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_content);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.file_content)
}

// string file_path = 3;
inline void ConfigInfo::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::file_path() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.file_path)
  return file_path_.GetNoArena();
}
inline void ConfigInfo::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.file_path)
}
#if LANG_CXX11
inline void ConfigInfo::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigInfo.file_path)
}
#endif
inline void ConfigInfo::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.file_path)
}
inline void ConfigInfo::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.file_path)
}
inline ::std::string* ConfigInfo::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:ConfigInfo.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_file_path() {
  // @@protoc_insertion_point(field_release:ConfigInfo.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.file_path)
}

// -------------------------------------------------------------------

// TraceLog

// string log_time = 1;
inline void TraceLog::clear_log_time() {
  log_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::log_time() const {
  // @@protoc_insertion_point(field_get:TraceLog.log_time)
  return log_time_.GetNoArena();
}
inline void TraceLog::set_log_time(const ::std::string& value) {
  
  log_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TraceLog.log_time)
}
#if LANG_CXX11
inline void TraceLog::set_log_time(::std::string&& value) {
  
  log_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceLog.log_time)
}
#endif
inline void TraceLog::set_log_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceLog.log_time)
}
inline void TraceLog::set_log_time(const char* value, size_t size) {
  
  log_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceLog.log_time)
}
inline ::std::string* TraceLog::mutable_log_time() {
  
  // @@protoc_insertion_point(field_mutable:TraceLog.log_time)
  return log_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_log_time() {
  // @@protoc_insertion_point(field_release:TraceLog.log_time)
  
  return log_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_log_time(::std::string* log_time) {
  if (log_time != NULL) {
    
  } else {
    
  }
  log_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_time);
  // @@protoc_insertion_point(field_set_allocated:TraceLog.log_time)
}

// string node_type = 2;
inline void TraceLog::clear_node_type() {
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::node_type() const {
  // @@protoc_insertion_point(field_get:TraceLog.node_type)
  return node_type_.GetNoArena();
}
inline void TraceLog::set_node_type(const ::std::string& value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TraceLog.node_type)
}
#if LANG_CXX11
inline void TraceLog::set_node_type(::std::string&& value) {
  
  node_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceLog.node_type)
}
#endif
inline void TraceLog::set_node_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceLog.node_type)
}
inline void TraceLog::set_node_type(const char* value, size_t size) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceLog.node_type)
}
inline ::std::string* TraceLog::mutable_node_type() {
  
  // @@protoc_insertion_point(field_mutable:TraceLog.node_type)
  return node_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_node_type() {
  // @@protoc_insertion_point(field_release:TraceLog.node_type)
  
  return node_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_node_type(::std::string* node_type) {
  if (node_type != NULL) {
    
  } else {
    
  }
  node_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_type);
  // @@protoc_insertion_point(field_set_allocated:TraceLog.node_type)
}

// string node_identify = 3;
inline void TraceLog::clear_node_identify() {
  node_identify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::node_identify() const {
  // @@protoc_insertion_point(field_get:TraceLog.node_identify)
  return node_identify_.GetNoArena();
}
inline void TraceLog::set_node_identify(const ::std::string& value) {
  
  node_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TraceLog.node_identify)
}
#if LANG_CXX11
inline void TraceLog::set_node_identify(::std::string&& value) {
  
  node_identify_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceLog.node_identify)
}
#endif
inline void TraceLog::set_node_identify(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceLog.node_identify)
}
inline void TraceLog::set_node_identify(const char* value, size_t size) {
  
  node_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceLog.node_identify)
}
inline ::std::string* TraceLog::mutable_node_identify() {
  
  // @@protoc_insertion_point(field_mutable:TraceLog.node_identify)
  return node_identify_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_node_identify() {
  // @@protoc_insertion_point(field_release:TraceLog.node_identify)
  
  return node_identify_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_node_identify(::std::string* node_identify) {
  if (node_identify != NULL) {
    
  } else {
    
  }
  node_identify_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_identify);
  // @@protoc_insertion_point(field_set_allocated:TraceLog.node_identify)
}

// string log_level = 4;
inline void TraceLog::clear_log_level() {
  log_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::log_level() const {
  // @@protoc_insertion_point(field_get:TraceLog.log_level)
  return log_level_.GetNoArena();
}
inline void TraceLog::set_log_level(const ::std::string& value) {
  
  log_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TraceLog.log_level)
}
#if LANG_CXX11
inline void TraceLog::set_log_level(::std::string&& value) {
  
  log_level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceLog.log_level)
}
#endif
inline void TraceLog::set_log_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceLog.log_level)
}
inline void TraceLog::set_log_level(const char* value, size_t size) {
  
  log_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceLog.log_level)
}
inline ::std::string* TraceLog::mutable_log_level() {
  
  // @@protoc_insertion_point(field_mutable:TraceLog.log_level)
  return log_level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_log_level() {
  // @@protoc_insertion_point(field_release:TraceLog.log_level)
  
  return log_level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_log_level(::std::string* log_level) {
  if (log_level != NULL) {
    
  } else {
    
  }
  log_level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_level);
  // @@protoc_insertion_point(field_set_allocated:TraceLog.log_level)
}

// string code_file_name = 5;
inline void TraceLog::clear_code_file_name() {
  code_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::code_file_name() const {
  // @@protoc_insertion_point(field_get:TraceLog.code_file_name)
  return code_file_name_.GetNoArena();
}
inline void TraceLog::set_code_file_name(const ::std::string& value) {
  
  code_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TraceLog.code_file_name)
}
#if LANG_CXX11
inline void TraceLog::set_code_file_name(::std::string&& value) {
  
  code_file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceLog.code_file_name)
}
#endif
inline void TraceLog::set_code_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceLog.code_file_name)
}
inline void TraceLog::set_code_file_name(const char* value, size_t size) {
  
  code_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceLog.code_file_name)
}
inline ::std::string* TraceLog::mutable_code_file_name() {
  
  // @@protoc_insertion_point(field_mutable:TraceLog.code_file_name)
  return code_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_code_file_name() {
  // @@protoc_insertion_point(field_release:TraceLog.code_file_name)
  
  return code_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_code_file_name(::std::string* code_file_name) {
  if (code_file_name != NULL) {
    
  } else {
    
  }
  code_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_file_name);
  // @@protoc_insertion_point(field_set_allocated:TraceLog.code_file_name)
}

// uint32 code_file_line = 6;
inline void TraceLog::clear_code_file_line() {
  code_file_line_ = 0u;
}
inline ::google::protobuf::uint32 TraceLog::code_file_line() const {
  // @@protoc_insertion_point(field_get:TraceLog.code_file_line)
  return code_file_line_;
}
inline void TraceLog::set_code_file_line(::google::protobuf::uint32 value) {
  
  code_file_line_ = value;
  // @@protoc_insertion_point(field_set:TraceLog.code_file_line)
}

// string code_function = 7;
inline void TraceLog::clear_code_function() {
  code_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::code_function() const {
  // @@protoc_insertion_point(field_get:TraceLog.code_function)
  return code_function_.GetNoArena();
}
inline void TraceLog::set_code_function(const ::std::string& value) {
  
  code_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TraceLog.code_function)
}
#if LANG_CXX11
inline void TraceLog::set_code_function(::std::string&& value) {
  
  code_function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceLog.code_function)
}
#endif
inline void TraceLog::set_code_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceLog.code_function)
}
inline void TraceLog::set_code_function(const char* value, size_t size) {
  
  code_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceLog.code_function)
}
inline ::std::string* TraceLog::mutable_code_function() {
  
  // @@protoc_insertion_point(field_mutable:TraceLog.code_function)
  return code_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_code_function() {
  // @@protoc_insertion_point(field_release:TraceLog.code_function)
  
  return code_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_code_function(::std::string* code_function) {
  if (code_function != NULL) {
    
  } else {
    
  }
  code_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_function);
  // @@protoc_insertion_point(field_set_allocated:TraceLog.code_function)
}

// bytes log_content = 8;
inline void TraceLog::clear_log_content() {
  log_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::log_content() const {
  // @@protoc_insertion_point(field_get:TraceLog.log_content)
  return log_content_.GetNoArena();
}
inline void TraceLog::set_log_content(const ::std::string& value) {
  
  log_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TraceLog.log_content)
}
#if LANG_CXX11
inline void TraceLog::set_log_content(::std::string&& value) {
  
  log_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TraceLog.log_content)
}
#endif
inline void TraceLog::set_log_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TraceLog.log_content)
}
inline void TraceLog::set_log_content(const void* value, size_t size) {
  
  log_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TraceLog.log_content)
}
inline ::std::string* TraceLog::mutable_log_content() {
  
  // @@protoc_insertion_point(field_mutable:TraceLog.log_content)
  return log_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_log_content() {
  // @@protoc_insertion_point(field_release:TraceLog.log_content)
  
  return log_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_log_content(::std::string* log_content) {
  if (log_content != NULL) {
    
  } else {
    
  }
  log_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_content);
  // @@protoc_insertion_point(field_set_allocated:TraceLog.log_content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_oss_5fsys_2eproto
