// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: beacon.proto

#include "beacon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace coor {
class ElectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Election>
      _instance;
} _Election_default_instance_;
}  // namespace coor
namespace protobuf_beacon_2eproto {
static void InitDefaultsElection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coor::_Election_default_instance_;
    new (ptr) ::coor::Election();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coor::Election::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Election =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsElection}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Election.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coor::Election, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coor::Election, is_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coor::Election, last_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coor::Election, added_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::coor::Election, removed_node_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::coor::Election)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::coor::_Election_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "beacon.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014beacon.proto\022\004coor\"c\n\010Election\022\021\n\tis_l"
      "eader\030\001 \001(\005\022\024\n\014last_node_id\030\002 \001(\r\022\025\n\radd"
      "ed_node_id\030\003 \003(\r\022\027\n\017removed_node_id\030\004 \003("
      "\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 129);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "beacon.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_beacon_2eproto
namespace coor {

// ===================================================================

void Election::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Election::kIsLeaderFieldNumber;
const int Election::kLastNodeIdFieldNumber;
const int Election::kAddedNodeIdFieldNumber;
const int Election::kRemovedNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Election::Election()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_beacon_2eproto::scc_info_Election.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:coor.Election)
}
Election::Election(const Election& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      added_node_id_(from.added_node_id_),
      removed_node_id_(from.removed_node_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_leader_, &from.is_leader_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_node_id_) -
    reinterpret_cast<char*>(&is_leader_)) + sizeof(last_node_id_));
  // @@protoc_insertion_point(copy_constructor:coor.Election)
}

void Election::SharedCtor() {
  ::memset(&is_leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_node_id_) -
      reinterpret_cast<char*>(&is_leader_)) + sizeof(last_node_id_));
}

Election::~Election() {
  // @@protoc_insertion_point(destructor:coor.Election)
  SharedDtor();
}

void Election::SharedDtor() {
}

void Election::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Election::descriptor() {
  ::protobuf_beacon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beacon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Election& Election::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_beacon_2eproto::scc_info_Election.base);
  return *internal_default_instance();
}


void Election::Clear() {
// @@protoc_insertion_point(message_clear_start:coor.Election)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  added_node_id_.Clear();
  removed_node_id_.Clear();
  ::memset(&is_leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_node_id_) -
      reinterpret_cast<char*>(&is_leader_)) + sizeof(last_node_id_));
  _internal_metadata_.Clear();
}

bool Election::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coor.Election)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 is_leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 added_node_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_added_node_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_added_node_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 removed_node_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_removed_node_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_removed_node_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coor.Election)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coor.Election)
  return false;
#undef DO_
}

void Election::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coor.Election)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 is_leader = 1;
  if (this->is_leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_leader(), output);
  }

  // uint32 last_node_id = 2;
  if (this->last_node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_node_id(), output);
  }

  // repeated uint32 added_node_id = 3;
  if (this->added_node_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _added_node_id_cached_byte_size_));
  }
  for (int i = 0, n = this->added_node_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->added_node_id(i), output);
  }

  // repeated uint32 removed_node_id = 4;
  if (this->removed_node_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _removed_node_id_cached_byte_size_));
  }
  for (int i = 0, n = this->removed_node_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->removed_node_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:coor.Election)
}

::google::protobuf::uint8* Election::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coor.Election)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 is_leader = 1;
  if (this->is_leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_leader(), target);
  }

  // uint32 last_node_id = 2;
  if (this->last_node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_node_id(), target);
  }

  // repeated uint32 added_node_id = 3;
  if (this->added_node_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _added_node_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->added_node_id_, target);
  }

  // repeated uint32 removed_node_id = 4;
  if (this->removed_node_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _removed_node_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->removed_node_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coor.Election)
  return target;
}

size_t Election::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coor.Election)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 added_node_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->added_node_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _added_node_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 removed_node_id = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->removed_node_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _removed_node_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 is_leader = 1;
  if (this->is_leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_leader());
  }

  // uint32 last_node_id = 2;
  if (this->last_node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Election::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coor.Election)
  GOOGLE_DCHECK_NE(&from, this);
  const Election* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Election>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coor.Election)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coor.Election)
    MergeFrom(*source);
  }
}

void Election::MergeFrom(const Election& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coor.Election)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  added_node_id_.MergeFrom(from.added_node_id_);
  removed_node_id_.MergeFrom(from.removed_node_id_);
  if (from.is_leader() != 0) {
    set_is_leader(from.is_leader());
  }
  if (from.last_node_id() != 0) {
    set_last_node_id(from.last_node_id());
  }
}

void Election::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coor.Election)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Election::CopyFrom(const Election& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coor.Election)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Election::IsInitialized() const {
  return true;
}

void Election::Swap(Election* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Election::InternalSwap(Election* other) {
  using std::swap;
  added_node_id_.InternalSwap(&other->added_node_id_);
  removed_node_id_.InternalSwap(&other->removed_node_id_);
  swap(is_leader_, other->is_leader_);
  swap(last_node_id_, other->last_node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Election::GetMetadata() const {
  protobuf_beacon_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_beacon_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace coor
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::coor::Election* Arena::CreateMaybeMessage< ::coor::Election >(Arena* arena) {
  return Arena::CreateInternal< ::coor::Election >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
