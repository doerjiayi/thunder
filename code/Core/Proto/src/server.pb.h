// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef PROTOBUF_INCLUDED_server_2eproto
#define PROTOBUF_INCLUDED_server_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_server_2eproto 

namespace protobuf_server_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_server_2eproto
namespace server {
class check_server_load_ack;
class check_server_load_ackDefaultTypeInternal;
extern check_server_load_ackDefaultTypeInternal _check_server_load_ack_default_instance_;
class check_server_load_req;
class check_server_load_reqDefaultTypeInternal;
extern check_server_load_reqDefaultTypeInternal _check_server_load_req_default_instance_;
class errorinfo;
class errorinfoDefaultTypeInternal;
extern errorinfoDefaultTypeInternal _errorinfo_default_instance_;
class inquery_server_config_ack;
class inquery_server_config_ackDefaultTypeInternal;
extern inquery_server_config_ackDefaultTypeInternal _inquery_server_config_ack_default_instance_;
class inquery_server_config_req;
class inquery_server_config_reqDefaultTypeInternal;
extern inquery_server_config_reqDefaultTypeInternal _inquery_server_config_req_default_instance_;
class node_config;
class node_configDefaultTypeInternal;
extern node_configDefaultTypeInternal _node_config_default_instance_;
class offline_node_ack;
class offline_node_ackDefaultTypeInternal;
extern offline_node_ackDefaultTypeInternal _offline_node_ack_default_instance_;
class offline_node_req;
class offline_node_reqDefaultTypeInternal;
extern offline_node_reqDefaultTypeInternal _offline_node_req_default_instance_;
class online_node_ack;
class online_node_ackDefaultTypeInternal;
extern online_node_ackDefaultTypeInternal _online_node_ack_default_instance_;
class online_node_req;
class online_node_reqDefaultTypeInternal;
extern online_node_reqDefaultTypeInternal _online_node_req_default_instance_;
class update_server_config_ack;
class update_server_config_ackDefaultTypeInternal;
extern update_server_config_ackDefaultTypeInternal _update_server_config_ack_default_instance_;
class update_server_config_req;
class update_server_config_reqDefaultTypeInternal;
extern update_server_config_reqDefaultTypeInternal _update_server_config_req_default_instance_;
}  // namespace server
namespace google {
namespace protobuf {
template<> ::server::check_server_load_ack* Arena::CreateMaybeMessage<::server::check_server_load_ack>(Arena*);
template<> ::server::check_server_load_req* Arena::CreateMaybeMessage<::server::check_server_load_req>(Arena*);
template<> ::server::errorinfo* Arena::CreateMaybeMessage<::server::errorinfo>(Arena*);
template<> ::server::inquery_server_config_ack* Arena::CreateMaybeMessage<::server::inquery_server_config_ack>(Arena*);
template<> ::server::inquery_server_config_req* Arena::CreateMaybeMessage<::server::inquery_server_config_req>(Arena*);
template<> ::server::node_config* Arena::CreateMaybeMessage<::server::node_config>(Arena*);
template<> ::server::offline_node_ack* Arena::CreateMaybeMessage<::server::offline_node_ack>(Arena*);
template<> ::server::offline_node_req* Arena::CreateMaybeMessage<::server::offline_node_req>(Arena*);
template<> ::server::online_node_ack* Arena::CreateMaybeMessage<::server::online_node_ack>(Arena*);
template<> ::server::online_node_req* Arena::CreateMaybeMessage<::server::online_node_req>(Arena*);
template<> ::server::update_server_config_ack* Arena::CreateMaybeMessage<::server::update_server_config_ack>(Arena*);
template<> ::server::update_server_config_req* Arena::CreateMaybeMessage<::server::update_server_config_req>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace server {

// ===================================================================

class errorinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.errorinfo) */ {
 public:
  errorinfo();
  virtual ~errorinfo();

  errorinfo(const errorinfo& from);

  inline errorinfo& operator=(const errorinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  errorinfo(errorinfo&& from) noexcept
    : errorinfo() {
    *this = ::std::move(from);
  }

  inline errorinfo& operator=(errorinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const errorinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const errorinfo* internal_default_instance() {
    return reinterpret_cast<const errorinfo*>(
               &_errorinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(errorinfo* other);
  friend void swap(errorinfo& a, errorinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline errorinfo* New() const final {
    return CreateMaybeMessage<errorinfo>(NULL);
  }

  errorinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<errorinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const errorinfo& from);
  void MergeFrom(const errorinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(errorinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes error_info = 2;
  void clear_error_info();
  static const int kErrorInfoFieldNumber = 2;
  const ::std::string& error_info() const;
  void set_error_info(const ::std::string& value);
  #if LANG_CXX11
  void set_error_info(::std::string&& value);
  #endif
  void set_error_info(const char* value);
  void set_error_info(const void* value, size_t size);
  ::std::string* mutable_error_info();
  ::std::string* release_error_info();
  void set_allocated_error_info(::std::string* error_info);

  // bytes error_client_show = 3;
  void clear_error_client_show();
  static const int kErrorClientShowFieldNumber = 3;
  const ::std::string& error_client_show() const;
  void set_error_client_show(const ::std::string& value);
  #if LANG_CXX11
  void set_error_client_show(::std::string&& value);
  #endif
  void set_error_client_show(const char* value);
  void set_error_client_show(const void* value, size_t size);
  ::std::string* mutable_error_client_show();
  ::std::string* release_error_client_show();
  void set_allocated_error_client_show(::std::string* error_client_show);

  // int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:server.errorinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_info_;
  ::google::protobuf::internal::ArenaStringPtr error_client_show_;
  ::google::protobuf::int32 error_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class node_config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.node_config) */ {
 public:
  node_config();
  virtual ~node_config();

  node_config(const node_config& from);

  inline node_config& operator=(const node_config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  node_config(node_config&& from) noexcept
    : node_config() {
    *this = ::std::move(from);
  }

  inline node_config& operator=(node_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const node_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const node_config* internal_default_instance() {
    return reinterpret_cast<const node_config*>(
               &_node_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(node_config* other);
  friend void swap(node_config& a, node_config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline node_config* New() const final {
    return CreateMaybeMessage<node_config>(NULL);
  }

  node_config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<node_config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const node_config& from);
  void MergeFrom(const node_config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(node_config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_type = 1;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 1;
  const ::std::string& node_type() const;
  void set_node_type(const ::std::string& value);
  #if LANG_CXX11
  void set_node_type(::std::string&& value);
  #endif
  void set_node_type(const char* value);
  void set_node_type(const char* value, size_t size);
  ::std::string* mutable_node_type();
  ::std::string* release_node_type();
  void set_allocated_node_type(::std::string* node_type);

  // string config_content = 3;
  void clear_config_content();
  static const int kConfigContentFieldNumber = 3;
  const ::std::string& config_content() const;
  void set_config_content(const ::std::string& value);
  #if LANG_CXX11
  void set_config_content(::std::string&& value);
  #endif
  void set_config_content(const char* value);
  void set_config_content(const char* value, size_t size);
  ::std::string* mutable_config_content();
  ::std::string* release_config_content();
  void set_allocated_config_content(::std::string* config_content);

  // string config_file = 6;
  void clear_config_file();
  static const int kConfigFileFieldNumber = 6;
  const ::std::string& config_file() const;
  void set_config_file(const ::std::string& value);
  #if LANG_CXX11
  void set_config_file(::std::string&& value);
  #endif
  void set_config_file(const char* value);
  void set_config_file(const char* value, size_t size);
  ::std::string* mutable_config_file();
  ::std::string* release_config_file();
  void set_allocated_config_file(::std::string* config_file);

  // uint32 config_type = 2;
  void clear_config_type();
  static const int kConfigTypeFieldNumber = 2;
  ::google::protobuf::uint32 config_type() const;
  void set_config_type(::google::protobuf::uint32 value);

  // uint32 auto_send = 4;
  void clear_auto_send();
  static const int kAutoSendFieldNumber = 4;
  ::google::protobuf::uint32 auto_send() const;
  void set_auto_send(::google::protobuf::uint32 value);

  // uint32 reload_config = 5;
  void clear_reload_config();
  static const int kReloadConfigFieldNumber = 5;
  ::google::protobuf::uint32 reload_config() const;
  void set_reload_config(::google::protobuf::uint32 value);

  // uint32 update_time = 7;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  ::google::protobuf::uint32 update_time() const;
  void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.node_config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_type_;
  ::google::protobuf::internal::ArenaStringPtr config_content_;
  ::google::protobuf::internal::ArenaStringPtr config_file_;
  ::google::protobuf::uint32 config_type_;
  ::google::protobuf::uint32 auto_send_;
  ::google::protobuf::uint32 reload_config_;
  ::google::protobuf::uint32 update_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class inquery_server_config_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.inquery_server_config_req) */ {
 public:
  inquery_server_config_req();
  virtual ~inquery_server_config_req();

  inquery_server_config_req(const inquery_server_config_req& from);

  inline inquery_server_config_req& operator=(const inquery_server_config_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  inquery_server_config_req(inquery_server_config_req&& from) noexcept
    : inquery_server_config_req() {
    *this = ::std::move(from);
  }

  inline inquery_server_config_req& operator=(inquery_server_config_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const inquery_server_config_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const inquery_server_config_req* internal_default_instance() {
    return reinterpret_cast<const inquery_server_config_req*>(
               &_inquery_server_config_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(inquery_server_config_req* other);
  friend void swap(inquery_server_config_req& a, inquery_server_config_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline inquery_server_config_req* New() const final {
    return CreateMaybeMessage<inquery_server_config_req>(NULL);
  }

  inquery_server_config_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<inquery_server_config_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const inquery_server_config_req& from);
  void MergeFrom(const inquery_server_config_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(inquery_server_config_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_type = 1;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 1;
  const ::std::string& node_type() const;
  void set_node_type(const ::std::string& value);
  #if LANG_CXX11
  void set_node_type(::std::string&& value);
  #endif
  void set_node_type(const char* value);
  void set_node_type(const char* value, size_t size);
  ::std::string* mutable_node_type();
  ::std::string* release_node_type();
  void set_allocated_node_type(::std::string* node_type);

  // uint32 config_type = 2;
  void clear_config_type();
  static const int kConfigTypeFieldNumber = 2;
  ::google::protobuf::uint32 config_type() const;
  void set_config_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.inquery_server_config_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_type_;
  ::google::protobuf::uint32 config_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class inquery_server_config_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.inquery_server_config_ack) */ {
 public:
  inquery_server_config_ack();
  virtual ~inquery_server_config_ack();

  inquery_server_config_ack(const inquery_server_config_ack& from);

  inline inquery_server_config_ack& operator=(const inquery_server_config_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  inquery_server_config_ack(inquery_server_config_ack&& from) noexcept
    : inquery_server_config_ack() {
    *this = ::std::move(from);
  }

  inline inquery_server_config_ack& operator=(inquery_server_config_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const inquery_server_config_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const inquery_server_config_ack* internal_default_instance() {
    return reinterpret_cast<const inquery_server_config_ack*>(
               &_inquery_server_config_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(inquery_server_config_ack* other);
  friend void swap(inquery_server_config_ack& a, inquery_server_config_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline inquery_server_config_ack* New() const final {
    return CreateMaybeMessage<inquery_server_config_ack>(NULL);
  }

  inquery_server_config_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<inquery_server_config_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const inquery_server_config_ack& from);
  void MergeFrom(const inquery_server_config_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(inquery_server_config_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .server.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::server::errorinfo& _internal_error() const;
  public:
  const ::server::errorinfo& error() const;
  ::server::errorinfo* release_error();
  ::server::errorinfo* mutable_error();
  void set_allocated_error(::server::errorinfo* error);

  // .server.node_config config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  private:
  const ::server::node_config& _internal_config() const;
  public:
  const ::server::node_config& config() const;
  ::server::node_config* release_config();
  ::server::node_config* mutable_config();
  void set_allocated_config(::server::node_config* config);

  // @@protoc_insertion_point(class_scope:server.inquery_server_config_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::server::errorinfo* error_;
  ::server::node_config* config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class update_server_config_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.update_server_config_req) */ {
 public:
  update_server_config_req();
  virtual ~update_server_config_req();

  update_server_config_req(const update_server_config_req& from);

  inline update_server_config_req& operator=(const update_server_config_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  update_server_config_req(update_server_config_req&& from) noexcept
    : update_server_config_req() {
    *this = ::std::move(from);
  }

  inline update_server_config_req& operator=(update_server_config_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const update_server_config_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const update_server_config_req* internal_default_instance() {
    return reinterpret_cast<const update_server_config_req*>(
               &_update_server_config_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(update_server_config_req* other);
  friend void swap(update_server_config_req& a, update_server_config_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline update_server_config_req* New() const final {
    return CreateMaybeMessage<update_server_config_req>(NULL);
  }

  update_server_config_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<update_server_config_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const update_server_config_req& from);
  void MergeFrom(const update_server_config_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_server_config_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inner_ip = 2;
  void clear_inner_ip();
  static const int kInnerIpFieldNumber = 2;
  const ::std::string& inner_ip() const;
  void set_inner_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_inner_ip(::std::string&& value);
  #endif
  void set_inner_ip(const char* value);
  void set_inner_ip(const char* value, size_t size);
  ::std::string* mutable_inner_ip();
  ::std::string* release_inner_ip();
  void set_allocated_inner_ip(::std::string* inner_ip);

  // .server.node_config config = 1;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  private:
  const ::server::node_config& _internal_config() const;
  public:
  const ::server::node_config& config() const;
  ::server::node_config* release_config();
  ::server::node_config* mutable_config();
  void set_allocated_config(::server::node_config* config);

  // uint32 inner_port = 3;
  void clear_inner_port();
  static const int kInnerPortFieldNumber = 3;
  ::google::protobuf::uint32 inner_port() const;
  void set_inner_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.update_server_config_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inner_ip_;
  ::server::node_config* config_;
  ::google::protobuf::uint32 inner_port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class update_server_config_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.update_server_config_ack) */ {
 public:
  update_server_config_ack();
  virtual ~update_server_config_ack();

  update_server_config_ack(const update_server_config_ack& from);

  inline update_server_config_ack& operator=(const update_server_config_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  update_server_config_ack(update_server_config_ack&& from) noexcept
    : update_server_config_ack() {
    *this = ::std::move(from);
  }

  inline update_server_config_ack& operator=(update_server_config_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const update_server_config_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const update_server_config_ack* internal_default_instance() {
    return reinterpret_cast<const update_server_config_ack*>(
               &_update_server_config_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(update_server_config_ack* other);
  friend void swap(update_server_config_ack& a, update_server_config_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline update_server_config_ack* New() const final {
    return CreateMaybeMessage<update_server_config_ack>(NULL);
  }

  update_server_config_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<update_server_config_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const update_server_config_ack& from);
  void MergeFrom(const update_server_config_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(update_server_config_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inner_ip = 3;
  void clear_inner_ip();
  static const int kInnerIpFieldNumber = 3;
  const ::std::string& inner_ip() const;
  void set_inner_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_inner_ip(::std::string&& value);
  #endif
  void set_inner_ip(const char* value);
  void set_inner_ip(const char* value, size_t size);
  ::std::string* mutable_inner_ip();
  ::std::string* release_inner_ip();
  void set_allocated_inner_ip(::std::string* inner_ip);

  // .server.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::server::errorinfo& _internal_error() const;
  public:
  const ::server::errorinfo& error() const;
  ::server::errorinfo* release_error();
  ::server::errorinfo* mutable_error();
  void set_allocated_error(::server::errorinfo* error);

  // .server.node_config config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  private:
  const ::server::node_config& _internal_config() const;
  public:
  const ::server::node_config& config() const;
  ::server::node_config* release_config();
  ::server::node_config* mutable_config();
  void set_allocated_config(::server::node_config* config);

  // uint32 inner_port = 4;
  void clear_inner_port();
  static const int kInnerPortFieldNumber = 4;
  ::google::protobuf::uint32 inner_port() const;
  void set_inner_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.update_server_config_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inner_ip_;
  ::server::errorinfo* error_;
  ::server::node_config* config_;
  ::google::protobuf::uint32 inner_port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_node_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.offline_node_req) */ {
 public:
  offline_node_req();
  virtual ~offline_node_req();

  offline_node_req(const offline_node_req& from);

  inline offline_node_req& operator=(const offline_node_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_node_req(offline_node_req&& from) noexcept
    : offline_node_req() {
    *this = ::std::move(from);
  }

  inline offline_node_req& operator=(offline_node_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_node_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_node_req* internal_default_instance() {
    return reinterpret_cast<const offline_node_req*>(
               &_offline_node_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(offline_node_req* other);
  friend void swap(offline_node_req& a, offline_node_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_node_req* New() const final {
    return CreateMaybeMessage<offline_node_req>(NULL);
  }

  offline_node_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_node_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_node_req& from);
  void MergeFrom(const offline_node_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_node_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inner_ip = 1;
  void clear_inner_ip();
  static const int kInnerIpFieldNumber = 1;
  const ::std::string& inner_ip() const;
  void set_inner_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_inner_ip(::std::string&& value);
  #endif
  void set_inner_ip(const char* value);
  void set_inner_ip(const char* value, size_t size);
  ::std::string* mutable_inner_ip();
  ::std::string* release_inner_ip();
  void set_allocated_inner_ip(::std::string* inner_ip);

  // uint32 inner_port = 2;
  void clear_inner_port();
  static const int kInnerPortFieldNumber = 2;
  ::google::protobuf::uint32 inner_port() const;
  void set_inner_port(::google::protobuf::uint32 value);

  // uint32 offline = 3;
  void clear_offline();
  static const int kOfflineFieldNumber = 3;
  ::google::protobuf::uint32 offline() const;
  void set_offline(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.offline_node_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inner_ip_;
  ::google::protobuf::uint32 inner_port_;
  ::google::protobuf::uint32 offline_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_node_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.offline_node_ack) */ {
 public:
  offline_node_ack();
  virtual ~offline_node_ack();

  offline_node_ack(const offline_node_ack& from);

  inline offline_node_ack& operator=(const offline_node_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_node_ack(offline_node_ack&& from) noexcept
    : offline_node_ack() {
    *this = ::std::move(from);
  }

  inline offline_node_ack& operator=(offline_node_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_node_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_node_ack* internal_default_instance() {
    return reinterpret_cast<const offline_node_ack*>(
               &_offline_node_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(offline_node_ack* other);
  friend void swap(offline_node_ack& a, offline_node_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_node_ack* New() const final {
    return CreateMaybeMessage<offline_node_ack>(NULL);
  }

  offline_node_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_node_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_node_ack& from);
  void MergeFrom(const offline_node_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_node_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inner_ip = 2;
  void clear_inner_ip();
  static const int kInnerIpFieldNumber = 2;
  const ::std::string& inner_ip() const;
  void set_inner_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_inner_ip(::std::string&& value);
  #endif
  void set_inner_ip(const char* value);
  void set_inner_ip(const char* value, size_t size);
  ::std::string* mutable_inner_ip();
  ::std::string* release_inner_ip();
  void set_allocated_inner_ip(::std::string* inner_ip);

  // .server.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::server::errorinfo& _internal_error() const;
  public:
  const ::server::errorinfo& error() const;
  ::server::errorinfo* release_error();
  ::server::errorinfo* mutable_error();
  void set_allocated_error(::server::errorinfo* error);

  // uint32 inner_port = 3;
  void clear_inner_port();
  static const int kInnerPortFieldNumber = 3;
  ::google::protobuf::uint32 inner_port() const;
  void set_inner_port(::google::protobuf::uint32 value);

  // uint32 offline = 4;
  void clear_offline();
  static const int kOfflineFieldNumber = 4;
  ::google::protobuf::uint32 offline() const;
  void set_offline(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.offline_node_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inner_ip_;
  ::server::errorinfo* error_;
  ::google::protobuf::uint32 inner_port_;
  ::google::protobuf::uint32 offline_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class online_node_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.online_node_req) */ {
 public:
  online_node_req();
  virtual ~online_node_req();

  online_node_req(const online_node_req& from);

  inline online_node_req& operator=(const online_node_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  online_node_req(online_node_req&& from) noexcept
    : online_node_req() {
    *this = ::std::move(from);
  }

  inline online_node_req& operator=(online_node_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const online_node_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const online_node_req* internal_default_instance() {
    return reinterpret_cast<const online_node_req*>(
               &_online_node_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(online_node_req* other);
  friend void swap(online_node_req& a, online_node_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline online_node_req* New() const final {
    return CreateMaybeMessage<online_node_req>(NULL);
  }

  online_node_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<online_node_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const online_node_req& from);
  void MergeFrom(const online_node_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(online_node_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inner_ip = 1;
  void clear_inner_ip();
  static const int kInnerIpFieldNumber = 1;
  const ::std::string& inner_ip() const;
  void set_inner_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_inner_ip(::std::string&& value);
  #endif
  void set_inner_ip(const char* value);
  void set_inner_ip(const char* value, size_t size);
  ::std::string* mutable_inner_ip();
  ::std::string* release_inner_ip();
  void set_allocated_inner_ip(::std::string* inner_ip);

  // uint32 inner_port = 2;
  void clear_inner_port();
  static const int kInnerPortFieldNumber = 2;
  ::google::protobuf::uint32 inner_port() const;
  void set_inner_port(::google::protobuf::uint32 value);

  // uint32 online = 3;
  void clear_online();
  static const int kOnlineFieldNumber = 3;
  ::google::protobuf::uint32 online() const;
  void set_online(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.online_node_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inner_ip_;
  ::google::protobuf::uint32 inner_port_;
  ::google::protobuf::uint32 online_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class online_node_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.online_node_ack) */ {
 public:
  online_node_ack();
  virtual ~online_node_ack();

  online_node_ack(const online_node_ack& from);

  inline online_node_ack& operator=(const online_node_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  online_node_ack(online_node_ack&& from) noexcept
    : online_node_ack() {
    *this = ::std::move(from);
  }

  inline online_node_ack& operator=(online_node_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const online_node_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const online_node_ack* internal_default_instance() {
    return reinterpret_cast<const online_node_ack*>(
               &_online_node_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(online_node_ack* other);
  friend void swap(online_node_ack& a, online_node_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline online_node_ack* New() const final {
    return CreateMaybeMessage<online_node_ack>(NULL);
  }

  online_node_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<online_node_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const online_node_ack& from);
  void MergeFrom(const online_node_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(online_node_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inner_ip = 2;
  void clear_inner_ip();
  static const int kInnerIpFieldNumber = 2;
  const ::std::string& inner_ip() const;
  void set_inner_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_inner_ip(::std::string&& value);
  #endif
  void set_inner_ip(const char* value);
  void set_inner_ip(const char* value, size_t size);
  ::std::string* mutable_inner_ip();
  ::std::string* release_inner_ip();
  void set_allocated_inner_ip(::std::string* inner_ip);

  // .server.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::server::errorinfo& _internal_error() const;
  public:
  const ::server::errorinfo& error() const;
  ::server::errorinfo* release_error();
  ::server::errorinfo* mutable_error();
  void set_allocated_error(::server::errorinfo* error);

  // uint32 inner_port = 3;
  void clear_inner_port();
  static const int kInnerPortFieldNumber = 3;
  ::google::protobuf::uint32 inner_port() const;
  void set_inner_port(::google::protobuf::uint32 value);

  // uint32 online = 4;
  void clear_online();
  static const int kOnlineFieldNumber = 4;
  ::google::protobuf::uint32 online() const;
  void set_online(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.online_node_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inner_ip_;
  ::server::errorinfo* error_;
  ::google::protobuf::uint32 inner_port_;
  ::google::protobuf::uint32 online_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class check_server_load_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.check_server_load_req) */ {
 public:
  check_server_load_req();
  virtual ~check_server_load_req();

  check_server_load_req(const check_server_load_req& from);

  inline check_server_load_req& operator=(const check_server_load_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  check_server_load_req(check_server_load_req&& from) noexcept
    : check_server_load_req() {
    *this = ::std::move(from);
  }

  inline check_server_load_req& operator=(check_server_load_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const check_server_load_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const check_server_load_req* internal_default_instance() {
    return reinterpret_cast<const check_server_load_req*>(
               &_check_server_load_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(check_server_load_req* other);
  friend void swap(check_server_load_req& a, check_server_load_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline check_server_load_req* New() const final {
    return CreateMaybeMessage<check_server_load_req>(NULL);
  }

  check_server_load_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<check_server_load_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const check_server_load_req& from);
  void MergeFrom(const check_server_load_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(check_server_load_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inner_ip = 1;
  void clear_inner_ip();
  static const int kInnerIpFieldNumber = 1;
  const ::std::string& inner_ip() const;
  void set_inner_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_inner_ip(::std::string&& value);
  #endif
  void set_inner_ip(const char* value);
  void set_inner_ip(const char* value, size_t size);
  ::std::string* mutable_inner_ip();
  ::std::string* release_inner_ip();
  void set_allocated_inner_ip(::std::string* inner_ip);

  // uint32 inner_port = 2;
  void clear_inner_port();
  static const int kInnerPortFieldNumber = 2;
  ::google::protobuf::uint32 inner_port() const;
  void set_inner_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.check_server_load_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inner_ip_;
  ::google::protobuf::uint32 inner_port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class check_server_load_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server.check_server_load_ack) */ {
 public:
  check_server_load_ack();
  virtual ~check_server_load_ack();

  check_server_load_ack(const check_server_load_ack& from);

  inline check_server_load_ack& operator=(const check_server_load_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  check_server_load_ack(check_server_load_ack&& from) noexcept
    : check_server_load_ack() {
    *this = ::std::move(from);
  }

  inline check_server_load_ack& operator=(check_server_load_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const check_server_load_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const check_server_load_ack* internal_default_instance() {
    return reinterpret_cast<const check_server_load_ack*>(
               &_check_server_load_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(check_server_load_ack* other);
  friend void swap(check_server_load_ack& a, check_server_load_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline check_server_load_ack* New() const final {
    return CreateMaybeMessage<check_server_load_ack>(NULL);
  }

  check_server_load_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<check_server_load_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const check_server_load_ack& from);
  void MergeFrom(const check_server_load_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(check_server_load_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string inner_ip = 2;
  void clear_inner_ip();
  static const int kInnerIpFieldNumber = 2;
  const ::std::string& inner_ip() const;
  void set_inner_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_inner_ip(::std::string&& value);
  #endif
  void set_inner_ip(const char* value);
  void set_inner_ip(const char* value, size_t size);
  ::std::string* mutable_inner_ip();
  ::std::string* release_inner_ip();
  void set_allocated_inner_ip(::std::string* inner_ip);

  // .server.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::server::errorinfo& _internal_error() const;
  public:
  const ::server::errorinfo& error() const;
  ::server::errorinfo* release_error();
  ::server::errorinfo* mutable_error();
  void set_allocated_error(::server::errorinfo* error);

  // uint32 inner_port = 3;
  void clear_inner_port();
  static const int kInnerPortFieldNumber = 3;
  ::google::protobuf::uint32 inner_port() const;
  void set_inner_port(::google::protobuf::uint32 value);

  // uint32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint32 add_up_recv_num = 5;
  void clear_add_up_recv_num();
  static const int kAddUpRecvNumFieldNumber = 5;
  ::google::protobuf::uint32 add_up_recv_num() const;
  void set_add_up_recv_num(::google::protobuf::uint32 value);

  // uint32 add_up_send_num = 6;
  void clear_add_up_send_num();
  static const int kAddUpSendNumFieldNumber = 6;
  ::google::protobuf::uint32 add_up_send_num() const;
  void set_add_up_send_num(::google::protobuf::uint32 value);

  // uint32 add_up_recv_byte = 7;
  void clear_add_up_recv_byte();
  static const int kAddUpRecvByteFieldNumber = 7;
  ::google::protobuf::uint32 add_up_recv_byte() const;
  void set_add_up_recv_byte(::google::protobuf::uint32 value);

  // uint32 add_up_send_byte = 8;
  void clear_add_up_send_byte();
  static const int kAddUpSendByteFieldNumber = 8;
  ::google::protobuf::uint32 add_up_send_byte() const;
  void set_add_up_send_byte(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:server.check_server_load_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inner_ip_;
  ::server::errorinfo* error_;
  ::google::protobuf::uint32 inner_port_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 add_up_recv_num_;
  ::google::protobuf::uint32 add_up_send_num_;
  ::google::protobuf::uint32 add_up_recv_byte_;
  ::google::protobuf::uint32 add_up_send_byte_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// errorinfo

// int32 error_code = 1;
inline void errorinfo::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 errorinfo::error_code() const {
  // @@protoc_insertion_point(field_get:server.errorinfo.error_code)
  return error_code_;
}
inline void errorinfo::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:server.errorinfo.error_code)
}

// bytes error_info = 2;
inline void errorinfo::clear_error_info() {
  error_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& errorinfo::error_info() const {
  // @@protoc_insertion_point(field_get:server.errorinfo.error_info)
  return error_info_.GetNoArena();
}
inline void errorinfo::set_error_info(const ::std::string& value) {
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.errorinfo.error_info)
}
#if LANG_CXX11
inline void errorinfo::set_error_info(::std::string&& value) {
  
  error_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.errorinfo.error_info)
}
#endif
inline void errorinfo::set_error_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.errorinfo.error_info)
}
inline void errorinfo::set_error_info(const void* value, size_t size) {
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.errorinfo.error_info)
}
inline ::std::string* errorinfo::mutable_error_info() {
  
  // @@protoc_insertion_point(field_mutable:server.errorinfo.error_info)
  return error_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* errorinfo::release_error_info() {
  // @@protoc_insertion_point(field_release:server.errorinfo.error_info)
  
  return error_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void errorinfo::set_allocated_error_info(::std::string* error_info) {
  if (error_info != NULL) {
    
  } else {
    
  }
  error_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_info);
  // @@protoc_insertion_point(field_set_allocated:server.errorinfo.error_info)
}

// bytes error_client_show = 3;
inline void errorinfo::clear_error_client_show() {
  error_client_show_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& errorinfo::error_client_show() const {
  // @@protoc_insertion_point(field_get:server.errorinfo.error_client_show)
  return error_client_show_.GetNoArena();
}
inline void errorinfo::set_error_client_show(const ::std::string& value) {
  
  error_client_show_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.errorinfo.error_client_show)
}
#if LANG_CXX11
inline void errorinfo::set_error_client_show(::std::string&& value) {
  
  error_client_show_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.errorinfo.error_client_show)
}
#endif
inline void errorinfo::set_error_client_show(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_client_show_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.errorinfo.error_client_show)
}
inline void errorinfo::set_error_client_show(const void* value, size_t size) {
  
  error_client_show_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.errorinfo.error_client_show)
}
inline ::std::string* errorinfo::mutable_error_client_show() {
  
  // @@protoc_insertion_point(field_mutable:server.errorinfo.error_client_show)
  return error_client_show_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* errorinfo::release_error_client_show() {
  // @@protoc_insertion_point(field_release:server.errorinfo.error_client_show)
  
  return error_client_show_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void errorinfo::set_allocated_error_client_show(::std::string* error_client_show) {
  if (error_client_show != NULL) {
    
  } else {
    
  }
  error_client_show_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_client_show);
  // @@protoc_insertion_point(field_set_allocated:server.errorinfo.error_client_show)
}

// -------------------------------------------------------------------

// node_config

// string node_type = 1;
inline void node_config::clear_node_type() {
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node_config::node_type() const {
  // @@protoc_insertion_point(field_get:server.node_config.node_type)
  return node_type_.GetNoArena();
}
inline void node_config::set_node_type(const ::std::string& value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.node_config.node_type)
}
#if LANG_CXX11
inline void node_config::set_node_type(::std::string&& value) {
  
  node_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.node_config.node_type)
}
#endif
inline void node_config::set_node_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.node_config.node_type)
}
inline void node_config::set_node_type(const char* value, size_t size) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.node_config.node_type)
}
inline ::std::string* node_config::mutable_node_type() {
  
  // @@protoc_insertion_point(field_mutable:server.node_config.node_type)
  return node_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node_config::release_node_type() {
  // @@protoc_insertion_point(field_release:server.node_config.node_type)
  
  return node_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_config::set_allocated_node_type(::std::string* node_type) {
  if (node_type != NULL) {
    
  } else {
    
  }
  node_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_type);
  // @@protoc_insertion_point(field_set_allocated:server.node_config.node_type)
}

// uint32 config_type = 2;
inline void node_config::clear_config_type() {
  config_type_ = 0u;
}
inline ::google::protobuf::uint32 node_config::config_type() const {
  // @@protoc_insertion_point(field_get:server.node_config.config_type)
  return config_type_;
}
inline void node_config::set_config_type(::google::protobuf::uint32 value) {
  
  config_type_ = value;
  // @@protoc_insertion_point(field_set:server.node_config.config_type)
}

// string config_content = 3;
inline void node_config::clear_config_content() {
  config_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node_config::config_content() const {
  // @@protoc_insertion_point(field_get:server.node_config.config_content)
  return config_content_.GetNoArena();
}
inline void node_config::set_config_content(const ::std::string& value) {
  
  config_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.node_config.config_content)
}
#if LANG_CXX11
inline void node_config::set_config_content(::std::string&& value) {
  
  config_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.node_config.config_content)
}
#endif
inline void node_config::set_config_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.node_config.config_content)
}
inline void node_config::set_config_content(const char* value, size_t size) {
  
  config_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.node_config.config_content)
}
inline ::std::string* node_config::mutable_config_content() {
  
  // @@protoc_insertion_point(field_mutable:server.node_config.config_content)
  return config_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node_config::release_config_content() {
  // @@protoc_insertion_point(field_release:server.node_config.config_content)
  
  return config_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_config::set_allocated_config_content(::std::string* config_content) {
  if (config_content != NULL) {
    
  } else {
    
  }
  config_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_content);
  // @@protoc_insertion_point(field_set_allocated:server.node_config.config_content)
}

// uint32 auto_send = 4;
inline void node_config::clear_auto_send() {
  auto_send_ = 0u;
}
inline ::google::protobuf::uint32 node_config::auto_send() const {
  // @@protoc_insertion_point(field_get:server.node_config.auto_send)
  return auto_send_;
}
inline void node_config::set_auto_send(::google::protobuf::uint32 value) {
  
  auto_send_ = value;
  // @@protoc_insertion_point(field_set:server.node_config.auto_send)
}

// uint32 reload_config = 5;
inline void node_config::clear_reload_config() {
  reload_config_ = 0u;
}
inline ::google::protobuf::uint32 node_config::reload_config() const {
  // @@protoc_insertion_point(field_get:server.node_config.reload_config)
  return reload_config_;
}
inline void node_config::set_reload_config(::google::protobuf::uint32 value) {
  
  reload_config_ = value;
  // @@protoc_insertion_point(field_set:server.node_config.reload_config)
}

// string config_file = 6;
inline void node_config::clear_config_file() {
  config_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node_config::config_file() const {
  // @@protoc_insertion_point(field_get:server.node_config.config_file)
  return config_file_.GetNoArena();
}
inline void node_config::set_config_file(const ::std::string& value) {
  
  config_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.node_config.config_file)
}
#if LANG_CXX11
inline void node_config::set_config_file(::std::string&& value) {
  
  config_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.node_config.config_file)
}
#endif
inline void node_config::set_config_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.node_config.config_file)
}
inline void node_config::set_config_file(const char* value, size_t size) {
  
  config_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.node_config.config_file)
}
inline ::std::string* node_config::mutable_config_file() {
  
  // @@protoc_insertion_point(field_mutable:server.node_config.config_file)
  return config_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node_config::release_config_file() {
  // @@protoc_insertion_point(field_release:server.node_config.config_file)
  
  return config_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node_config::set_allocated_config_file(::std::string* config_file) {
  if (config_file != NULL) {
    
  } else {
    
  }
  config_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_file);
  // @@protoc_insertion_point(field_set_allocated:server.node_config.config_file)
}

// uint32 update_time = 7;
inline void node_config::clear_update_time() {
  update_time_ = 0u;
}
inline ::google::protobuf::uint32 node_config::update_time() const {
  // @@protoc_insertion_point(field_get:server.node_config.update_time)
  return update_time_;
}
inline void node_config::set_update_time(::google::protobuf::uint32 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:server.node_config.update_time)
}

// -------------------------------------------------------------------

// inquery_server_config_req

// string node_type = 1;
inline void inquery_server_config_req::clear_node_type() {
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& inquery_server_config_req::node_type() const {
  // @@protoc_insertion_point(field_get:server.inquery_server_config_req.node_type)
  return node_type_.GetNoArena();
}
inline void inquery_server_config_req::set_node_type(const ::std::string& value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.inquery_server_config_req.node_type)
}
#if LANG_CXX11
inline void inquery_server_config_req::set_node_type(::std::string&& value) {
  
  node_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.inquery_server_config_req.node_type)
}
#endif
inline void inquery_server_config_req::set_node_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.inquery_server_config_req.node_type)
}
inline void inquery_server_config_req::set_node_type(const char* value, size_t size) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.inquery_server_config_req.node_type)
}
inline ::std::string* inquery_server_config_req::mutable_node_type() {
  
  // @@protoc_insertion_point(field_mutable:server.inquery_server_config_req.node_type)
  return node_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* inquery_server_config_req::release_node_type() {
  // @@protoc_insertion_point(field_release:server.inquery_server_config_req.node_type)
  
  return node_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void inquery_server_config_req::set_allocated_node_type(::std::string* node_type) {
  if (node_type != NULL) {
    
  } else {
    
  }
  node_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_type);
  // @@protoc_insertion_point(field_set_allocated:server.inquery_server_config_req.node_type)
}

// uint32 config_type = 2;
inline void inquery_server_config_req::clear_config_type() {
  config_type_ = 0u;
}
inline ::google::protobuf::uint32 inquery_server_config_req::config_type() const {
  // @@protoc_insertion_point(field_get:server.inquery_server_config_req.config_type)
  return config_type_;
}
inline void inquery_server_config_req::set_config_type(::google::protobuf::uint32 value) {
  
  config_type_ = value;
  // @@protoc_insertion_point(field_set:server.inquery_server_config_req.config_type)
}

// -------------------------------------------------------------------

// inquery_server_config_ack

// .server.errorinfo error = 1;
inline bool inquery_server_config_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void inquery_server_config_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::server::errorinfo& inquery_server_config_ack::_internal_error() const {
  return *error_;
}
inline const ::server::errorinfo& inquery_server_config_ack::error() const {
  const ::server::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:server.inquery_server_config_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::server::errorinfo*>(
      &::server::_errorinfo_default_instance_);
}
inline ::server::errorinfo* inquery_server_config_ack::release_error() {
  // @@protoc_insertion_point(field_release:server.inquery_server_config_ack.error)
  
  ::server::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::server::errorinfo* inquery_server_config_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::server::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:server.inquery_server_config_ack.error)
  return error_;
}
inline void inquery_server_config_ack::set_allocated_error(::server::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:server.inquery_server_config_ack.error)
}

// .server.node_config config = 2;
inline bool inquery_server_config_ack::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void inquery_server_config_ack::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::server::node_config& inquery_server_config_ack::_internal_config() const {
  return *config_;
}
inline const ::server::node_config& inquery_server_config_ack::config() const {
  const ::server::node_config* p = config_;
  // @@protoc_insertion_point(field_get:server.inquery_server_config_ack.config)
  return p != NULL ? *p : *reinterpret_cast<const ::server::node_config*>(
      &::server::_node_config_default_instance_);
}
inline ::server::node_config* inquery_server_config_ack::release_config() {
  // @@protoc_insertion_point(field_release:server.inquery_server_config_ack.config)
  
  ::server::node_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::server::node_config* inquery_server_config_ack::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::server::node_config>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:server.inquery_server_config_ack.config)
  return config_;
}
inline void inquery_server_config_ack::set_allocated_config(::server::node_config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:server.inquery_server_config_ack.config)
}

// -------------------------------------------------------------------

// update_server_config_req

// .server.node_config config = 1;
inline bool update_server_config_req::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void update_server_config_req::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::server::node_config& update_server_config_req::_internal_config() const {
  return *config_;
}
inline const ::server::node_config& update_server_config_req::config() const {
  const ::server::node_config* p = config_;
  // @@protoc_insertion_point(field_get:server.update_server_config_req.config)
  return p != NULL ? *p : *reinterpret_cast<const ::server::node_config*>(
      &::server::_node_config_default_instance_);
}
inline ::server::node_config* update_server_config_req::release_config() {
  // @@protoc_insertion_point(field_release:server.update_server_config_req.config)
  
  ::server::node_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::server::node_config* update_server_config_req::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::server::node_config>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:server.update_server_config_req.config)
  return config_;
}
inline void update_server_config_req::set_allocated_config(::server::node_config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:server.update_server_config_req.config)
}

// string inner_ip = 2;
inline void update_server_config_req::clear_inner_ip() {
  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& update_server_config_req::inner_ip() const {
  // @@protoc_insertion_point(field_get:server.update_server_config_req.inner_ip)
  return inner_ip_.GetNoArena();
}
inline void update_server_config_req::set_inner_ip(const ::std::string& value) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.update_server_config_req.inner_ip)
}
#if LANG_CXX11
inline void update_server_config_req::set_inner_ip(::std::string&& value) {
  
  inner_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.update_server_config_req.inner_ip)
}
#endif
inline void update_server_config_req::set_inner_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.update_server_config_req.inner_ip)
}
inline void update_server_config_req::set_inner_ip(const char* value, size_t size) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.update_server_config_req.inner_ip)
}
inline ::std::string* update_server_config_req::mutable_inner_ip() {
  
  // @@protoc_insertion_point(field_mutable:server.update_server_config_req.inner_ip)
  return inner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* update_server_config_req::release_inner_ip() {
  // @@protoc_insertion_point(field_release:server.update_server_config_req.inner_ip)
  
  return inner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void update_server_config_req::set_allocated_inner_ip(::std::string* inner_ip) {
  if (inner_ip != NULL) {
    
  } else {
    
  }
  inner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_ip);
  // @@protoc_insertion_point(field_set_allocated:server.update_server_config_req.inner_ip)
}

// uint32 inner_port = 3;
inline void update_server_config_req::clear_inner_port() {
  inner_port_ = 0u;
}
inline ::google::protobuf::uint32 update_server_config_req::inner_port() const {
  // @@protoc_insertion_point(field_get:server.update_server_config_req.inner_port)
  return inner_port_;
}
inline void update_server_config_req::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:server.update_server_config_req.inner_port)
}

// -------------------------------------------------------------------

// update_server_config_ack

// .server.errorinfo error = 1;
inline bool update_server_config_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void update_server_config_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::server::errorinfo& update_server_config_ack::_internal_error() const {
  return *error_;
}
inline const ::server::errorinfo& update_server_config_ack::error() const {
  const ::server::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:server.update_server_config_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::server::errorinfo*>(
      &::server::_errorinfo_default_instance_);
}
inline ::server::errorinfo* update_server_config_ack::release_error() {
  // @@protoc_insertion_point(field_release:server.update_server_config_ack.error)
  
  ::server::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::server::errorinfo* update_server_config_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::server::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:server.update_server_config_ack.error)
  return error_;
}
inline void update_server_config_ack::set_allocated_error(::server::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:server.update_server_config_ack.error)
}

// .server.node_config config = 2;
inline bool update_server_config_ack::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void update_server_config_ack::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::server::node_config& update_server_config_ack::_internal_config() const {
  return *config_;
}
inline const ::server::node_config& update_server_config_ack::config() const {
  const ::server::node_config* p = config_;
  // @@protoc_insertion_point(field_get:server.update_server_config_ack.config)
  return p != NULL ? *p : *reinterpret_cast<const ::server::node_config*>(
      &::server::_node_config_default_instance_);
}
inline ::server::node_config* update_server_config_ack::release_config() {
  // @@protoc_insertion_point(field_release:server.update_server_config_ack.config)
  
  ::server::node_config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::server::node_config* update_server_config_ack::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::server::node_config>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:server.update_server_config_ack.config)
  return config_;
}
inline void update_server_config_ack::set_allocated_config(::server::node_config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:server.update_server_config_ack.config)
}

// string inner_ip = 3;
inline void update_server_config_ack::clear_inner_ip() {
  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& update_server_config_ack::inner_ip() const {
  // @@protoc_insertion_point(field_get:server.update_server_config_ack.inner_ip)
  return inner_ip_.GetNoArena();
}
inline void update_server_config_ack::set_inner_ip(const ::std::string& value) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.update_server_config_ack.inner_ip)
}
#if LANG_CXX11
inline void update_server_config_ack::set_inner_ip(::std::string&& value) {
  
  inner_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.update_server_config_ack.inner_ip)
}
#endif
inline void update_server_config_ack::set_inner_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.update_server_config_ack.inner_ip)
}
inline void update_server_config_ack::set_inner_ip(const char* value, size_t size) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.update_server_config_ack.inner_ip)
}
inline ::std::string* update_server_config_ack::mutable_inner_ip() {
  
  // @@protoc_insertion_point(field_mutable:server.update_server_config_ack.inner_ip)
  return inner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* update_server_config_ack::release_inner_ip() {
  // @@protoc_insertion_point(field_release:server.update_server_config_ack.inner_ip)
  
  return inner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void update_server_config_ack::set_allocated_inner_ip(::std::string* inner_ip) {
  if (inner_ip != NULL) {
    
  } else {
    
  }
  inner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_ip);
  // @@protoc_insertion_point(field_set_allocated:server.update_server_config_ack.inner_ip)
}

// uint32 inner_port = 4;
inline void update_server_config_ack::clear_inner_port() {
  inner_port_ = 0u;
}
inline ::google::protobuf::uint32 update_server_config_ack::inner_port() const {
  // @@protoc_insertion_point(field_get:server.update_server_config_ack.inner_port)
  return inner_port_;
}
inline void update_server_config_ack::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:server.update_server_config_ack.inner_port)
}

// -------------------------------------------------------------------

// offline_node_req

// string inner_ip = 1;
inline void offline_node_req::clear_inner_ip() {
  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& offline_node_req::inner_ip() const {
  // @@protoc_insertion_point(field_get:server.offline_node_req.inner_ip)
  return inner_ip_.GetNoArena();
}
inline void offline_node_req::set_inner_ip(const ::std::string& value) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.offline_node_req.inner_ip)
}
#if LANG_CXX11
inline void offline_node_req::set_inner_ip(::std::string&& value) {
  
  inner_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.offline_node_req.inner_ip)
}
#endif
inline void offline_node_req::set_inner_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.offline_node_req.inner_ip)
}
inline void offline_node_req::set_inner_ip(const char* value, size_t size) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.offline_node_req.inner_ip)
}
inline ::std::string* offline_node_req::mutable_inner_ip() {
  
  // @@protoc_insertion_point(field_mutable:server.offline_node_req.inner_ip)
  return inner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* offline_node_req::release_inner_ip() {
  // @@protoc_insertion_point(field_release:server.offline_node_req.inner_ip)
  
  return inner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void offline_node_req::set_allocated_inner_ip(::std::string* inner_ip) {
  if (inner_ip != NULL) {
    
  } else {
    
  }
  inner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_ip);
  // @@protoc_insertion_point(field_set_allocated:server.offline_node_req.inner_ip)
}

// uint32 inner_port = 2;
inline void offline_node_req::clear_inner_port() {
  inner_port_ = 0u;
}
inline ::google::protobuf::uint32 offline_node_req::inner_port() const {
  // @@protoc_insertion_point(field_get:server.offline_node_req.inner_port)
  return inner_port_;
}
inline void offline_node_req::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:server.offline_node_req.inner_port)
}

// uint32 offline = 3;
inline void offline_node_req::clear_offline() {
  offline_ = 0u;
}
inline ::google::protobuf::uint32 offline_node_req::offline() const {
  // @@protoc_insertion_point(field_get:server.offline_node_req.offline)
  return offline_;
}
inline void offline_node_req::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:server.offline_node_req.offline)
}

// -------------------------------------------------------------------

// offline_node_ack

// .server.errorinfo error = 1;
inline bool offline_node_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void offline_node_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::server::errorinfo& offline_node_ack::_internal_error() const {
  return *error_;
}
inline const ::server::errorinfo& offline_node_ack::error() const {
  const ::server::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:server.offline_node_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::server::errorinfo*>(
      &::server::_errorinfo_default_instance_);
}
inline ::server::errorinfo* offline_node_ack::release_error() {
  // @@protoc_insertion_point(field_release:server.offline_node_ack.error)
  
  ::server::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::server::errorinfo* offline_node_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::server::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:server.offline_node_ack.error)
  return error_;
}
inline void offline_node_ack::set_allocated_error(::server::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:server.offline_node_ack.error)
}

// string inner_ip = 2;
inline void offline_node_ack::clear_inner_ip() {
  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& offline_node_ack::inner_ip() const {
  // @@protoc_insertion_point(field_get:server.offline_node_ack.inner_ip)
  return inner_ip_.GetNoArena();
}
inline void offline_node_ack::set_inner_ip(const ::std::string& value) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.offline_node_ack.inner_ip)
}
#if LANG_CXX11
inline void offline_node_ack::set_inner_ip(::std::string&& value) {
  
  inner_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.offline_node_ack.inner_ip)
}
#endif
inline void offline_node_ack::set_inner_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.offline_node_ack.inner_ip)
}
inline void offline_node_ack::set_inner_ip(const char* value, size_t size) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.offline_node_ack.inner_ip)
}
inline ::std::string* offline_node_ack::mutable_inner_ip() {
  
  // @@protoc_insertion_point(field_mutable:server.offline_node_ack.inner_ip)
  return inner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* offline_node_ack::release_inner_ip() {
  // @@protoc_insertion_point(field_release:server.offline_node_ack.inner_ip)
  
  return inner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void offline_node_ack::set_allocated_inner_ip(::std::string* inner_ip) {
  if (inner_ip != NULL) {
    
  } else {
    
  }
  inner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_ip);
  // @@protoc_insertion_point(field_set_allocated:server.offline_node_ack.inner_ip)
}

// uint32 inner_port = 3;
inline void offline_node_ack::clear_inner_port() {
  inner_port_ = 0u;
}
inline ::google::protobuf::uint32 offline_node_ack::inner_port() const {
  // @@protoc_insertion_point(field_get:server.offline_node_ack.inner_port)
  return inner_port_;
}
inline void offline_node_ack::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:server.offline_node_ack.inner_port)
}

// uint32 offline = 4;
inline void offline_node_ack::clear_offline() {
  offline_ = 0u;
}
inline ::google::protobuf::uint32 offline_node_ack::offline() const {
  // @@protoc_insertion_point(field_get:server.offline_node_ack.offline)
  return offline_;
}
inline void offline_node_ack::set_offline(::google::protobuf::uint32 value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:server.offline_node_ack.offline)
}

// -------------------------------------------------------------------

// online_node_req

// string inner_ip = 1;
inline void online_node_req::clear_inner_ip() {
  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& online_node_req::inner_ip() const {
  // @@protoc_insertion_point(field_get:server.online_node_req.inner_ip)
  return inner_ip_.GetNoArena();
}
inline void online_node_req::set_inner_ip(const ::std::string& value) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.online_node_req.inner_ip)
}
#if LANG_CXX11
inline void online_node_req::set_inner_ip(::std::string&& value) {
  
  inner_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.online_node_req.inner_ip)
}
#endif
inline void online_node_req::set_inner_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.online_node_req.inner_ip)
}
inline void online_node_req::set_inner_ip(const char* value, size_t size) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.online_node_req.inner_ip)
}
inline ::std::string* online_node_req::mutable_inner_ip() {
  
  // @@protoc_insertion_point(field_mutable:server.online_node_req.inner_ip)
  return inner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* online_node_req::release_inner_ip() {
  // @@protoc_insertion_point(field_release:server.online_node_req.inner_ip)
  
  return inner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void online_node_req::set_allocated_inner_ip(::std::string* inner_ip) {
  if (inner_ip != NULL) {
    
  } else {
    
  }
  inner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_ip);
  // @@protoc_insertion_point(field_set_allocated:server.online_node_req.inner_ip)
}

// uint32 inner_port = 2;
inline void online_node_req::clear_inner_port() {
  inner_port_ = 0u;
}
inline ::google::protobuf::uint32 online_node_req::inner_port() const {
  // @@protoc_insertion_point(field_get:server.online_node_req.inner_port)
  return inner_port_;
}
inline void online_node_req::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:server.online_node_req.inner_port)
}

// uint32 online = 3;
inline void online_node_req::clear_online() {
  online_ = 0u;
}
inline ::google::protobuf::uint32 online_node_req::online() const {
  // @@protoc_insertion_point(field_get:server.online_node_req.online)
  return online_;
}
inline void online_node_req::set_online(::google::protobuf::uint32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:server.online_node_req.online)
}

// -------------------------------------------------------------------

// online_node_ack

// .server.errorinfo error = 1;
inline bool online_node_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void online_node_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::server::errorinfo& online_node_ack::_internal_error() const {
  return *error_;
}
inline const ::server::errorinfo& online_node_ack::error() const {
  const ::server::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:server.online_node_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::server::errorinfo*>(
      &::server::_errorinfo_default_instance_);
}
inline ::server::errorinfo* online_node_ack::release_error() {
  // @@protoc_insertion_point(field_release:server.online_node_ack.error)
  
  ::server::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::server::errorinfo* online_node_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::server::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:server.online_node_ack.error)
  return error_;
}
inline void online_node_ack::set_allocated_error(::server::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:server.online_node_ack.error)
}

// string inner_ip = 2;
inline void online_node_ack::clear_inner_ip() {
  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& online_node_ack::inner_ip() const {
  // @@protoc_insertion_point(field_get:server.online_node_ack.inner_ip)
  return inner_ip_.GetNoArena();
}
inline void online_node_ack::set_inner_ip(const ::std::string& value) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.online_node_ack.inner_ip)
}
#if LANG_CXX11
inline void online_node_ack::set_inner_ip(::std::string&& value) {
  
  inner_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.online_node_ack.inner_ip)
}
#endif
inline void online_node_ack::set_inner_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.online_node_ack.inner_ip)
}
inline void online_node_ack::set_inner_ip(const char* value, size_t size) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.online_node_ack.inner_ip)
}
inline ::std::string* online_node_ack::mutable_inner_ip() {
  
  // @@protoc_insertion_point(field_mutable:server.online_node_ack.inner_ip)
  return inner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* online_node_ack::release_inner_ip() {
  // @@protoc_insertion_point(field_release:server.online_node_ack.inner_ip)
  
  return inner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void online_node_ack::set_allocated_inner_ip(::std::string* inner_ip) {
  if (inner_ip != NULL) {
    
  } else {
    
  }
  inner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_ip);
  // @@protoc_insertion_point(field_set_allocated:server.online_node_ack.inner_ip)
}

// uint32 inner_port = 3;
inline void online_node_ack::clear_inner_port() {
  inner_port_ = 0u;
}
inline ::google::protobuf::uint32 online_node_ack::inner_port() const {
  // @@protoc_insertion_point(field_get:server.online_node_ack.inner_port)
  return inner_port_;
}
inline void online_node_ack::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:server.online_node_ack.inner_port)
}

// uint32 online = 4;
inline void online_node_ack::clear_online() {
  online_ = 0u;
}
inline ::google::protobuf::uint32 online_node_ack::online() const {
  // @@protoc_insertion_point(field_get:server.online_node_ack.online)
  return online_;
}
inline void online_node_ack::set_online(::google::protobuf::uint32 value) {
  
  online_ = value;
  // @@protoc_insertion_point(field_set:server.online_node_ack.online)
}

// -------------------------------------------------------------------

// check_server_load_req

// string inner_ip = 1;
inline void check_server_load_req::clear_inner_ip() {
  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& check_server_load_req::inner_ip() const {
  // @@protoc_insertion_point(field_get:server.check_server_load_req.inner_ip)
  return inner_ip_.GetNoArena();
}
inline void check_server_load_req::set_inner_ip(const ::std::string& value) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.check_server_load_req.inner_ip)
}
#if LANG_CXX11
inline void check_server_load_req::set_inner_ip(::std::string&& value) {
  
  inner_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.check_server_load_req.inner_ip)
}
#endif
inline void check_server_load_req::set_inner_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.check_server_load_req.inner_ip)
}
inline void check_server_load_req::set_inner_ip(const char* value, size_t size) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.check_server_load_req.inner_ip)
}
inline ::std::string* check_server_load_req::mutable_inner_ip() {
  
  // @@protoc_insertion_point(field_mutable:server.check_server_load_req.inner_ip)
  return inner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* check_server_load_req::release_inner_ip() {
  // @@protoc_insertion_point(field_release:server.check_server_load_req.inner_ip)
  
  return inner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void check_server_load_req::set_allocated_inner_ip(::std::string* inner_ip) {
  if (inner_ip != NULL) {
    
  } else {
    
  }
  inner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_ip);
  // @@protoc_insertion_point(field_set_allocated:server.check_server_load_req.inner_ip)
}

// uint32 inner_port = 2;
inline void check_server_load_req::clear_inner_port() {
  inner_port_ = 0u;
}
inline ::google::protobuf::uint32 check_server_load_req::inner_port() const {
  // @@protoc_insertion_point(field_get:server.check_server_load_req.inner_port)
  return inner_port_;
}
inline void check_server_load_req::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:server.check_server_load_req.inner_port)
}

// -------------------------------------------------------------------

// check_server_load_ack

// .server.errorinfo error = 1;
inline bool check_server_load_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void check_server_load_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::server::errorinfo& check_server_load_ack::_internal_error() const {
  return *error_;
}
inline const ::server::errorinfo& check_server_load_ack::error() const {
  const ::server::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:server.check_server_load_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::server::errorinfo*>(
      &::server::_errorinfo_default_instance_);
}
inline ::server::errorinfo* check_server_load_ack::release_error() {
  // @@protoc_insertion_point(field_release:server.check_server_load_ack.error)
  
  ::server::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::server::errorinfo* check_server_load_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::server::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:server.check_server_load_ack.error)
  return error_;
}
inline void check_server_load_ack::set_allocated_error(::server::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:server.check_server_load_ack.error)
}

// string inner_ip = 2;
inline void check_server_load_ack::clear_inner_ip() {
  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& check_server_load_ack::inner_ip() const {
  // @@protoc_insertion_point(field_get:server.check_server_load_ack.inner_ip)
  return inner_ip_.GetNoArena();
}
inline void check_server_load_ack::set_inner_ip(const ::std::string& value) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server.check_server_load_ack.inner_ip)
}
#if LANG_CXX11
inline void check_server_load_ack::set_inner_ip(::std::string&& value) {
  
  inner_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.check_server_load_ack.inner_ip)
}
#endif
inline void check_server_load_ack::set_inner_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.check_server_load_ack.inner_ip)
}
inline void check_server_load_ack::set_inner_ip(const char* value, size_t size) {
  
  inner_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.check_server_load_ack.inner_ip)
}
inline ::std::string* check_server_load_ack::mutable_inner_ip() {
  
  // @@protoc_insertion_point(field_mutable:server.check_server_load_ack.inner_ip)
  return inner_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* check_server_load_ack::release_inner_ip() {
  // @@protoc_insertion_point(field_release:server.check_server_load_ack.inner_ip)
  
  return inner_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void check_server_load_ack::set_allocated_inner_ip(::std::string* inner_ip) {
  if (inner_ip != NULL) {
    
  } else {
    
  }
  inner_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inner_ip);
  // @@protoc_insertion_point(field_set_allocated:server.check_server_load_ack.inner_ip)
}

// uint32 inner_port = 3;
inline void check_server_load_ack::clear_inner_port() {
  inner_port_ = 0u;
}
inline ::google::protobuf::uint32 check_server_load_ack::inner_port() const {
  // @@protoc_insertion_point(field_get:server.check_server_load_ack.inner_port)
  return inner_port_;
}
inline void check_server_load_ack::set_inner_port(::google::protobuf::uint32 value) {
  
  inner_port_ = value;
  // @@protoc_insertion_point(field_set:server.check_server_load_ack.inner_port)
}

// uint32 status = 4;
inline void check_server_load_ack::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 check_server_load_ack::status() const {
  // @@protoc_insertion_point(field_get:server.check_server_load_ack.status)
  return status_;
}
inline void check_server_load_ack::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:server.check_server_load_ack.status)
}

// uint32 add_up_recv_num = 5;
inline void check_server_load_ack::clear_add_up_recv_num() {
  add_up_recv_num_ = 0u;
}
inline ::google::protobuf::uint32 check_server_load_ack::add_up_recv_num() const {
  // @@protoc_insertion_point(field_get:server.check_server_load_ack.add_up_recv_num)
  return add_up_recv_num_;
}
inline void check_server_load_ack::set_add_up_recv_num(::google::protobuf::uint32 value) {
  
  add_up_recv_num_ = value;
  // @@protoc_insertion_point(field_set:server.check_server_load_ack.add_up_recv_num)
}

// uint32 add_up_send_num = 6;
inline void check_server_load_ack::clear_add_up_send_num() {
  add_up_send_num_ = 0u;
}
inline ::google::protobuf::uint32 check_server_load_ack::add_up_send_num() const {
  // @@protoc_insertion_point(field_get:server.check_server_load_ack.add_up_send_num)
  return add_up_send_num_;
}
inline void check_server_load_ack::set_add_up_send_num(::google::protobuf::uint32 value) {
  
  add_up_send_num_ = value;
  // @@protoc_insertion_point(field_set:server.check_server_load_ack.add_up_send_num)
}

// uint32 add_up_recv_byte = 7;
inline void check_server_load_ack::clear_add_up_recv_byte() {
  add_up_recv_byte_ = 0u;
}
inline ::google::protobuf::uint32 check_server_load_ack::add_up_recv_byte() const {
  // @@protoc_insertion_point(field_get:server.check_server_load_ack.add_up_recv_byte)
  return add_up_recv_byte_;
}
inline void check_server_load_ack::set_add_up_recv_byte(::google::protobuf::uint32 value) {
  
  add_up_recv_byte_ = value;
  // @@protoc_insertion_point(field_set:server.check_server_load_ack.add_up_recv_byte)
}

// uint32 add_up_send_byte = 8;
inline void check_server_load_ack::clear_add_up_send_byte() {
  add_up_send_byte_ = 0u;
}
inline ::google::protobuf::uint32 check_server_load_ack::add_up_send_byte() const {
  // @@protoc_insertion_point(field_get:server.check_server_load_ack.add_up_send_byte)
  return add_up_send_byte_;
}
inline void check_server_load_ack::set_add_up_send_byte(::google::protobuf::uint32 value) {
  
  add_up_send_byte_ = value;
  // @@protoc_insertion_point(field_set:server.check_server_load_ack.add_up_send_byte)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_server_2eproto
