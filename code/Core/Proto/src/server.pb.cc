// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_server_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_server_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_errorinfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_server_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_node_config;
}  // namespace protobuf_server_2eproto
namespace server {
class errorinfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<errorinfo>
      _instance;
} _errorinfo_default_instance_;
class node_configDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<node_config>
      _instance;
} _node_config_default_instance_;
class inquery_server_config_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<inquery_server_config_req>
      _instance;
} _inquery_server_config_req_default_instance_;
class inquery_server_config_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<inquery_server_config_ack>
      _instance;
} _inquery_server_config_ack_default_instance_;
class update_server_config_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<update_server_config_req>
      _instance;
} _update_server_config_req_default_instance_;
class update_server_config_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<update_server_config_ack>
      _instance;
} _update_server_config_ack_default_instance_;
class offline_node_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_node_req>
      _instance;
} _offline_node_req_default_instance_;
class offline_node_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_node_ack>
      _instance;
} _offline_node_ack_default_instance_;
class online_node_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<online_node_req>
      _instance;
} _online_node_req_default_instance_;
class online_node_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<online_node_ack>
      _instance;
} _online_node_ack_default_instance_;
class check_server_load_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<check_server_load_req>
      _instance;
} _check_server_load_req_default_instance_;
class check_server_load_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<check_server_load_ack>
      _instance;
} _check_server_load_ack_default_instance_;
}  // namespace server
namespace protobuf_server_2eproto {
static void InitDefaultserrorinfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_errorinfo_default_instance_;
    new (ptr) ::server::errorinfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::errorinfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_errorinfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultserrorinfo}, {}};

static void InitDefaultsnode_config() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_node_config_default_instance_;
    new (ptr) ::server::node_config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::node_config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_node_config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsnode_config}, {}};

static void InitDefaultsinquery_server_config_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_inquery_server_config_req_default_instance_;
    new (ptr) ::server::inquery_server_config_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::inquery_server_config_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_inquery_server_config_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsinquery_server_config_req}, {}};

static void InitDefaultsinquery_server_config_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_inquery_server_config_ack_default_instance_;
    new (ptr) ::server::inquery_server_config_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::inquery_server_config_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_inquery_server_config_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsinquery_server_config_ack}, {
      &protobuf_server_2eproto::scc_info_errorinfo.base,
      &protobuf_server_2eproto::scc_info_node_config.base,}};

static void InitDefaultsupdate_server_config_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_update_server_config_req_default_instance_;
    new (ptr) ::server::update_server_config_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::update_server_config_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_update_server_config_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsupdate_server_config_req}, {
      &protobuf_server_2eproto::scc_info_node_config.base,}};

static void InitDefaultsupdate_server_config_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_update_server_config_ack_default_instance_;
    new (ptr) ::server::update_server_config_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::update_server_config_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_update_server_config_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsupdate_server_config_ack}, {
      &protobuf_server_2eproto::scc_info_errorinfo.base,
      &protobuf_server_2eproto::scc_info_node_config.base,}};

static void InitDefaultsoffline_node_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_offline_node_req_default_instance_;
    new (ptr) ::server::offline_node_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::offline_node_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_offline_node_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsoffline_node_req}, {}};

static void InitDefaultsoffline_node_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_offline_node_ack_default_instance_;
    new (ptr) ::server::offline_node_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::offline_node_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_offline_node_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsoffline_node_ack}, {
      &protobuf_server_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultsonline_node_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_online_node_req_default_instance_;
    new (ptr) ::server::online_node_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::online_node_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_online_node_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsonline_node_req}, {}};

static void InitDefaultsonline_node_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_online_node_ack_default_instance_;
    new (ptr) ::server::online_node_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::online_node_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_online_node_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsonline_node_ack}, {
      &protobuf_server_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultscheck_server_load_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_check_server_load_req_default_instance_;
    new (ptr) ::server::check_server_load_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::check_server_load_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_check_server_load_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscheck_server_load_req}, {}};

static void InitDefaultscheck_server_load_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server::_check_server_load_ack_default_instance_;
    new (ptr) ::server::check_server_load_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server::check_server_load_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_check_server_load_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultscheck_server_load_ack}, {
      &protobuf_server_2eproto::scc_info_errorinfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_errorinfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_node_config.base);
  ::google::protobuf::internal::InitSCC(&scc_info_inquery_server_config_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_inquery_server_config_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_update_server_config_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_update_server_config_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_node_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_node_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_online_node_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_online_node_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_check_server_load_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_check_server_load_ack.base);
}

::google::protobuf::Metadata file_level_metadata[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::errorinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::errorinfo, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::errorinfo, error_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::errorinfo, error_client_show_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::node_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::node_config, node_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::node_config, config_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::node_config, config_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::node_config, auto_send_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::node_config, reload_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::node_config, config_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::node_config, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::inquery_server_config_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::inquery_server_config_req, node_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::inquery_server_config_req, config_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::inquery_server_config_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::inquery_server_config_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::inquery_server_config_ack, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::update_server_config_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::update_server_config_req, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::update_server_config_req, inner_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::update_server_config_req, inner_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::update_server_config_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::update_server_config_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::update_server_config_ack, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::update_server_config_ack, inner_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::update_server_config_ack, inner_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::offline_node_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::offline_node_req, inner_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::offline_node_req, inner_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::offline_node_req, offline_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::offline_node_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::offline_node_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::offline_node_ack, inner_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::offline_node_ack, inner_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::offline_node_ack, offline_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::online_node_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::online_node_req, inner_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::online_node_req, inner_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::online_node_req, online_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::online_node_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::online_node_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::online_node_ack, inner_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::online_node_ack, inner_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::online_node_ack, online_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_req, inner_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_req, inner_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_ack, inner_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_ack, inner_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_ack, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_ack, add_up_recv_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_ack, add_up_send_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_ack, add_up_recv_byte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::server::check_server_load_ack, add_up_send_byte_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::server::errorinfo)},
  { 8, -1, sizeof(::server::node_config)},
  { 20, -1, sizeof(::server::inquery_server_config_req)},
  { 27, -1, sizeof(::server::inquery_server_config_ack)},
  { 34, -1, sizeof(::server::update_server_config_req)},
  { 42, -1, sizeof(::server::update_server_config_ack)},
  { 51, -1, sizeof(::server::offline_node_req)},
  { 59, -1, sizeof(::server::offline_node_ack)},
  { 68, -1, sizeof(::server::online_node_req)},
  { 76, -1, sizeof(::server::online_node_ack)},
  { 85, -1, sizeof(::server::check_server_load_req)},
  { 92, -1, sizeof(::server::check_server_load_ack)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_errorinfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_node_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_inquery_server_config_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_inquery_server_config_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_update_server_config_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_update_server_config_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_offline_node_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_offline_node_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_online_node_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_online_node_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_check_server_load_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server::_check_server_load_ack_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "server.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014server.proto\022\006server\"N\n\terrorinfo\022\022\n\ne"
      "rror_code\030\001 \001(\005\022\022\n\nerror_info\030\002 \001(\014\022\031\n\021e"
      "rror_client_show\030\003 \001(\014\"\241\001\n\013node_config\022\021"
      "\n\tnode_type\030\001 \001(\t\022\023\n\013config_type\030\002 \001(\r\022\026"
      "\n\016config_content\030\003 \001(\t\022\021\n\tauto_send\030\004 \001("
      "\r\022\025\n\rreload_config\030\005 \001(\r\022\023\n\013config_file\030"
      "\006 \001(\t\022\023\n\013update_time\030\007 \001(\r\"C\n\031inquery_se"
      "rver_config_req\022\021\n\tnode_type\030\001 \001(\t\022\023\n\013co"
      "nfig_type\030\002 \001(\r\"b\n\031inquery_server_config"
      "_ack\022 \n\005error\030\001 \001(\0132\021.server.errorinfo\022#"
      "\n\006config\030\002 \001(\0132\023.server.node_config\"e\n\030u"
      "pdate_server_config_req\022#\n\006config\030\001 \001(\0132"
      "\023.server.node_config\022\020\n\010inner_ip\030\002 \001(\t\022\022"
      "\n\ninner_port\030\003 \001(\r\"\207\001\n\030update_server_con"
      "fig_ack\022 \n\005error\030\001 \001(\0132\021.server.errorinf"
      "o\022#\n\006config\030\002 \001(\0132\023.server.node_config\022\020"
      "\n\010inner_ip\030\003 \001(\t\022\022\n\ninner_port\030\004 \001(\r\"I\n\020"
      "offline_node_req\022\020\n\010inner_ip\030\001 \001(\t\022\022\n\nin"
      "ner_port\030\002 \001(\r\022\017\n\007offline\030\003 \001(\r\"k\n\020offli"
      "ne_node_ack\022 \n\005error\030\001 \001(\0132\021.server.erro"
      "rinfo\022\020\n\010inner_ip\030\002 \001(\t\022\022\n\ninner_port\030\003 "
      "\001(\r\022\017\n\007offline\030\004 \001(\r\"G\n\017online_node_req\022"
      "\020\n\010inner_ip\030\001 \001(\t\022\022\n\ninner_port\030\002 \001(\r\022\016\n"
      "\006online\030\003 \001(\r\"i\n\017online_node_ack\022 \n\005erro"
      "r\030\001 \001(\0132\021.server.errorinfo\022\020\n\010inner_ip\030\002"
      " \001(\t\022\022\n\ninner_port\030\003 \001(\r\022\016\n\006online\030\004 \001(\r"
      "\"=\n\025check_server_load_req\022\020\n\010inner_ip\030\001 "
      "\001(\t\022\022\n\ninner_port\030\002 \001(\r\"\325\001\n\025check_server"
      "_load_ack\022 \n\005error\030\001 \001(\0132\021.server.errori"
      "nfo\022\020\n\010inner_ip\030\002 \001(\t\022\022\n\ninner_port\030\003 \001("
      "\r\022\016\n\006status\030\004 \001(\r\022\027\n\017add_up_recv_num\030\005 \001"
      "(\r\022\027\n\017add_up_send_num\030\006 \001(\r\022\030\n\020add_up_re"
      "cv_byte\030\007 \001(\r\022\030\n\020add_up_send_byte\030\010 \001(\rb"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_server_2eproto
namespace server {

// ===================================================================

void errorinfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int errorinfo::kErrorCodeFieldNumber;
const int errorinfo::kErrorInfoFieldNumber;
const int errorinfo::kErrorClientShowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

errorinfo::errorinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_errorinfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.errorinfo)
}
errorinfo::errorinfo(const errorinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_info().size() > 0) {
    error_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  error_client_show_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_client_show().size() > 0) {
    error_client_show_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_client_show_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:server.errorinfo)
}

void errorinfo::SharedCtor() {
  error_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_client_show_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

errorinfo::~errorinfo() {
  // @@protoc_insertion_point(destructor:server.errorinfo)
  SharedDtor();
}

void errorinfo::SharedDtor() {
  error_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_client_show_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void errorinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* errorinfo::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const errorinfo& errorinfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_errorinfo.base);
  return *internal_default_instance();
}


void errorinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:server.errorinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_client_show_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  _internal_metadata_.Clear();
}

bool errorinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.errorinfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes error_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes error_client_show = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_client_show()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.errorinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.errorinfo)
  return false;
#undef DO_
}

void errorinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.errorinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error_info(), output);
  }

  // bytes error_client_show = 3;
  if (this->error_client_show().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->error_client_show(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.errorinfo)
}

::google::protobuf::uint8* errorinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.errorinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_info(), target);
  }

  // bytes error_client_show = 3;
  if (this->error_client_show().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->error_client_show(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.errorinfo)
  return target;
}

size_t errorinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.errorinfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error_info());
  }

  // bytes error_client_show = 3;
  if (this->error_client_show().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error_client_show());
  }

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void errorinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.errorinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const errorinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const errorinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.errorinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.errorinfo)
    MergeFrom(*source);
  }
}

void errorinfo::MergeFrom(const errorinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.errorinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_info().size() > 0) {

    error_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  if (from.error_client_show().size() > 0) {

    error_client_show_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_client_show_);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void errorinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.errorinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void errorinfo::CopyFrom(const errorinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.errorinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool errorinfo::IsInitialized() const {
  return true;
}

void errorinfo::Swap(errorinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void errorinfo::InternalSwap(errorinfo* other) {
  using std::swap;
  error_info_.Swap(&other->error_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_client_show_.Swap(&other->error_client_show_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata errorinfo::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void node_config::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int node_config::kNodeTypeFieldNumber;
const int node_config::kConfigTypeFieldNumber;
const int node_config::kConfigContentFieldNumber;
const int node_config::kAutoSendFieldNumber;
const int node_config::kReloadConfigFieldNumber;
const int node_config::kConfigFileFieldNumber;
const int node_config::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

node_config::node_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_node_config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.node_config)
}
node_config::node_config(const node_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_type().size() > 0) {
    node_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_type_);
  }
  config_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_content().size() > 0) {
    config_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_content_);
  }
  config_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_file().size() > 0) {
    config_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_file_);
  }
  ::memcpy(&config_type_, &from.config_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_time_) -
    reinterpret_cast<char*>(&config_type_)) + sizeof(update_time_));
  // @@protoc_insertion_point(copy_constructor:server.node_config)
}

void node_config::SharedCtor() {
  node_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&config_type_)) + sizeof(update_time_));
}

node_config::~node_config() {
  // @@protoc_insertion_point(destructor:server.node_config)
  SharedDtor();
}

void node_config::SharedDtor() {
  node_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void node_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* node_config::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const node_config& node_config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_node_config.base);
  return *internal_default_instance();
}


void node_config::Clear() {
// @@protoc_insertion_point(message_clear_start:server.node_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_time_) -
      reinterpret_cast<char*>(&config_type_)) + sizeof(update_time_));
  _internal_metadata_.Clear();
}

bool node_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.node_config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_type().data(), static_cast<int>(this->node_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.node_config.node_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config_content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config_content().data(), static_cast<int>(this->config_content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.node_config.config_content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 auto_send = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto_send_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reload_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reload_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config_file = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config_file().data(), static_cast<int>(this->config_file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.node_config.config_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.node_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.node_config)
  return false;
#undef DO_
}

void node_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.node_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_type = 1;
  if (this->node_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_type().data(), static_cast<int>(this->node_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.node_config.node_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_type(), output);
  }

  // uint32 config_type = 2;
  if (this->config_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_type(), output);
  }

  // string config_content = 3;
  if (this->config_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_content().data(), static_cast<int>(this->config_content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.node_config.config_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->config_content(), output);
  }

  // uint32 auto_send = 4;
  if (this->auto_send() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->auto_send(), output);
  }

  // uint32 reload_config = 5;
  if (this->reload_config() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reload_config(), output);
  }

  // string config_file = 6;
  if (this->config_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_file().data(), static_cast<int>(this->config_file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.node_config.config_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->config_file(), output);
  }

  // uint32 update_time = 7;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.node_config)
}

::google::protobuf::uint8* node_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.node_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_type = 1;
  if (this->node_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_type().data(), static_cast<int>(this->node_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.node_config.node_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_type(), target);
  }

  // uint32 config_type = 2;
  if (this->config_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_type(), target);
  }

  // string config_content = 3;
  if (this->config_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_content().data(), static_cast<int>(this->config_content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.node_config.config_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->config_content(), target);
  }

  // uint32 auto_send = 4;
  if (this->auto_send() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->auto_send(), target);
  }

  // uint32 reload_config = 5;
  if (this->reload_config() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reload_config(), target);
  }

  // string config_file = 6;
  if (this->config_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_file().data(), static_cast<int>(this->config_file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.node_config.config_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->config_file(), target);
  }

  // uint32 update_time = 7;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->update_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.node_config)
  return target;
}

size_t node_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.node_config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_type = 1;
  if (this->node_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_type());
  }

  // string config_content = 3;
  if (this->config_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_content());
  }

  // string config_file = 6;
  if (this->config_file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_file());
  }

  // uint32 config_type = 2;
  if (this->config_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_type());
  }

  // uint32 auto_send = 4;
  if (this->auto_send() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->auto_send());
  }

  // uint32 reload_config = 5;
  if (this->reload_config() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reload_config());
  }

  // uint32 update_time = 7;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void node_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.node_config)
  GOOGLE_DCHECK_NE(&from, this);
  const node_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const node_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.node_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.node_config)
    MergeFrom(*source);
  }
}

void node_config::MergeFrom(const node_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.node_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_type().size() > 0) {

    node_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_type_);
  }
  if (from.config_content().size() > 0) {

    config_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_content_);
  }
  if (from.config_file().size() > 0) {

    config_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_file_);
  }
  if (from.config_type() != 0) {
    set_config_type(from.config_type());
  }
  if (from.auto_send() != 0) {
    set_auto_send(from.auto_send());
  }
  if (from.reload_config() != 0) {
    set_reload_config(from.reload_config());
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
}

void node_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.node_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node_config::CopyFrom(const node_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.node_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node_config::IsInitialized() const {
  return true;
}

void node_config::Swap(node_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void node_config::InternalSwap(node_config* other) {
  using std::swap;
  node_type_.Swap(&other->node_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_content_.Swap(&other->config_content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_file_.Swap(&other->config_file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_type_, other->config_type_);
  swap(auto_send_, other->auto_send_);
  swap(reload_config_, other->reload_config_);
  swap(update_time_, other->update_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata node_config::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void inquery_server_config_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int inquery_server_config_req::kNodeTypeFieldNumber;
const int inquery_server_config_req::kConfigTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

inquery_server_config_req::inquery_server_config_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_inquery_server_config_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.inquery_server_config_req)
}
inquery_server_config_req::inquery_server_config_req(const inquery_server_config_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_type().size() > 0) {
    node_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_type_);
  }
  config_type_ = from.config_type_;
  // @@protoc_insertion_point(copy_constructor:server.inquery_server_config_req)
}

void inquery_server_config_req::SharedCtor() {
  node_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_type_ = 0u;
}

inquery_server_config_req::~inquery_server_config_req() {
  // @@protoc_insertion_point(destructor:server.inquery_server_config_req)
  SharedDtor();
}

void inquery_server_config_req::SharedDtor() {
  node_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void inquery_server_config_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* inquery_server_config_req::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const inquery_server_config_req& inquery_server_config_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_inquery_server_config_req.base);
  return *internal_default_instance();
}


void inquery_server_config_req::Clear() {
// @@protoc_insertion_point(message_clear_start:server.inquery_server_config_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_type_ = 0u;
  _internal_metadata_.Clear();
}

bool inquery_server_config_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.inquery_server_config_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_type().data(), static_cast<int>(this->node_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.inquery_server_config_req.node_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.inquery_server_config_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.inquery_server_config_req)
  return false;
#undef DO_
}

void inquery_server_config_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.inquery_server_config_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_type = 1;
  if (this->node_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_type().data(), static_cast<int>(this->node_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.inquery_server_config_req.node_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_type(), output);
  }

  // uint32 config_type = 2;
  if (this->config_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.inquery_server_config_req)
}

::google::protobuf::uint8* inquery_server_config_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.inquery_server_config_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_type = 1;
  if (this->node_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_type().data(), static_cast<int>(this->node_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.inquery_server_config_req.node_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_type(), target);
  }

  // uint32 config_type = 2;
  if (this->config_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.inquery_server_config_req)
  return target;
}

size_t inquery_server_config_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.inquery_server_config_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_type = 1;
  if (this->node_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_type());
  }

  // uint32 config_type = 2;
  if (this->config_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void inquery_server_config_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.inquery_server_config_req)
  GOOGLE_DCHECK_NE(&from, this);
  const inquery_server_config_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const inquery_server_config_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.inquery_server_config_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.inquery_server_config_req)
    MergeFrom(*source);
  }
}

void inquery_server_config_req::MergeFrom(const inquery_server_config_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.inquery_server_config_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_type().size() > 0) {

    node_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_type_);
  }
  if (from.config_type() != 0) {
    set_config_type(from.config_type());
  }
}

void inquery_server_config_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.inquery_server_config_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inquery_server_config_req::CopyFrom(const inquery_server_config_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.inquery_server_config_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inquery_server_config_req::IsInitialized() const {
  return true;
}

void inquery_server_config_req::Swap(inquery_server_config_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void inquery_server_config_req::InternalSwap(inquery_server_config_req* other) {
  using std::swap;
  node_type_.Swap(&other->node_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_type_, other->config_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata inquery_server_config_req::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void inquery_server_config_ack::InitAsDefaultInstance() {
  ::server::_inquery_server_config_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::server::errorinfo*>(
      ::server::errorinfo::internal_default_instance());
  ::server::_inquery_server_config_ack_default_instance_._instance.get_mutable()->config_ = const_cast< ::server::node_config*>(
      ::server::node_config::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int inquery_server_config_ack::kErrorFieldNumber;
const int inquery_server_config_ack::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

inquery_server_config_ack::inquery_server_config_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_inquery_server_config_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.inquery_server_config_ack)
}
inquery_server_config_ack::inquery_server_config_ack(const inquery_server_config_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::server::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::server::node_config(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:server.inquery_server_config_ack)
}

void inquery_server_config_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&error_)) + sizeof(config_));
}

inquery_server_config_ack::~inquery_server_config_ack() {
  // @@protoc_insertion_point(destructor:server.inquery_server_config_ack)
  SharedDtor();
}

void inquery_server_config_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete config_;
}

void inquery_server_config_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* inquery_server_config_ack::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const inquery_server_config_ack& inquery_server_config_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_inquery_server_config_ack.base);
  return *internal_default_instance();
}


void inquery_server_config_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:server.inquery_server_config_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool inquery_server_config_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.inquery_server_config_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .server.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .server.node_config config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.inquery_server_config_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.inquery_server_config_ack)
  return false;
#undef DO_
}

void inquery_server_config_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.inquery_server_config_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // .server.node_config config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_config(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.inquery_server_config_ack)
}

::google::protobuf::uint8* inquery_server_config_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.inquery_server_config_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // .server.node_config config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_config(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.inquery_server_config_ack)
  return target;
}

size_t inquery_server_config_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.inquery_server_config_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .server.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .server.node_config config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void inquery_server_config_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.inquery_server_config_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const inquery_server_config_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const inquery_server_config_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.inquery_server_config_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.inquery_server_config_ack)
    MergeFrom(*source);
  }
}

void inquery_server_config_ack::MergeFrom(const inquery_server_config_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.inquery_server_config_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::server::errorinfo::MergeFrom(from.error());
  }
  if (from.has_config()) {
    mutable_config()->::server::node_config::MergeFrom(from.config());
  }
}

void inquery_server_config_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.inquery_server_config_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inquery_server_config_ack::CopyFrom(const inquery_server_config_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.inquery_server_config_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inquery_server_config_ack::IsInitialized() const {
  return true;
}

void inquery_server_config_ack::Swap(inquery_server_config_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void inquery_server_config_ack::InternalSwap(inquery_server_config_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata inquery_server_config_ack::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void update_server_config_req::InitAsDefaultInstance() {
  ::server::_update_server_config_req_default_instance_._instance.get_mutable()->config_ = const_cast< ::server::node_config*>(
      ::server::node_config::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int update_server_config_req::kConfigFieldNumber;
const int update_server_config_req::kInnerIpFieldNumber;
const int update_server_config_req::kInnerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

update_server_config_req::update_server_config_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_update_server_config_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.update_server_config_req)
}
update_server_config_req::update_server_config_req(const update_server_config_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner_ip().size() > 0) {
    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_config()) {
    config_ = new ::server::node_config(*from.config_);
  } else {
    config_ = NULL;
  }
  inner_port_ = from.inner_port_;
  // @@protoc_insertion_point(copy_constructor:server.update_server_config_req)
}

void update_server_config_req::SharedCtor() {
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inner_port_) -
      reinterpret_cast<char*>(&config_)) + sizeof(inner_port_));
}

update_server_config_req::~update_server_config_req() {
  // @@protoc_insertion_point(destructor:server.update_server_config_req)
  SharedDtor();
}

void update_server_config_req::SharedDtor() {
  inner_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void update_server_config_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* update_server_config_req::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const update_server_config_req& update_server_config_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_update_server_config_req.base);
  return *internal_default_instance();
}


void update_server_config_req::Clear() {
// @@protoc_insertion_point(message_clear_start:server.update_server_config_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  inner_port_ = 0u;
  _internal_metadata_.Clear();
}

bool update_server_config_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.update_server_config_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .server.node_config config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inner_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.update_server_config_req.inner_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inner_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.update_server_config_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.update_server_config_req)
  return false;
#undef DO_
}

void update_server_config_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.update_server_config_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.node_config config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_config(), output);
  }

  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.update_server_config_req.inner_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inner_ip(), output);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inner_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.update_server_config_req)
}

::google::protobuf::uint8* update_server_config_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.update_server_config_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.node_config config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_config(), deterministic, target);
  }

  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.update_server_config_req.inner_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inner_ip(), target);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inner_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.update_server_config_req)
  return target;
}

size_t update_server_config_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.update_server_config_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner_ip());
  }

  // .server.node_config config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void update_server_config_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.update_server_config_req)
  GOOGLE_DCHECK_NE(&from, this);
  const update_server_config_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const update_server_config_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.update_server_config_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.update_server_config_req)
    MergeFrom(*source);
  }
}

void update_server_config_req::MergeFrom(const update_server_config_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.update_server_config_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_ip().size() > 0) {

    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_config()) {
    mutable_config()->::server::node_config::MergeFrom(from.config());
  }
  if (from.inner_port() != 0) {
    set_inner_port(from.inner_port());
  }
}

void update_server_config_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.update_server_config_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_server_config_req::CopyFrom(const update_server_config_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.update_server_config_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_server_config_req::IsInitialized() const {
  return true;
}

void update_server_config_req::Swap(update_server_config_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void update_server_config_req::InternalSwap(update_server_config_req* other) {
  using std::swap;
  inner_ip_.Swap(&other->inner_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
  swap(inner_port_, other->inner_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata update_server_config_req::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void update_server_config_ack::InitAsDefaultInstance() {
  ::server::_update_server_config_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::server::errorinfo*>(
      ::server::errorinfo::internal_default_instance());
  ::server::_update_server_config_ack_default_instance_._instance.get_mutable()->config_ = const_cast< ::server::node_config*>(
      ::server::node_config::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int update_server_config_ack::kErrorFieldNumber;
const int update_server_config_ack::kConfigFieldNumber;
const int update_server_config_ack::kInnerIpFieldNumber;
const int update_server_config_ack::kInnerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

update_server_config_ack::update_server_config_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_update_server_config_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.update_server_config_ack)
}
update_server_config_ack::update_server_config_ack(const update_server_config_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner_ip().size() > 0) {
    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_error()) {
    error_ = new ::server::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::server::node_config(*from.config_);
  } else {
    config_ = NULL;
  }
  inner_port_ = from.inner_port_;
  // @@protoc_insertion_point(copy_constructor:server.update_server_config_ack)
}

void update_server_config_ack::SharedCtor() {
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inner_port_) -
      reinterpret_cast<char*>(&error_)) + sizeof(inner_port_));
}

update_server_config_ack::~update_server_config_ack() {
  // @@protoc_insertion_point(destructor:server.update_server_config_ack)
  SharedDtor();
}

void update_server_config_ack::SharedDtor() {
  inner_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete config_;
}

void update_server_config_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* update_server_config_ack::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const update_server_config_ack& update_server_config_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_update_server_config_ack.base);
  return *internal_default_instance();
}


void update_server_config_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:server.update_server_config_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  inner_port_ = 0u;
  _internal_metadata_.Clear();
}

bool update_server_config_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.update_server_config_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .server.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .server.node_config config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inner_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.update_server_config_ack.inner_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inner_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.update_server_config_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.update_server_config_ack)
  return false;
#undef DO_
}

void update_server_config_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.update_server_config_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // .server.node_config config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_config(), output);
  }

  // string inner_ip = 3;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.update_server_config_ack.inner_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->inner_ip(), output);
  }

  // uint32 inner_port = 4;
  if (this->inner_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->inner_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.update_server_config_ack)
}

::google::protobuf::uint8* update_server_config_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.update_server_config_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // .server.node_config config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_config(), deterministic, target);
  }

  // string inner_ip = 3;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.update_server_config_ack.inner_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->inner_ip(), target);
  }

  // uint32 inner_port = 4;
  if (this->inner_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->inner_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.update_server_config_ack)
  return target;
}

size_t update_server_config_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.update_server_config_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string inner_ip = 3;
  if (this->inner_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner_ip());
  }

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .server.node_config config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // uint32 inner_port = 4;
  if (this->inner_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void update_server_config_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.update_server_config_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const update_server_config_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const update_server_config_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.update_server_config_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.update_server_config_ack)
    MergeFrom(*source);
  }
}

void update_server_config_ack::MergeFrom(const update_server_config_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.update_server_config_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_ip().size() > 0) {

    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_error()) {
    mutable_error()->::server::errorinfo::MergeFrom(from.error());
  }
  if (from.has_config()) {
    mutable_config()->::server::node_config::MergeFrom(from.config());
  }
  if (from.inner_port() != 0) {
    set_inner_port(from.inner_port());
  }
}

void update_server_config_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.update_server_config_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_server_config_ack::CopyFrom(const update_server_config_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.update_server_config_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_server_config_ack::IsInitialized() const {
  return true;
}

void update_server_config_ack::Swap(update_server_config_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void update_server_config_ack::InternalSwap(update_server_config_ack* other) {
  using std::swap;
  inner_ip_.Swap(&other->inner_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(config_, other->config_);
  swap(inner_port_, other->inner_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata update_server_config_ack::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_node_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_node_req::kInnerIpFieldNumber;
const int offline_node_req::kInnerPortFieldNumber;
const int offline_node_req::kOfflineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_node_req::offline_node_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_offline_node_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.offline_node_req)
}
offline_node_req::offline_node_req(const offline_node_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner_ip().size() > 0) {
    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  ::memcpy(&inner_port_, &from.inner_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&offline_) -
    reinterpret_cast<char*>(&inner_port_)) + sizeof(offline_));
  // @@protoc_insertion_point(copy_constructor:server.offline_node_req)
}

void offline_node_req::SharedCtor() {
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inner_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offline_) -
      reinterpret_cast<char*>(&inner_port_)) + sizeof(offline_));
}

offline_node_req::~offline_node_req() {
  // @@protoc_insertion_point(destructor:server.offline_node_req)
  SharedDtor();
}

void offline_node_req::SharedDtor() {
  inner_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void offline_node_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_node_req::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_node_req& offline_node_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_offline_node_req.base);
  return *internal_default_instance();
}


void offline_node_req::Clear() {
// @@protoc_insertion_point(message_clear_start:server.offline_node_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inner_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offline_) -
      reinterpret_cast<char*>(&inner_port_)) + sizeof(offline_));
  _internal_metadata_.Clear();
}

bool offline_node_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.offline_node_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string inner_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.offline_node_req.inner_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inner_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.offline_node_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.offline_node_req)
  return false;
#undef DO_
}

void offline_node_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.offline_node_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string inner_ip = 1;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.offline_node_req.inner_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inner_ip(), output);
  }

  // uint32 inner_port = 2;
  if (this->inner_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inner_port(), output);
  }

  // uint32 offline = 3;
  if (this->offline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offline(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.offline_node_req)
}

::google::protobuf::uint8* offline_node_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.offline_node_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string inner_ip = 1;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.offline_node_req.inner_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inner_ip(), target);
  }

  // uint32 inner_port = 2;
  if (this->inner_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inner_port(), target);
  }

  // uint32 offline = 3;
  if (this->offline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offline(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.offline_node_req)
  return target;
}

size_t offline_node_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.offline_node_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string inner_ip = 1;
  if (this->inner_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner_ip());
  }

  // uint32 inner_port = 2;
  if (this->inner_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_port());
  }

  // uint32 offline = 3;
  if (this->offline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_node_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.offline_node_req)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_node_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_node_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.offline_node_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.offline_node_req)
    MergeFrom(*source);
  }
}

void offline_node_req::MergeFrom(const offline_node_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.offline_node_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_ip().size() > 0) {

    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.inner_port() != 0) {
    set_inner_port(from.inner_port());
  }
  if (from.offline() != 0) {
    set_offline(from.offline());
  }
}

void offline_node_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.offline_node_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_node_req::CopyFrom(const offline_node_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.offline_node_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_node_req::IsInitialized() const {
  return true;
}

void offline_node_req::Swap(offline_node_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_node_req::InternalSwap(offline_node_req* other) {
  using std::swap;
  inner_ip_.Swap(&other->inner_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inner_port_, other->inner_port_);
  swap(offline_, other->offline_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_node_req::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_node_ack::InitAsDefaultInstance() {
  ::server::_offline_node_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::server::errorinfo*>(
      ::server::errorinfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_node_ack::kErrorFieldNumber;
const int offline_node_ack::kInnerIpFieldNumber;
const int offline_node_ack::kInnerPortFieldNumber;
const int offline_node_ack::kOfflineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_node_ack::offline_node_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_offline_node_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.offline_node_ack)
}
offline_node_ack::offline_node_ack(const offline_node_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner_ip().size() > 0) {
    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_error()) {
    error_ = new ::server::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&inner_port_, &from.inner_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&offline_) -
    reinterpret_cast<char*>(&inner_port_)) + sizeof(offline_));
  // @@protoc_insertion_point(copy_constructor:server.offline_node_ack)
}

void offline_node_ack::SharedCtor() {
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offline_) -
      reinterpret_cast<char*>(&error_)) + sizeof(offline_));
}

offline_node_ack::~offline_node_ack() {
  // @@protoc_insertion_point(destructor:server.offline_node_ack)
  SharedDtor();
}

void offline_node_ack::SharedDtor() {
  inner_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void offline_node_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_node_ack::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_node_ack& offline_node_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_offline_node_ack.base);
  return *internal_default_instance();
}


void offline_node_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:server.offline_node_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  ::memset(&inner_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offline_) -
      reinterpret_cast<char*>(&inner_port_)) + sizeof(offline_));
  _internal_metadata_.Clear();
}

bool offline_node_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.offline_node_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .server.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inner_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.offline_node_ack.inner_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inner_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offline = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.offline_node_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.offline_node_ack)
  return false;
#undef DO_
}

void offline_node_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.offline_node_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.offline_node_ack.inner_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inner_ip(), output);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inner_port(), output);
  }

  // uint32 offline = 4;
  if (this->offline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offline(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.offline_node_ack)
}

::google::protobuf::uint8* offline_node_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.offline_node_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.offline_node_ack.inner_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inner_ip(), target);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inner_port(), target);
  }

  // uint32 offline = 4;
  if (this->offline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offline(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.offline_node_ack)
  return target;
}

size_t offline_node_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.offline_node_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner_ip());
  }

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_port());
  }

  // uint32 offline = 4;
  if (this->offline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offline());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_node_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.offline_node_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_node_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_node_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.offline_node_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.offline_node_ack)
    MergeFrom(*source);
  }
}

void offline_node_ack::MergeFrom(const offline_node_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.offline_node_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_ip().size() > 0) {

    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_error()) {
    mutable_error()->::server::errorinfo::MergeFrom(from.error());
  }
  if (from.inner_port() != 0) {
    set_inner_port(from.inner_port());
  }
  if (from.offline() != 0) {
    set_offline(from.offline());
  }
}

void offline_node_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.offline_node_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_node_ack::CopyFrom(const offline_node_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.offline_node_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_node_ack::IsInitialized() const {
  return true;
}

void offline_node_ack::Swap(offline_node_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_node_ack::InternalSwap(offline_node_ack* other) {
  using std::swap;
  inner_ip_.Swap(&other->inner_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(inner_port_, other->inner_port_);
  swap(offline_, other->offline_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_node_ack::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void online_node_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int online_node_req::kInnerIpFieldNumber;
const int online_node_req::kInnerPortFieldNumber;
const int online_node_req::kOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

online_node_req::online_node_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_online_node_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.online_node_req)
}
online_node_req::online_node_req(const online_node_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner_ip().size() > 0) {
    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  ::memcpy(&inner_port_, &from.inner_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&inner_port_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:server.online_node_req)
}

void online_node_req::SharedCtor() {
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inner_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&inner_port_)) + sizeof(online_));
}

online_node_req::~online_node_req() {
  // @@protoc_insertion_point(destructor:server.online_node_req)
  SharedDtor();
}

void online_node_req::SharedDtor() {
  inner_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void online_node_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* online_node_req::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const online_node_req& online_node_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_online_node_req.base);
  return *internal_default_instance();
}


void online_node_req::Clear() {
// @@protoc_insertion_point(message_clear_start:server.online_node_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inner_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&inner_port_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

bool online_node_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.online_node_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string inner_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.online_node_req.inner_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inner_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 online = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.online_node_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.online_node_req)
  return false;
#undef DO_
}

void online_node_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.online_node_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string inner_ip = 1;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.online_node_req.inner_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inner_ip(), output);
  }

  // uint32 inner_port = 2;
  if (this->inner_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inner_port(), output);
  }

  // uint32 online = 3;
  if (this->online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->online(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.online_node_req)
}

::google::protobuf::uint8* online_node_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.online_node_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string inner_ip = 1;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.online_node_req.inner_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inner_ip(), target);
  }

  // uint32 inner_port = 2;
  if (this->inner_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inner_port(), target);
  }

  // uint32 online = 3;
  if (this->online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->online(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.online_node_req)
  return target;
}

size_t online_node_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.online_node_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string inner_ip = 1;
  if (this->inner_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner_ip());
  }

  // uint32 inner_port = 2;
  if (this->inner_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_port());
  }

  // uint32 online = 3;
  if (this->online() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->online());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void online_node_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.online_node_req)
  GOOGLE_DCHECK_NE(&from, this);
  const online_node_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const online_node_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.online_node_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.online_node_req)
    MergeFrom(*source);
  }
}

void online_node_req::MergeFrom(const online_node_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.online_node_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_ip().size() > 0) {

    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.inner_port() != 0) {
    set_inner_port(from.inner_port());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void online_node_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.online_node_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void online_node_req::CopyFrom(const online_node_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.online_node_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool online_node_req::IsInitialized() const {
  return true;
}

void online_node_req::Swap(online_node_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void online_node_req::InternalSwap(online_node_req* other) {
  using std::swap;
  inner_ip_.Swap(&other->inner_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inner_port_, other->inner_port_);
  swap(online_, other->online_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata online_node_req::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void online_node_ack::InitAsDefaultInstance() {
  ::server::_online_node_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::server::errorinfo*>(
      ::server::errorinfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int online_node_ack::kErrorFieldNumber;
const int online_node_ack::kInnerIpFieldNumber;
const int online_node_ack::kInnerPortFieldNumber;
const int online_node_ack::kOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

online_node_ack::online_node_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_online_node_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.online_node_ack)
}
online_node_ack::online_node_ack(const online_node_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner_ip().size() > 0) {
    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_error()) {
    error_ = new ::server::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&inner_port_, &from.inner_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&inner_port_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:server.online_node_ack)
}

void online_node_ack::SharedCtor() {
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&error_)) + sizeof(online_));
}

online_node_ack::~online_node_ack() {
  // @@protoc_insertion_point(destructor:server.online_node_ack)
  SharedDtor();
}

void online_node_ack::SharedDtor() {
  inner_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void online_node_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* online_node_ack::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const online_node_ack& online_node_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_online_node_ack.base);
  return *internal_default_instance();
}


void online_node_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:server.online_node_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  ::memset(&inner_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&inner_port_)) + sizeof(online_));
  _internal_metadata_.Clear();
}

bool online_node_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.online_node_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .server.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inner_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.online_node_ack.inner_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inner_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 online = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.online_node_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.online_node_ack)
  return false;
#undef DO_
}

void online_node_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.online_node_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.online_node_ack.inner_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inner_ip(), output);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inner_port(), output);
  }

  // uint32 online = 4;
  if (this->online() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->online(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.online_node_ack)
}

::google::protobuf::uint8* online_node_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.online_node_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.online_node_ack.inner_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inner_ip(), target);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inner_port(), target);
  }

  // uint32 online = 4;
  if (this->online() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->online(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.online_node_ack)
  return target;
}

size_t online_node_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.online_node_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner_ip());
  }

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_port());
  }

  // uint32 online = 4;
  if (this->online() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->online());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void online_node_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.online_node_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const online_node_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const online_node_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.online_node_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.online_node_ack)
    MergeFrom(*source);
  }
}

void online_node_ack::MergeFrom(const online_node_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.online_node_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_ip().size() > 0) {

    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_error()) {
    mutable_error()->::server::errorinfo::MergeFrom(from.error());
  }
  if (from.inner_port() != 0) {
    set_inner_port(from.inner_port());
  }
  if (from.online() != 0) {
    set_online(from.online());
  }
}

void online_node_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.online_node_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void online_node_ack::CopyFrom(const online_node_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.online_node_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool online_node_ack::IsInitialized() const {
  return true;
}

void online_node_ack::Swap(online_node_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void online_node_ack::InternalSwap(online_node_ack* other) {
  using std::swap;
  inner_ip_.Swap(&other->inner_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(inner_port_, other->inner_port_);
  swap(online_, other->online_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata online_node_ack::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void check_server_load_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int check_server_load_req::kInnerIpFieldNumber;
const int check_server_load_req::kInnerPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

check_server_load_req::check_server_load_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_check_server_load_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.check_server_load_req)
}
check_server_load_req::check_server_load_req(const check_server_load_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner_ip().size() > 0) {
    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  inner_port_ = from.inner_port_;
  // @@protoc_insertion_point(copy_constructor:server.check_server_load_req)
}

void check_server_load_req::SharedCtor() {
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inner_port_ = 0u;
}

check_server_load_req::~check_server_load_req() {
  // @@protoc_insertion_point(destructor:server.check_server_load_req)
  SharedDtor();
}

void check_server_load_req::SharedDtor() {
  inner_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void check_server_load_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* check_server_load_req::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const check_server_load_req& check_server_load_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_check_server_load_req.base);
  return *internal_default_instance();
}


void check_server_load_req::Clear() {
// @@protoc_insertion_point(message_clear_start:server.check_server_load_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inner_port_ = 0u;
  _internal_metadata_.Clear();
}

bool check_server_load_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.check_server_load_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string inner_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.check_server_load_req.inner_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inner_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.check_server_load_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.check_server_load_req)
  return false;
#undef DO_
}

void check_server_load_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.check_server_load_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string inner_ip = 1;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.check_server_load_req.inner_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inner_ip(), output);
  }

  // uint32 inner_port = 2;
  if (this->inner_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inner_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.check_server_load_req)
}

::google::protobuf::uint8* check_server_load_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.check_server_load_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string inner_ip = 1;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.check_server_load_req.inner_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inner_ip(), target);
  }

  // uint32 inner_port = 2;
  if (this->inner_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inner_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.check_server_load_req)
  return target;
}

size_t check_server_load_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.check_server_load_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string inner_ip = 1;
  if (this->inner_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner_ip());
  }

  // uint32 inner_port = 2;
  if (this->inner_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void check_server_load_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.check_server_load_req)
  GOOGLE_DCHECK_NE(&from, this);
  const check_server_load_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const check_server_load_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.check_server_load_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.check_server_load_req)
    MergeFrom(*source);
  }
}

void check_server_load_req::MergeFrom(const check_server_load_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.check_server_load_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_ip().size() > 0) {

    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.inner_port() != 0) {
    set_inner_port(from.inner_port());
  }
}

void check_server_load_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.check_server_load_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void check_server_load_req::CopyFrom(const check_server_load_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.check_server_load_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_server_load_req::IsInitialized() const {
  return true;
}

void check_server_load_req::Swap(check_server_load_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void check_server_load_req::InternalSwap(check_server_load_req* other) {
  using std::swap;
  inner_ip_.Swap(&other->inner_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inner_port_, other->inner_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata check_server_load_req::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void check_server_load_ack::InitAsDefaultInstance() {
  ::server::_check_server_load_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::server::errorinfo*>(
      ::server::errorinfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int check_server_load_ack::kErrorFieldNumber;
const int check_server_load_ack::kInnerIpFieldNumber;
const int check_server_load_ack::kInnerPortFieldNumber;
const int check_server_load_ack::kStatusFieldNumber;
const int check_server_load_ack::kAddUpRecvNumFieldNumber;
const int check_server_load_ack::kAddUpSendNumFieldNumber;
const int check_server_load_ack::kAddUpRecvByteFieldNumber;
const int check_server_load_ack::kAddUpSendByteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

check_server_load_ack::check_server_load_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_server_2eproto::scc_info_check_server_load_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:server.check_server_load_ack)
}
check_server_load_ack::check_server_load_ack(const check_server_load_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.inner_ip().size() > 0) {
    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_error()) {
    error_ = new ::server::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&inner_port_, &from.inner_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_up_send_byte_) -
    reinterpret_cast<char*>(&inner_port_)) + sizeof(add_up_send_byte_));
  // @@protoc_insertion_point(copy_constructor:server.check_server_load_ack)
}

void check_server_load_ack::SharedCtor() {
  inner_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_up_send_byte_) -
      reinterpret_cast<char*>(&error_)) + sizeof(add_up_send_byte_));
}

check_server_load_ack::~check_server_load_ack() {
  // @@protoc_insertion_point(destructor:server.check_server_load_ack)
  SharedDtor();
}

void check_server_load_ack::SharedDtor() {
  inner_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void check_server_load_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* check_server_load_ack::descriptor() {
  ::protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const check_server_load_ack& check_server_load_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_server_2eproto::scc_info_check_server_load_ack.base);
  return *internal_default_instance();
}


void check_server_load_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:server.check_server_load_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inner_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  ::memset(&inner_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_up_send_byte_) -
      reinterpret_cast<char*>(&inner_port_)) + sizeof(add_up_send_byte_));
  _internal_metadata_.Clear();
}

bool check_server_load_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server.check_server_load_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .server.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string inner_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inner_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server.check_server_load_ack.inner_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 inner_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_up_recv_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_up_recv_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_up_send_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_up_send_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_up_recv_byte = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_up_recv_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_up_send_byte = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_up_send_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server.check_server_load_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server.check_server_load_ack)
  return false;
#undef DO_
}

void check_server_load_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server.check_server_load_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.check_server_load_ack.inner_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inner_ip(), output);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inner_port(), output);
  }

  // uint32 status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // uint32 add_up_recv_num = 5;
  if (this->add_up_recv_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->add_up_recv_num(), output);
  }

  // uint32 add_up_send_num = 6;
  if (this->add_up_send_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->add_up_send_num(), output);
  }

  // uint32 add_up_recv_byte = 7;
  if (this->add_up_recv_byte() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->add_up_recv_byte(), output);
  }

  // uint32 add_up_send_byte = 8;
  if (this->add_up_send_byte() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->add_up_send_byte(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:server.check_server_load_ack)
}

::google::protobuf::uint8* check_server_load_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:server.check_server_load_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inner_ip().data(), static_cast<int>(this->inner_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server.check_server_load_ack.inner_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inner_ip(), target);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inner_port(), target);
  }

  // uint32 status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // uint32 add_up_recv_num = 5;
  if (this->add_up_recv_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->add_up_recv_num(), target);
  }

  // uint32 add_up_send_num = 6;
  if (this->add_up_send_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->add_up_send_num(), target);
  }

  // uint32 add_up_recv_byte = 7;
  if (this->add_up_recv_byte() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->add_up_recv_byte(), target);
  }

  // uint32 add_up_send_byte = 8;
  if (this->add_up_send_byte() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->add_up_send_byte(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.check_server_load_ack)
  return target;
}

size_t check_server_load_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.check_server_load_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string inner_ip = 2;
  if (this->inner_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inner_ip());
  }

  // .server.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint32 inner_port = 3;
  if (this->inner_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_port());
  }

  // uint32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // uint32 add_up_recv_num = 5;
  if (this->add_up_recv_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_up_recv_num());
  }

  // uint32 add_up_send_num = 6;
  if (this->add_up_send_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_up_send_num());
  }

  // uint32 add_up_recv_byte = 7;
  if (this->add_up_recv_byte() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_up_recv_byte());
  }

  // uint32 add_up_send_byte = 8;
  if (this->add_up_send_byte() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_up_send_byte());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void check_server_load_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server.check_server_load_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const check_server_load_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const check_server_load_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server.check_server_load_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server.check_server_load_ack)
    MergeFrom(*source);
  }
}

void check_server_load_ack::MergeFrom(const check_server_load_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server.check_server_load_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inner_ip().size() > 0) {

    inner_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inner_ip_);
  }
  if (from.has_error()) {
    mutable_error()->::server::errorinfo::MergeFrom(from.error());
  }
  if (from.inner_port() != 0) {
    set_inner_port(from.inner_port());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.add_up_recv_num() != 0) {
    set_add_up_recv_num(from.add_up_recv_num());
  }
  if (from.add_up_send_num() != 0) {
    set_add_up_send_num(from.add_up_send_num());
  }
  if (from.add_up_recv_byte() != 0) {
    set_add_up_recv_byte(from.add_up_recv_byte());
  }
  if (from.add_up_send_byte() != 0) {
    set_add_up_send_byte(from.add_up_send_byte());
  }
}

void check_server_load_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server.check_server_load_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void check_server_load_ack::CopyFrom(const check_server_load_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.check_server_load_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_server_load_ack::IsInitialized() const {
  return true;
}

void check_server_load_ack::Swap(check_server_load_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void check_server_load_ack::InternalSwap(check_server_load_ack* other) {
  using std::swap;
  inner_ip_.Swap(&other->inner_ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(inner_port_, other->inner_port_);
  swap(status_, other->status_);
  swap(add_up_recv_num_, other->add_up_recv_num_);
  swap(add_up_send_num_, other->add_up_send_num_);
  swap(add_up_recv_byte_, other->add_up_recv_byte_);
  swap(add_up_send_byte_, other->add_up_send_byte_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata check_server_load_ack::GetMetadata() const {
  protobuf_server_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_server_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace server
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::errorinfo* Arena::CreateMaybeMessage< ::server::errorinfo >(Arena* arena) {
  return Arena::CreateInternal< ::server::errorinfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::node_config* Arena::CreateMaybeMessage< ::server::node_config >(Arena* arena) {
  return Arena::CreateInternal< ::server::node_config >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::inquery_server_config_req* Arena::CreateMaybeMessage< ::server::inquery_server_config_req >(Arena* arena) {
  return Arena::CreateInternal< ::server::inquery_server_config_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::inquery_server_config_ack* Arena::CreateMaybeMessage< ::server::inquery_server_config_ack >(Arena* arena) {
  return Arena::CreateInternal< ::server::inquery_server_config_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::update_server_config_req* Arena::CreateMaybeMessage< ::server::update_server_config_req >(Arena* arena) {
  return Arena::CreateInternal< ::server::update_server_config_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::update_server_config_ack* Arena::CreateMaybeMessage< ::server::update_server_config_ack >(Arena* arena) {
  return Arena::CreateInternal< ::server::update_server_config_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::offline_node_req* Arena::CreateMaybeMessage< ::server::offline_node_req >(Arena* arena) {
  return Arena::CreateInternal< ::server::offline_node_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::offline_node_ack* Arena::CreateMaybeMessage< ::server::offline_node_ack >(Arena* arena) {
  return Arena::CreateInternal< ::server::offline_node_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::online_node_req* Arena::CreateMaybeMessage< ::server::online_node_req >(Arena* arena) {
  return Arena::CreateInternal< ::server::online_node_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::online_node_ack* Arena::CreateMaybeMessage< ::server::online_node_ack >(Arena* arena) {
  return Arena::CreateInternal< ::server::online_node_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::check_server_load_req* Arena::CreateMaybeMessage< ::server::check_server_load_req >(Arena* arena) {
  return Arena::CreateInternal< ::server::check_server_load_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::server::check_server_load_ack* Arena::CreateMaybeMessage< ::server::check_server_load_ack >(Arena* arena) {
  return Arena::CreateInternal< ::server::check_server_load_ack >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
