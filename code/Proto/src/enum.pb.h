// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enum.proto

#ifndef PROTOBUF_INCLUDED_enum_2eproto
#define PROTOBUF_INCLUDED_enum_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_enum_2eproto 

namespace protobuf_enum_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_enum_2eproto

enum E_CLIENT_TYPE {
  E_TYPE_UNKNOWN_DEV = 0,
  E_TYPE_ANDRIOD = 1,
  E_TYPE_ANDRIOD_PAD = 2,
  E_TYPE_IOS = 3,
  E_TYPE_IPAD = 4,
  E_TYPE_WEB = 5,
  E_CLIENT_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  E_CLIENT_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool E_CLIENT_TYPE_IsValid(int value);
const E_CLIENT_TYPE E_CLIENT_TYPE_MIN = E_TYPE_UNKNOWN_DEV;
const E_CLIENT_TYPE E_CLIENT_TYPE_MAX = E_TYPE_WEB;
const int E_CLIENT_TYPE_ARRAYSIZE = E_CLIENT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_CLIENT_TYPE_descriptor();
inline const ::std::string& E_CLIENT_TYPE_Name(E_CLIENT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_CLIENT_TYPE_descriptor(), value);
}
inline bool E_CLIENT_TYPE_Parse(
    const ::std::string& name, E_CLIENT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_CLIENT_TYPE>(
    E_CLIENT_TYPE_descriptor(), name, value);
}
enum E_CHAT_TYPE {
  E_TYPE_CHAT_UNKNOWN = 0,
  E_TYPE_CHAT_TEXT = 1,
  E_TYPE_CHAT_PIC = 2,
  E_TYPE_CHAT_VOICE = 3,
  E_TYPE_CHAT_LOCATION = 4,
  E_CHAT_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  E_CHAT_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool E_CHAT_TYPE_IsValid(int value);
const E_CHAT_TYPE E_CHAT_TYPE_MIN = E_TYPE_CHAT_UNKNOWN;
const E_CHAT_TYPE E_CHAT_TYPE_MAX = E_TYPE_CHAT_LOCATION;
const int E_CHAT_TYPE_ARRAYSIZE = E_CHAT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_CHAT_TYPE_descriptor();
inline const ::std::string& E_CHAT_TYPE_Name(E_CHAT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_CHAT_TYPE_descriptor(), value);
}
inline bool E_CHAT_TYPE_Parse(
    const ::std::string& name, E_CHAT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_CHAT_TYPE>(
    E_CHAT_TYPE_descriptor(), name, value);
}
enum E_USER_IDENTITY_TYPE {
  E_USER_IDENTITY_UNKOWN = 0,
  E_USER_IDENTITY = 1,
  E_USER_IDENTITY_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  E_USER_IDENTITY_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool E_USER_IDENTITY_TYPE_IsValid(int value);
const E_USER_IDENTITY_TYPE E_USER_IDENTITY_TYPE_MIN = E_USER_IDENTITY_UNKOWN;
const E_USER_IDENTITY_TYPE E_USER_IDENTITY_TYPE_MAX = E_USER_IDENTITY;
const int E_USER_IDENTITY_TYPE_ARRAYSIZE = E_USER_IDENTITY_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_USER_IDENTITY_TYPE_descriptor();
inline const ::std::string& E_USER_IDENTITY_TYPE_Name(E_USER_IDENTITY_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_USER_IDENTITY_TYPE_descriptor(), value);
}
inline bool E_USER_IDENTITY_TYPE_Parse(
    const ::std::string& name, E_USER_IDENTITY_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_USER_IDENTITY_TYPE>(
    E_USER_IDENTITY_TYPE_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::E_CLIENT_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_CLIENT_TYPE>() {
  return ::E_CLIENT_TYPE_descriptor();
}
template <> struct is_proto_enum< ::E_CHAT_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_CHAT_TYPE>() {
  return ::E_CHAT_TYPE_descriptor();
}
template <> struct is_proto_enum< ::E_USER_IDENTITY_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_USER_IDENTITY_TYPE>() {
  return ::E_USER_IDENTITY_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_enum_2eproto
