// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_msg.proto

#include "chat_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_chat_5fmsg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_msg_group_recv;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_5fmsg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_msg_p2p_recv;
}  // namespace protobuf_chat_5fmsg_2eproto
namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_errorinfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_msg_content;
}  // namespace protobuf_common_2eproto
namespace chat_msg {
class msg_p2p_sendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_p2p_send>
      _instance;
} _msg_p2p_send_default_instance_;
class msg_p2p_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_p2p_ack>
      _instance;
} _msg_p2p_ack_default_instance_;
class msg_p2p_recvDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_p2p_recv>
      _instance;
} _msg_p2p_recv_default_instance_;
class msg_group_sendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_group_send>
      _instance;
} _msg_group_send_default_instance_;
class msg_group_send_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_group_send_ack>
      _instance;
} _msg_group_send_ack_default_instance_;
class msg_group_recvDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_group_recv>
      _instance;
} _msg_group_recv_default_instance_;
class msg_group_recv_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_group_recv_ack>
      _instance;
} _msg_group_recv_ack_default_instance_;
class offline_msg_p2p_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_msg_p2p_req>
      _instance;
} _offline_msg_p2p_req_default_instance_;
class offline_msg_p2p_req_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_msg_p2p_req_ack>
      _instance;
} _offline_msg_p2p_req_ack_default_instance_;
class offline_msg_p2p_rspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_msg_p2p_rsp>
      _instance;
} _offline_msg_p2p_rsp_default_instance_;
class offline_msg_p2p_rsp_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_msg_p2p_rsp_ack>
      _instance;
} _offline_msg_p2p_rsp_ack_default_instance_;
class offline_msg_group_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_msg_group_req>
      _instance;
} _offline_msg_group_req_default_instance_;
class offline_msg_group_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_msg_group_ack>
      _instance;
} _offline_msg_group_ack_default_instance_;
class offline_msg_group_rspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_msg_group_rsp>
      _instance;
} _offline_msg_group_rsp_default_instance_;
class offline_msg_group_rsp_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<offline_msg_group_rsp_ack>
      _instance;
} _offline_msg_group_rsp_ack_default_instance_;
class service_controlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<service_control>
      _instance;
} _service_control_default_instance_;
class service_control_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<service_control_ack>
      _instance;
} _service_control_ack_default_instance_;
class personal_notifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<personal_notify>
      _instance;
} _personal_notify_default_instance_;
class group_notifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<group_notify>
      _instance;
} _group_notify_default_instance_;
}  // namespace chat_msg
namespace protobuf_chat_5fmsg_2eproto {
static void InitDefaultsmsg_p2p_send() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_msg_p2p_send_default_instance_;
    new (ptr) ::chat_msg::msg_p2p_send();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::msg_p2p_send::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_p2p_send =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_p2p_send}, {
      &protobuf_common_2eproto::scc_info_msg_content.base,}};

static void InitDefaultsmsg_p2p_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_msg_p2p_ack_default_instance_;
    new (ptr) ::chat_msg::msg_p2p_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::msg_p2p_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_msg_p2p_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsmsg_p2p_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,
      &protobuf_common_2eproto::scc_info_msg_content.base,}};

static void InitDefaultsmsg_p2p_recv() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_msg_p2p_recv_default_instance_;
    new (ptr) ::chat_msg::msg_p2p_recv();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::msg_p2p_recv::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_p2p_recv =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_p2p_recv}, {
      &protobuf_common_2eproto::scc_info_msg_content.base,}};

static void InitDefaultsmsg_group_send() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_msg_group_send_default_instance_;
    new (ptr) ::chat_msg::msg_group_send();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::msg_group_send::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_group_send =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_group_send}, {
      &protobuf_common_2eproto::scc_info_msg_content.base,}};

static void InitDefaultsmsg_group_send_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_msg_group_send_ack_default_instance_;
    new (ptr) ::chat_msg::msg_group_send_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::msg_group_send_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_msg_group_send_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsmsg_group_send_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,
      &protobuf_common_2eproto::scc_info_msg_content.base,}};

static void InitDefaultsmsg_group_recv() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_msg_group_recv_default_instance_;
    new (ptr) ::chat_msg::msg_group_recv();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::msg_group_recv::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_group_recv =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_group_recv}, {
      &protobuf_common_2eproto::scc_info_msg_content.base,}};

static void InitDefaultsmsg_group_recv_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_msg_group_recv_ack_default_instance_;
    new (ptr) ::chat_msg::msg_group_recv_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::msg_group_recv_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_group_recv_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_group_recv_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultsoffline_msg_p2p_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_offline_msg_p2p_req_default_instance_;
    new (ptr) ::chat_msg::offline_msg_p2p_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::offline_msg_p2p_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_offline_msg_p2p_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsoffline_msg_p2p_req}, {}};

static void InitDefaultsoffline_msg_p2p_req_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_offline_msg_p2p_req_ack_default_instance_;
    new (ptr) ::chat_msg::offline_msg_p2p_req_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::offline_msg_p2p_req_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_offline_msg_p2p_req_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsoffline_msg_p2p_req_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultsoffline_msg_p2p_rsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_offline_msg_p2p_rsp_default_instance_;
    new (ptr) ::chat_msg::offline_msg_p2p_rsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::offline_msg_p2p_rsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_offline_msg_p2p_rsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsoffline_msg_p2p_rsp}, {
      &protobuf_chat_5fmsg_2eproto::scc_info_msg_p2p_recv.base,}};

static void InitDefaultsoffline_msg_p2p_rsp_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_offline_msg_p2p_rsp_ack_default_instance_;
    new (ptr) ::chat_msg::offline_msg_p2p_rsp_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::offline_msg_p2p_rsp_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_offline_msg_p2p_rsp_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsoffline_msg_p2p_rsp_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultsoffline_msg_group_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_offline_msg_group_req_default_instance_;
    new (ptr) ::chat_msg::offline_msg_group_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::offline_msg_group_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_offline_msg_group_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsoffline_msg_group_req}, {}};

static void InitDefaultsoffline_msg_group_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_offline_msg_group_ack_default_instance_;
    new (ptr) ::chat_msg::offline_msg_group_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::offline_msg_group_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_offline_msg_group_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsoffline_msg_group_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultsoffline_msg_group_rsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_offline_msg_group_rsp_default_instance_;
    new (ptr) ::chat_msg::offline_msg_group_rsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::offline_msg_group_rsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_offline_msg_group_rsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsoffline_msg_group_rsp}, {
      &protobuf_chat_5fmsg_2eproto::scc_info_msg_group_recv.base,}};

static void InitDefaultsoffline_msg_group_rsp_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_offline_msg_group_rsp_ack_default_instance_;
    new (ptr) ::chat_msg::offline_msg_group_rsp_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::offline_msg_group_rsp_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_offline_msg_group_rsp_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsoffline_msg_group_rsp_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultsservice_control() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_service_control_default_instance_;
    new (ptr) ::chat_msg::service_control();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::service_control::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_service_control =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsservice_control}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultsservice_control_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_service_control_ack_default_instance_;
    new (ptr) ::chat_msg::service_control_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::service_control_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_service_control_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsservice_control_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultspersonal_notify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_personal_notify_default_instance_;
    new (ptr) ::chat_msg::personal_notify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::personal_notify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_personal_notify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspersonal_notify}, {}};

static void InitDefaultsgroup_notify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat_msg::_group_notify_default_instance_;
    new (ptr) ::chat_msg::group_notify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat_msg::group_notify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_group_notify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsgroup_notify}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_msg_p2p_send.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_p2p_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_p2p_recv.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_group_send.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_group_send_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_group_recv.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_group_recv_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_msg_p2p_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_msg_p2p_req_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_msg_p2p_rsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_msg_p2p_rsp_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_msg_group_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_msg_group_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_msg_group_rsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_offline_msg_group_rsp_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_service_control.base);
  ::google::protobuf::internal::InitSCC(&scc_info_service_control_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_personal_notify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_group_notify.base);
}

::google::protobuf::Metadata file_level_metadata[19];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_send, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_send, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_send, recv_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_send, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_send, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_send, receiver_type_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_ack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_ack, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_ack, send_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_ack, msg_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, send_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, user_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, send_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, send_nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, send_avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, receiver_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_p2p_recv, receiver_id_),
  3,
  4,
  5,
  6,
  0,
  1,
  7,
  2,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send, msg_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send_ack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send_ack, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send_ack, send_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_send_ack, msg_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv, group_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv, send_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv, send_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv, msg_),
  1,
  2,
  4,
  3,
  6,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv_ack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv_ack, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::msg_group_recv_ack, group_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req, msg_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req, send_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req, msg_tag_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req_ack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req_ack, send_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_req_ack, msg_id_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_rsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_rsp, msg_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_rsp, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_rsp, msg_tag_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_rsp_ack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_rsp_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_rsp_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_p2p_rsp_ack, msg_id_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_req, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_req, msg_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_req, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_req, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_req, msg_tag_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_ack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_ack, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_ack, msg_id_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp, msg_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp, msg_tag_),
  ~0u,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp_ack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp_ack, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::offline_msg_group_rsp_ack, group_id_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control, send_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control, recv_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control, c_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control, transfer_object_),
  2,
  3,
  0,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control_ack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::service_control_ack, msg_serial_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::personal_notify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::personal_notify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::personal_notify, imid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::group_notify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::group_notify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat_msg::group_notify, imid_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::chat_msg::msg_p2p_send)},
  { 13, 22, sizeof(::chat_msg::msg_p2p_ack)},
  { 26, 41, sizeof(::chat_msg::msg_p2p_recv)},
  { 51, 59, sizeof(::chat_msg::msg_group_send)},
  { 62, 71, sizeof(::chat_msg::msg_group_send_ack)},
  { 75, 87, sizeof(::chat_msg::msg_group_recv)},
  { 94, 102, sizeof(::chat_msg::msg_group_recv_ack)},
  { 105, 114, sizeof(::chat_msg::offline_msg_p2p_req)},
  { 118, 126, sizeof(::chat_msg::offline_msg_p2p_req_ack)},
  { 129, 137, sizeof(::chat_msg::offline_msg_p2p_rsp)},
  { 140, 147, sizeof(::chat_msg::offline_msg_p2p_rsp_ack)},
  { 149, 158, sizeof(::chat_msg::offline_msg_group_req)},
  { 162, 170, sizeof(::chat_msg::offline_msg_group_ack)},
  { 173, 182, sizeof(::chat_msg::offline_msg_group_rsp)},
  { 186, 194, sizeof(::chat_msg::offline_msg_group_rsp_ack)},
  { 197, 208, sizeof(::chat_msg::service_control)},
  { 214, 221, sizeof(::chat_msg::service_control_ack)},
  { 223, 229, sizeof(::chat_msg::personal_notify)},
  { 230, 236, sizeof(::chat_msg::group_notify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_msg_p2p_send_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_msg_p2p_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_msg_p2p_recv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_msg_group_send_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_msg_group_send_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_msg_group_recv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_msg_group_recv_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_offline_msg_p2p_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_offline_msg_p2p_req_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_offline_msg_p2p_rsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_offline_msg_p2p_rsp_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_offline_msg_group_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_offline_msg_group_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_offline_msg_group_rsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_offline_msg_group_rsp_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_service_control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_service_control_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_personal_notify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat_msg::_group_notify_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "chat_msg.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016chat_msg.proto\022\010chat_msg\032\014common.proto"
      "\"j\n\014msg_p2p_send\022\017\n\007recv_id\030\001 \002(\r\022\020\n\010msg"
      "_type\030\002 \002(\r\022 \n\003msg\030\003 \002(\0132\023.common.msg_co"
      "ntent\022\025\n\rreceiver_type\030\004 \001(\r\"t\n\013msg_p2p_"
      "ack\022 \n\005error\030\001 \002(\0132\021.common.errorinfo\022\016\n"
      "\006msg_id\030\002 \001(\004\022\021\n\tsend_time\030\003 \001(\004\022 \n\003msg\030"
      "\004 \001(\0132\023.common.msg_content\"\341\001\n\014msg_p2p_r"
      "ecv\022\017\n\007send_id\030\001 \002(\r\022\021\n\tuser_type\030\002 \002(\r\022"
      "\016\n\006msg_id\030\003 \002(\004\022\021\n\tsend_time\030\004 \002(\004\022\025\n\rse"
      "nd_nickname\030\005 \001(\014\022\023\n\013send_avatar\030\006 \001(\014\022\020"
      "\n\010msg_type\030\007 \002(\r\022 \n\003msg\030\010 \002(\0132\023.common.m"
      "sg_content\022\025\n\rreceiver_type\030\t \001(\r\022\023\n\013rec"
      "eiver_id\030\n \001(\r\"V\n\016msg_group_send\022\020\n\010grou"
      "p_id\030\001 \002(\r\022\020\n\010msg_type\030\002 \002(\r\022 \n\003msg\030\003 \002("
      "\0132\023.common.msg_content\"{\n\022msg_group_send"
      "_ack\022 \n\005error\030\001 \002(\0132\021.common.errorinfo\022\016"
      "\n\006msg_id\030\002 \001(\004\022\021\n\tsend_time\030\003 \001(\004\022 \n\003msg"
      "\030\004 \001(\0132\023.common.msg_content\"\236\001\n\016msg_grou"
      "p_recv\022\020\n\010group_id\030\001 \002(\r\022\022\n\ngroup_type\030\002"
      " \002(\r\022\017\n\007send_id\030\003 \002(\r\022\016\n\006msg_id\030\004 \002(\004\022\021\n"
      "\tsend_time\030\005 \002(\004\022\020\n\010msg_type\030\006 \002(\r\022 \n\003ms"
      "g\030\007 \002(\0132\023.common.msg_content\"X\n\022msg_grou"
      "p_recv_ack\022 \n\005error\030\001 \002(\0132\021.common.error"
      "info\022\016\n\006msg_id\030\002 \001(\004\022\020\n\010group_id\030\003 \001(\r\"Z"
      "\n\023offline_msg_p2p_req\022\021\n\tmsg_count\030\001 \001(\r"
      "\022\017\n\007send_id\030\002 \001(\r\022\016\n\006msg_id\030\003 \001(\004\022\017\n\007msg"
      "_tag\030\004 \001(\t\"\\\n\027offline_msg_p2p_req_ack\022 \n"
      "\005error\030\001 \002(\0132\021.common.errorinfo\022\017\n\007send_"
      "id\030\002 \001(\r\022\016\n\006msg_id\030\003 \001(\004\"_\n\023offline_msg_"
      "p2p_rsp\022(\n\010msg_list\030\001 \003(\0132\026.chat_msg.msg"
      "_p2p_recv\022\r\n\005total\030\002 \001(\r\022\017\n\007msg_tag\030\003 \001("
      "\t\"K\n\027offline_msg_p2p_rsp_ack\022 \n\005error\030\001 "
      "\002(\0132\021.common.errorinfo\022\016\n\006msg_id\030\002 \003(\004\"]"
      "\n\025offline_msg_group_req\022\021\n\tmsg_count\030\001 \002"
      "(\r\022\020\n\010group_id\030\002 \001(\r\022\016\n\006msg_id\030\003 \001(\004\022\017\n\007"
      "msg_tag\030\004 \001(\t\"[\n\025offline_msg_group_ack\022 "
      "\n\005error\030\001 \002(\0132\021.common.errorinfo\022\020\n\010grou"
      "p_id\030\002 \001(\r\022\016\n\006msg_id\030\003 \001(\004\"u\n\025offline_ms"
      "g_group_rsp\022*\n\010msg_list\030\001 \003(\0132\030.chat_msg"
      ".msg_group_recv\022\020\n\010group_id\030\002 \001(\r\022\r\n\005tot"
      "al\030\003 \001(\r\022\017\n\007msg_tag\030\004 \001(\t\"_\n\031offline_msg"
      "_group_rsp_ack\022 \n\005error\030\001 \002(\0132\021.common.e"
      "rrorinfo\022\016\n\006msg_id\030\002 \003(\004\022\020\n\010group_id\030\003 \001"
      "(\r\"\211\001\n\017service_control\022\017\n\007send_id\030\001 \001(\r\022"
      "\017\n\007recv_id\030\002 \001(\r\022\013\n\003msg\030\003 \001(\014\022\014\n\004c_id\030\004 "
      "\001(\r\022 \n\005error\030\005 \001(\0132\021.common.errorinfo\022\027\n"
      "\017transfer_object\030\006 \001(\r\"K\n\023service_contro"
      "l_ack\022 \n\005error\030\001 \002(\0132\021.common.errorinfo\022"
      "\022\n\nmsg_serial\030\002 \001(\004\"\037\n\017personal_notify\022\014"
      "\n\004imid\030\001 \001(\r\"\034\n\014group_notify\022\014\n\004imid\030\001 \001"
      "(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2002);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat_msg.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chat_5fmsg_2eproto
namespace chat_msg {

// ===================================================================

void msg_p2p_send::InitAsDefaultInstance() {
  ::chat_msg::_msg_p2p_send_default_instance_._instance.get_mutable()->msg_ = const_cast< ::common::msg_content*>(
      ::common::msg_content::internal_default_instance());
}
void msg_p2p_send::clear_msg() {
  if (msg_ != NULL) msg_->Clear();
  clear_has_msg();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_p2p_send::kRecvIdFieldNumber;
const int msg_p2p_send::kMsgTypeFieldNumber;
const int msg_p2p_send::kMsgFieldNumber;
const int msg_p2p_send::kReceiverTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_p2p_send::msg_p2p_send()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_msg_p2p_send.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.msg_p2p_send)
}
msg_p2p_send::msg_p2p_send(const msg_p2p_send& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::common::msg_content(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&recv_id_, &from.recv_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_type_) -
    reinterpret_cast<char*>(&recv_id_)) + sizeof(receiver_type_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.msg_p2p_send)
}

void msg_p2p_send::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_type_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(receiver_type_));
}

msg_p2p_send::~msg_p2p_send() {
  // @@protoc_insertion_point(destructor:chat_msg.msg_p2p_send)
  SharedDtor();
}

void msg_p2p_send::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void msg_p2p_send::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_p2p_send::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_p2p_send& msg_p2p_send::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_msg_p2p_send.base);
  return *internal_default_instance();
}


void msg_p2p_send::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.msg_p2p_send)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&recv_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receiver_type_) -
        reinterpret_cast<char*>(&recv_id_)) + sizeof(receiver_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_p2p_send::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.msg_p2p_send)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 recv_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_recv_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 msg_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.msg_content msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 receiver_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_receiver_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.msg_p2p_send)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.msg_p2p_send)
  return false;
#undef DO_
}

void msg_p2p_send::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.msg_p2p_send)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 recv_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recv_id(), output);
  }

  // required uint32 msg_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_type(), output);
  }

  // required .common.msg_content msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_msg(), output);
  }

  // optional uint32 receiver_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->receiver_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.msg_p2p_send)
}

::google::protobuf::uint8* msg_p2p_send::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.msg_p2p_send)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 recv_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recv_id(), target);
  }

  // required uint32 msg_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_type(), target);
  }

  // required .common.msg_content msg = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 receiver_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->receiver_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.msg_p2p_send)
  return target;
}

size_t msg_p2p_send::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat_msg.msg_p2p_send)
  size_t total_size = 0;

  if (has_msg()) {
    // required .common.msg_content msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (has_recv_id()) {
    // required uint32 recv_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recv_id());
  }

  if (has_msg_type()) {
    // required uint32 msg_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());
  }

  return total_size;
}
size_t msg_p2p_send::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.msg_p2p_send)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.msg_content msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);

    // required uint32 recv_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recv_id());

    // required uint32 msg_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 receiver_type = 4;
  if (has_receiver_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receiver_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_p2p_send::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.msg_p2p_send)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_p2p_send* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_p2p_send>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.msg_p2p_send)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.msg_p2p_send)
    MergeFrom(*source);
  }
}

void msg_p2p_send::MergeFrom(const msg_p2p_send& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.msg_p2p_send)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::common::msg_content::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      recv_id_ = from.recv_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_ = from.msg_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      receiver_type_ = from.receiver_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_p2p_send::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.msg_p2p_send)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_p2p_send::CopyFrom(const msg_p2p_send& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.msg_p2p_send)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_p2p_send::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void msg_p2p_send::Swap(msg_p2p_send* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_p2p_send::InternalSwap(msg_p2p_send* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(recv_id_, other->recv_id_);
  swap(msg_type_, other->msg_type_);
  swap(receiver_type_, other->receiver_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_p2p_send::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_p2p_ack::InitAsDefaultInstance() {
  ::chat_msg::_msg_p2p_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
  ::chat_msg::_msg_p2p_ack_default_instance_._instance.get_mutable()->msg_ = const_cast< ::common::msg_content*>(
      ::common::msg_content::internal_default_instance());
}
void msg_p2p_ack::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
void msg_p2p_ack::clear_msg() {
  if (msg_ != NULL) msg_->Clear();
  clear_has_msg();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_p2p_ack::kErrorFieldNumber;
const int msg_p2p_ack::kMsgIdFieldNumber;
const int msg_p2p_ack::kSendTimeFieldNumber;
const int msg_p2p_ack::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_p2p_ack::msg_p2p_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_msg_p2p_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.msg_p2p_ack)
}
msg_p2p_ack::msg_p2p_ack(const msg_p2p_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_msg()) {
    msg_ = new ::common::msg_content(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_time_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(send_time_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.msg_p2p_ack)
}

void msg_p2p_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_time_) -
      reinterpret_cast<char*>(&error_)) + sizeof(send_time_));
}

msg_p2p_ack::~msg_p2p_ack() {
  // @@protoc_insertion_point(destructor:chat_msg.msg_p2p_ack)
  SharedDtor();
}

void msg_p2p_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete msg_;
}

void msg_p2p_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_p2p_ack::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_p2p_ack& msg_p2p_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_msg_p2p_ack.base);
  return *internal_default_instance();
}


void msg_p2p_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.msg_p2p_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(msg_ != NULL);
      msg_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&msg_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_time_) -
        reinterpret_cast<char*>(&msg_id_)) + sizeof(send_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_p2p_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.msg_p2p_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 send_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.msg_content msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.msg_p2p_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.msg_p2p_ack)
  return false;
#undef DO_
}

void msg_p2p_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.msg_p2p_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // optional uint64 msg_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  // optional uint64 send_time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->send_time(), output);
  }

  // optional .common.msg_content msg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.msg_p2p_ack)
}

::google::protobuf::uint8* msg_p2p_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.msg_p2p_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // optional uint64 msg_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  // optional uint64 send_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->send_time(), target);
  }

  // optional .common.msg_content msg = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_msg(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.msg_p2p_ack)
  return target;
}

size_t msg_p2p_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.msg_p2p_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.errorinfo error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional .common.msg_content msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_);
    }

    // optional uint64 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint64 send_time = 3;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_p2p_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.msg_p2p_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_p2p_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_p2p_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.msg_p2p_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.msg_p2p_ack)
    MergeFrom(*source);
  }
}

void msg_p2p_ack::MergeFrom(const msg_p2p_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.msg_p2p_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_msg()->::common::msg_content::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000004u) {
      msg_id_ = from.msg_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      send_time_ = from.send_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_p2p_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.msg_p2p_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_p2p_ack::CopyFrom(const msg_p2p_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.msg_p2p_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_p2p_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void msg_p2p_ack::Swap(msg_p2p_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_p2p_ack::InternalSwap(msg_p2p_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(msg_, other->msg_);
  swap(msg_id_, other->msg_id_);
  swap(send_time_, other->send_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_p2p_ack::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_p2p_recv::InitAsDefaultInstance() {
  ::chat_msg::_msg_p2p_recv_default_instance_._instance.get_mutable()->msg_ = const_cast< ::common::msg_content*>(
      ::common::msg_content::internal_default_instance());
}
void msg_p2p_recv::clear_msg() {
  if (msg_ != NULL) msg_->Clear();
  clear_has_msg();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_p2p_recv::kSendIdFieldNumber;
const int msg_p2p_recv::kUserTypeFieldNumber;
const int msg_p2p_recv::kMsgIdFieldNumber;
const int msg_p2p_recv::kSendTimeFieldNumber;
const int msg_p2p_recv::kSendNicknameFieldNumber;
const int msg_p2p_recv::kSendAvatarFieldNumber;
const int msg_p2p_recv::kMsgTypeFieldNumber;
const int msg_p2p_recv::kMsgFieldNumber;
const int msg_p2p_recv::kReceiverTypeFieldNumber;
const int msg_p2p_recv::kReceiverIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_p2p_recv::msg_p2p_recv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_msg_p2p_recv.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.msg_p2p_recv)
}
msg_p2p_recv::msg_p2p_recv(const msg_p2p_recv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  send_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_send_nickname()) {
    send_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_nickname_);
  }
  send_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_send_avatar()) {
    send_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_avatar_);
  }
  if (from.has_msg()) {
    msg_ = new ::common::msg_content(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&send_id_, &from.send_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&send_id_)) + sizeof(receiver_id_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.msg_p2p_recv)
}

void msg_p2p_recv::SharedCtor() {
  send_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(receiver_id_));
}

msg_p2p_recv::~msg_p2p_recv() {
  // @@protoc_insertion_point(destructor:chat_msg.msg_p2p_recv)
  SharedDtor();
}

void msg_p2p_recv::SharedDtor() {
  send_nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msg_;
}

void msg_p2p_recv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_p2p_recv::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_p2p_recv& msg_p2p_recv::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_msg_p2p_recv.base);
  return *internal_default_instance();
}


void msg_p2p_recv::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.msg_p2p_recv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      send_nickname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      send_avatar_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(msg_ != NULL);
      msg_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&send_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_type_) -
        reinterpret_cast<char*>(&send_id_)) + sizeof(msg_type_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&receiver_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receiver_id_) -
        reinterpret_cast<char*>(&receiver_type_)) + sizeof(receiver_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_p2p_recv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.msg_p2p_recv)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 send_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_send_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 user_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 send_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes send_nickname = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes send_avatar = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 msg_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.msg_content msg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 receiver_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_receiver_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 receiver_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_receiver_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.msg_p2p_recv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.msg_p2p_recv)
  return false;
#undef DO_
}

void msg_p2p_recv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.msg_p2p_recv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 send_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->send_id(), output);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_type(), output);
  }

  // required uint64 msg_id = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  // required uint64 send_time = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->send_time(), output);
  }

  // optional bytes send_nickname = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->send_nickname(), output);
  }

  // optional bytes send_avatar = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->send_avatar(), output);
  }

  // required uint32 msg_type = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->msg_type(), output);
  }

  // required .common.msg_content msg = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_msg(), output);
  }

  // optional uint32 receiver_type = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->receiver_type(), output);
  }

  // optional uint32 receiver_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->receiver_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.msg_p2p_recv)
}

::google::protobuf::uint8* msg_p2p_recv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.msg_p2p_recv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 send_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->send_id(), target);
  }

  // required uint32 user_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_type(), target);
  }

  // required uint64 msg_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  // required uint64 send_time = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->send_time(), target);
  }

  // optional bytes send_nickname = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->send_nickname(), target);
  }

  // optional bytes send_avatar = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->send_avatar(), target);
  }

  // required uint32 msg_type = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->msg_type(), target);
  }

  // required .common.msg_content msg = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_msg(), deterministic, target);
  }

  // optional uint32 receiver_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->receiver_type(), target);
  }

  // optional uint32 receiver_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->receiver_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.msg_p2p_recv)
  return target;
}

size_t msg_p2p_recv::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat_msg.msg_p2p_recv)
  size_t total_size = 0;

  if (has_msg()) {
    // required .common.msg_content msg = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (has_send_id()) {
    // required uint32 send_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_id());
  }

  if (has_user_type()) {
    // required uint32 user_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_type());
  }

  if (has_msg_id()) {
    // required uint64 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());
  }

  if (has_send_time()) {
    // required uint64 send_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());
  }

  if (has_msg_type()) {
    // required uint32 msg_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());
  }

  return total_size;
}
size_t msg_p2p_recv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.msg_p2p_recv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000fc) ^ 0x000000fc) == 0) {  // All required fields are present.
    // required .common.msg_content msg = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);

    // required uint32 send_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_id());

    // required uint32 user_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_type());

    // required uint64 msg_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());

    // required uint64 send_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());

    // required uint32 msg_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes send_nickname = 5;
    if (has_send_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->send_nickname());
    }

    // optional bytes send_avatar = 6;
    if (has_send_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->send_avatar());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 receiver_type = 9;
    if (has_receiver_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_type());
    }

    // optional uint32 receiver_id = 10;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_p2p_recv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.msg_p2p_recv)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_p2p_recv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_p2p_recv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.msg_p2p_recv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.msg_p2p_recv)
    MergeFrom(*source);
  }
}

void msg_p2p_recv::MergeFrom(const msg_p2p_recv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.msg_p2p_recv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_send_nickname();
      send_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_nickname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_send_avatar();
      send_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_avatar_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_msg()->::common::msg_content::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000008u) {
      send_id_ = from.send_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      user_type_ = from.user_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      msg_id_ = from.msg_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      send_time_ = from.send_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      receiver_type_ = from.receiver_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      receiver_id_ = from.receiver_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_p2p_recv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.msg_p2p_recv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_p2p_recv::CopyFrom(const msg_p2p_recv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.msg_p2p_recv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_p2p_recv::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fc) != 0x000000fc) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void msg_p2p_recv::Swap(msg_p2p_recv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_p2p_recv::InternalSwap(msg_p2p_recv* other) {
  using std::swap;
  send_nickname_.Swap(&other->send_nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  send_avatar_.Swap(&other->send_avatar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_, other->msg_);
  swap(send_id_, other->send_id_);
  swap(user_type_, other->user_type_);
  swap(msg_id_, other->msg_id_);
  swap(send_time_, other->send_time_);
  swap(msg_type_, other->msg_type_);
  swap(receiver_type_, other->receiver_type_);
  swap(receiver_id_, other->receiver_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_p2p_recv::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_group_send::InitAsDefaultInstance() {
  ::chat_msg::_msg_group_send_default_instance_._instance.get_mutable()->msg_ = const_cast< ::common::msg_content*>(
      ::common::msg_content::internal_default_instance());
}
void msg_group_send::clear_msg() {
  if (msg_ != NULL) msg_->Clear();
  clear_has_msg();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_group_send::kGroupIdFieldNumber;
const int msg_group_send::kMsgTypeFieldNumber;
const int msg_group_send::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_group_send::msg_group_send()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_msg_group_send.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.msg_group_send)
}
msg_group_send::msg_group_send(const msg_group_send& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::common::msg_content(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.msg_group_send)
}

void msg_group_send::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(msg_type_));
}

msg_group_send::~msg_group_send() {
  // @@protoc_insertion_point(destructor:chat_msg.msg_group_send)
  SharedDtor();
}

void msg_group_send::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void msg_group_send::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_group_send::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_group_send& msg_group_send::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_msg_group_send.base);
  return *internal_default_instance();
}


void msg_group_send::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.msg_group_send)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_type_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(msg_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_group_send::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.msg_group_send)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 msg_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.msg_content msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.msg_group_send)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.msg_group_send)
  return false;
#undef DO_
}

void msg_group_send::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.msg_group_send)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 msg_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_type(), output);
  }

  // required .common.msg_content msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.msg_group_send)
}

::google::protobuf::uint8* msg_group_send::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.msg_group_send)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 msg_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_type(), target);
  }

  // required .common.msg_content msg = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_msg(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.msg_group_send)
  return target;
}

size_t msg_group_send::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat_msg.msg_group_send)
  size_t total_size = 0;

  if (has_msg()) {
    // required .common.msg_content msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (has_group_id()) {
    // required uint32 group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  if (has_msg_type()) {
    // required uint32 msg_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());
  }

  return total_size;
}
size_t msg_group_send::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.msg_group_send)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.msg_content msg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);

    // required uint32 group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

    // required uint32 msg_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_group_send::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.msg_group_send)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_group_send* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_group_send>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.msg_group_send)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.msg_group_send)
    MergeFrom(*source);
  }
}

void msg_group_send::MergeFrom(const msg_group_send& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.msg_group_send)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::common::msg_content::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_group_send::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.msg_group_send)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_group_send::CopyFrom(const msg_group_send& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.msg_group_send)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_group_send::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void msg_group_send::Swap(msg_group_send* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_group_send::InternalSwap(msg_group_send* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(group_id_, other->group_id_);
  swap(msg_type_, other->msg_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_group_send::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_group_send_ack::InitAsDefaultInstance() {
  ::chat_msg::_msg_group_send_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
  ::chat_msg::_msg_group_send_ack_default_instance_._instance.get_mutable()->msg_ = const_cast< ::common::msg_content*>(
      ::common::msg_content::internal_default_instance());
}
void msg_group_send_ack::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
void msg_group_send_ack::clear_msg() {
  if (msg_ != NULL) msg_->Clear();
  clear_has_msg();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_group_send_ack::kErrorFieldNumber;
const int msg_group_send_ack::kMsgIdFieldNumber;
const int msg_group_send_ack::kSendTimeFieldNumber;
const int msg_group_send_ack::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_group_send_ack::msg_group_send_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_msg_group_send_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.msg_group_send_ack)
}
msg_group_send_ack::msg_group_send_ack(const msg_group_send_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_msg()) {
    msg_ = new ::common::msg_content(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_time_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(send_time_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.msg_group_send_ack)
}

void msg_group_send_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_time_) -
      reinterpret_cast<char*>(&error_)) + sizeof(send_time_));
}

msg_group_send_ack::~msg_group_send_ack() {
  // @@protoc_insertion_point(destructor:chat_msg.msg_group_send_ack)
  SharedDtor();
}

void msg_group_send_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete msg_;
}

void msg_group_send_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_group_send_ack::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_group_send_ack& msg_group_send_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_msg_group_send_ack.base);
  return *internal_default_instance();
}


void msg_group_send_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.msg_group_send_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(msg_ != NULL);
      msg_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&msg_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_time_) -
        reinterpret_cast<char*>(&msg_id_)) + sizeof(send_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_group_send_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.msg_group_send_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 send_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.msg_content msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.msg_group_send_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.msg_group_send_ack)
  return false;
#undef DO_
}

void msg_group_send_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.msg_group_send_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // optional uint64 msg_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  // optional uint64 send_time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->send_time(), output);
  }

  // optional .common.msg_content msg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.msg_group_send_ack)
}

::google::protobuf::uint8* msg_group_send_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.msg_group_send_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // optional uint64 msg_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  // optional uint64 send_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->send_time(), target);
  }

  // optional .common.msg_content msg = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_msg(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.msg_group_send_ack)
  return target;
}

size_t msg_group_send_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.msg_group_send_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.errorinfo error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional .common.msg_content msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_);
    }

    // optional uint64 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint64 send_time = 3;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_group_send_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.msg_group_send_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_group_send_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_group_send_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.msg_group_send_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.msg_group_send_ack)
    MergeFrom(*source);
  }
}

void msg_group_send_ack::MergeFrom(const msg_group_send_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.msg_group_send_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_msg()->::common::msg_content::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000004u) {
      msg_id_ = from.msg_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      send_time_ = from.send_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_group_send_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.msg_group_send_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_group_send_ack::CopyFrom(const msg_group_send_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.msg_group_send_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_group_send_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void msg_group_send_ack::Swap(msg_group_send_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_group_send_ack::InternalSwap(msg_group_send_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(msg_, other->msg_);
  swap(msg_id_, other->msg_id_);
  swap(send_time_, other->send_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_group_send_ack::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_group_recv::InitAsDefaultInstance() {
  ::chat_msg::_msg_group_recv_default_instance_._instance.get_mutable()->msg_ = const_cast< ::common::msg_content*>(
      ::common::msg_content::internal_default_instance());
}
void msg_group_recv::clear_msg() {
  if (msg_ != NULL) msg_->Clear();
  clear_has_msg();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_group_recv::kGroupIdFieldNumber;
const int msg_group_recv::kGroupTypeFieldNumber;
const int msg_group_recv::kSendIdFieldNumber;
const int msg_group_recv::kMsgIdFieldNumber;
const int msg_group_recv::kSendTimeFieldNumber;
const int msg_group_recv::kMsgTypeFieldNumber;
const int msg_group_recv::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_group_recv::msg_group_recv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_msg_group_recv.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.msg_group_recv)
}
msg_group_recv::msg_group_recv(const msg_group_recv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::common::msg_content(*from.msg_);
  } else {
    msg_ = NULL;
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_time_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(send_time_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.msg_group_recv)
}

void msg_group_recv::SharedCtor() {
  ::memset(&msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_time_) -
      reinterpret_cast<char*>(&msg_)) + sizeof(send_time_));
}

msg_group_recv::~msg_group_recv() {
  // @@protoc_insertion_point(destructor:chat_msg.msg_group_recv)
  SharedDtor();
}

void msg_group_recv::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void msg_group_recv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_group_recv::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_group_recv& msg_group_recv::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_msg_group_recv.base);
  return *internal_default_instance();
}


void msg_group_recv::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.msg_group_recv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_time_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(send_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_group_recv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.msg_group_recv)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 group_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_group_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 send_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_send_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 msg_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 send_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 msg_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.msg_content msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.msg_group_recv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.msg_group_recv)
  return false;
#undef DO_
}

void msg_group_recv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.msg_group_recv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 group_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_type(), output);
  }

  // required uint32 send_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->send_id(), output);
  }

  // required uint64 msg_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msg_id(), output);
  }

  // required uint64 send_time = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->send_time(), output);
  }

  // required uint32 msg_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->msg_type(), output);
  }

  // required .common.msg_content msg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.msg_group_recv)
}

::google::protobuf::uint8* msg_group_recv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.msg_group_recv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 group_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_type(), target);
  }

  // required uint32 send_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->send_id(), target);
  }

  // required uint64 msg_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msg_id(), target);
  }

  // required uint64 send_time = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->send_time(), target);
  }

  // required uint32 msg_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->msg_type(), target);
  }

  // required .common.msg_content msg = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_msg(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.msg_group_recv)
  return target;
}

size_t msg_group_recv::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chat_msg.msg_group_recv)
  size_t total_size = 0;

  if (has_msg()) {
    // required .common.msg_content msg = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (has_group_id()) {
    // required uint32 group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  if (has_group_type()) {
    // required uint32 group_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_type());
  }

  if (has_msg_id()) {
    // required uint64 msg_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());
  }

  if (has_send_id()) {
    // required uint32 send_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_id());
  }

  if (has_msg_type()) {
    // required uint32 msg_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());
  }

  if (has_send_time()) {
    // required uint64 send_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());
  }

  return total_size;
}
size_t msg_group_recv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.msg_group_recv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .common.msg_content msg = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *msg_);

    // required uint32 group_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());

    // required uint32 group_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_type());

    // required uint64 msg_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());

    // required uint32 send_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_id());

    // required uint32 msg_type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());

    // required uint64 send_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_group_recv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.msg_group_recv)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_group_recv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_group_recv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.msg_group_recv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.msg_group_recv)
    MergeFrom(*source);
  }
}

void msg_group_recv::MergeFrom(const msg_group_recv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.msg_group_recv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_msg()->::common::msg_content::MergeFrom(from.msg());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      group_type_ = from.group_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      msg_id_ = from.msg_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      send_id_ = from.send_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      msg_type_ = from.msg_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      send_time_ = from.send_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_group_recv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.msg_group_recv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_group_recv::CopyFrom(const msg_group_recv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.msg_group_recv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_group_recv::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_msg()) {
    if (!this->msg_->IsInitialized()) return false;
  }
  return true;
}

void msg_group_recv::Swap(msg_group_recv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_group_recv::InternalSwap(msg_group_recv* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(group_id_, other->group_id_);
  swap(group_type_, other->group_type_);
  swap(msg_id_, other->msg_id_);
  swap(send_id_, other->send_id_);
  swap(msg_type_, other->msg_type_);
  swap(send_time_, other->send_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_group_recv::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_group_recv_ack::InitAsDefaultInstance() {
  ::chat_msg::_msg_group_recv_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void msg_group_recv_ack::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_group_recv_ack::kErrorFieldNumber;
const int msg_group_recv_ack::kMsgIdFieldNumber;
const int msg_group_recv_ack::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_group_recv_ack::msg_group_recv_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_msg_group_recv_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.msg_group_recv_ack)
}
msg_group_recv_ack::msg_group_recv_ack(const msg_group_recv_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.msg_group_recv_ack)
}

void msg_group_recv_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(group_id_));
}

msg_group_recv_ack::~msg_group_recv_ack() {
  // @@protoc_insertion_point(destructor:chat_msg.msg_group_recv_ack)
  SharedDtor();
}

void msg_group_recv_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void msg_group_recv_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_group_recv_ack::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_group_recv_ack& msg_group_recv_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_msg_group_recv_ack.base);
  return *internal_default_instance();
}


void msg_group_recv_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.msg_group_recv_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&msg_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_id_) -
        reinterpret_cast<char*>(&msg_id_)) + sizeof(group_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool msg_group_recv_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.msg_group_recv_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.msg_group_recv_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.msg_group_recv_ack)
  return false;
#undef DO_
}

void msg_group_recv_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.msg_group_recv_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // optional uint64 msg_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  // optional uint32 group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.msg_group_recv_ack)
}

::google::protobuf::uint8* msg_group_recv_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.msg_group_recv_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // optional uint64 msg_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  // optional uint32 group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.msg_group_recv_ack)
  return target;
}

size_t msg_group_recv_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.msg_group_recv_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.errorinfo error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional uint64 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint32 group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_group_recv_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.msg_group_recv_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_group_recv_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_group_recv_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.msg_group_recv_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.msg_group_recv_ack)
    MergeFrom(*source);
  }
}

void msg_group_recv_ack::MergeFrom(const msg_group_recv_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.msg_group_recv_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_id_ = from.msg_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void msg_group_recv_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.msg_group_recv_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_group_recv_ack::CopyFrom(const msg_group_recv_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.msg_group_recv_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_group_recv_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void msg_group_recv_ack::Swap(msg_group_recv_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_group_recv_ack::InternalSwap(msg_group_recv_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(msg_id_, other->msg_id_);
  swap(group_id_, other->group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_group_recv_ack::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_msg_p2p_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_msg_p2p_req::kMsgCountFieldNumber;
const int offline_msg_p2p_req::kSendIdFieldNumber;
const int offline_msg_p2p_req::kMsgIdFieldNumber;
const int offline_msg_p2p_req::kMsgTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_msg_p2p_req::offline_msg_p2p_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_p2p_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.offline_msg_p2p_req)
}
offline_msg_p2p_req::offline_msg_p2p_req(const offline_msg_p2p_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_tag()) {
    msg_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_tag_);
  }
  ::memcpy(&msg_count_, &from.msg_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&msg_count_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.offline_msg_p2p_req)
}

void offline_msg_p2p_req::SharedCtor() {
  msg_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&msg_count_)) + sizeof(msg_id_));
}

offline_msg_p2p_req::~offline_msg_p2p_req() {
  // @@protoc_insertion_point(destructor:chat_msg.offline_msg_p2p_req)
  SharedDtor();
}

void offline_msg_p2p_req::SharedDtor() {
  msg_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void offline_msg_p2p_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_msg_p2p_req::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_msg_p2p_req& offline_msg_p2p_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_p2p_req.base);
  return *internal_default_instance();
}


void offline_msg_p2p_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.offline_msg_p2p_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_tag_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&msg_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_id_) -
        reinterpret_cast<char*>(&msg_count_)) + sizeof(msg_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool offline_msg_p2p_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.offline_msg_p2p_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msg_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_msg_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 send_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_send_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_msg.offline_msg_p2p_req.msg_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.offline_msg_p2p_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.offline_msg_p2p_req)
  return false;
#undef DO_
}

void offline_msg_p2p_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.offline_msg_p2p_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_count = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_count(), output);
  }

  // optional uint32 send_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_id(), output);
  }

  // optional uint64 msg_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  // optional string msg_tag = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_msg.offline_msg_p2p_req.msg_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.offline_msg_p2p_req)
}

::google::protobuf::uint8* offline_msg_p2p_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.offline_msg_p2p_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_count(), target);
  }

  // optional uint32 send_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_id(), target);
  }

  // optional uint64 msg_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  // optional string msg_tag = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_msg.offline_msg_p2p_req.msg_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.offline_msg_p2p_req)
  return target;
}

size_t offline_msg_p2p_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.offline_msg_p2p_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string msg_tag = 4;
    if (has_msg_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_tag());
    }

    // optional uint32 msg_count = 1;
    if (has_msg_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_count());
    }

    // optional uint32 send_id = 2;
    if (has_send_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_id());
    }

    // optional uint64 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_msg_p2p_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.offline_msg_p2p_req)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_msg_p2p_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_msg_p2p_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.offline_msg_p2p_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.offline_msg_p2p_req)
    MergeFrom(*source);
  }
}

void offline_msg_p2p_req::MergeFrom(const offline_msg_p2p_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.offline_msg_p2p_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg_tag();
      msg_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      msg_count_ = from.msg_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_id_ = from.send_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void offline_msg_p2p_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.offline_msg_p2p_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_msg_p2p_req::CopyFrom(const offline_msg_p2p_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.offline_msg_p2p_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_msg_p2p_req::IsInitialized() const {
  return true;
}

void offline_msg_p2p_req::Swap(offline_msg_p2p_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_msg_p2p_req::InternalSwap(offline_msg_p2p_req* other) {
  using std::swap;
  msg_tag_.Swap(&other->msg_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_count_, other->msg_count_);
  swap(send_id_, other->send_id_);
  swap(msg_id_, other->msg_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_msg_p2p_req::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_msg_p2p_req_ack::InitAsDefaultInstance() {
  ::chat_msg::_offline_msg_p2p_req_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void offline_msg_p2p_req_ack::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_msg_p2p_req_ack::kErrorFieldNumber;
const int offline_msg_p2p_req_ack::kSendIdFieldNumber;
const int offline_msg_p2p_req_ack::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_msg_p2p_req_ack::offline_msg_p2p_req_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_p2p_req_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.offline_msg_p2p_req_ack)
}
offline_msg_p2p_req_ack::offline_msg_p2p_req_ack(const offline_msg_p2p_req_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_id_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(send_id_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.offline_msg_p2p_req_ack)
}

void offline_msg_p2p_req_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(send_id_));
}

offline_msg_p2p_req_ack::~offline_msg_p2p_req_ack() {
  // @@protoc_insertion_point(destructor:chat_msg.offline_msg_p2p_req_ack)
  SharedDtor();
}

void offline_msg_p2p_req_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void offline_msg_p2p_req_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_msg_p2p_req_ack::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_msg_p2p_req_ack& offline_msg_p2p_req_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_p2p_req_ack.base);
  return *internal_default_instance();
}


void offline_msg_p2p_req_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.offline_msg_p2p_req_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&msg_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_id_) -
        reinterpret_cast<char*>(&msg_id_)) + sizeof(send_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool offline_msg_p2p_req_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.offline_msg_p2p_req_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 send_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_send_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.offline_msg_p2p_req_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.offline_msg_p2p_req_ack)
  return false;
#undef DO_
}

void offline_msg_p2p_req_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.offline_msg_p2p_req_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // optional uint32 send_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_id(), output);
  }

  // optional uint64 msg_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.offline_msg_p2p_req_ack)
}

::google::protobuf::uint8* offline_msg_p2p_req_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.offline_msg_p2p_req_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // optional uint32 send_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_id(), target);
  }

  // optional uint64 msg_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.offline_msg_p2p_req_ack)
  return target;
}

size_t offline_msg_p2p_req_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.offline_msg_p2p_req_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.errorinfo error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional uint64 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint32 send_id = 2;
    if (has_send_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_msg_p2p_req_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.offline_msg_p2p_req_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_msg_p2p_req_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_msg_p2p_req_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.offline_msg_p2p_req_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.offline_msg_p2p_req_ack)
    MergeFrom(*source);
  }
}

void offline_msg_p2p_req_ack::MergeFrom(const offline_msg_p2p_req_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.offline_msg_p2p_req_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_id_ = from.msg_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_id_ = from.send_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void offline_msg_p2p_req_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.offline_msg_p2p_req_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_msg_p2p_req_ack::CopyFrom(const offline_msg_p2p_req_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.offline_msg_p2p_req_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_msg_p2p_req_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void offline_msg_p2p_req_ack::Swap(offline_msg_p2p_req_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_msg_p2p_req_ack::InternalSwap(offline_msg_p2p_req_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(msg_id_, other->msg_id_);
  swap(send_id_, other->send_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_msg_p2p_req_ack::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_msg_p2p_rsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_msg_p2p_rsp::kMsgListFieldNumber;
const int offline_msg_p2p_rsp::kTotalFieldNumber;
const int offline_msg_p2p_rsp::kMsgTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_msg_p2p_rsp::offline_msg_p2p_rsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_p2p_rsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.offline_msg_p2p_rsp)
}
offline_msg_p2p_rsp::offline_msg_p2p_rsp(const offline_msg_p2p_rsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_tag()) {
    msg_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_tag_);
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:chat_msg.offline_msg_p2p_rsp)
}

void offline_msg_p2p_rsp::SharedCtor() {
  msg_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = 0u;
}

offline_msg_p2p_rsp::~offline_msg_p2p_rsp() {
  // @@protoc_insertion_point(destructor:chat_msg.offline_msg_p2p_rsp)
  SharedDtor();
}

void offline_msg_p2p_rsp::SharedDtor() {
  msg_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void offline_msg_p2p_rsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_msg_p2p_rsp::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_msg_p2p_rsp& offline_msg_p2p_rsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_p2p_rsp.base);
  return *internal_default_instance();
}


void offline_msg_p2p_rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.offline_msg_p2p_rsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_tag_.ClearNonDefaultToEmptyNoArena();
  }
  total_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool offline_msg_p2p_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.offline_msg_p2p_rsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chat_msg.msg_p2p_recv msg_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_msg.offline_msg_p2p_rsp.msg_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.offline_msg_p2p_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.offline_msg_p2p_rsp)
  return false;
#undef DO_
}

void offline_msg_p2p_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.offline_msg_p2p_rsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat_msg.msg_p2p_recv msg_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->msg_list(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total(), output);
  }

  // optional string msg_tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_msg.offline_msg_p2p_rsp.msg_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.offline_msg_p2p_rsp)
}

::google::protobuf::uint8* offline_msg_p2p_rsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.offline_msg_p2p_rsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat_msg.msg_p2p_recv msg_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->msg_list(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total(), target);
  }

  // optional string msg_tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_msg.offline_msg_p2p_rsp.msg_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.offline_msg_p2p_rsp)
  return target;
}

size_t offline_msg_p2p_rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.offline_msg_p2p_rsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .chat_msg.msg_p2p_recv msg_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->msg_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->msg_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string msg_tag = 3;
    if (has_msg_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_tag());
    }

    // optional uint32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_msg_p2p_rsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.offline_msg_p2p_rsp)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_msg_p2p_rsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_msg_p2p_rsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.offline_msg_p2p_rsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.offline_msg_p2p_rsp)
    MergeFrom(*source);
  }
}

void offline_msg_p2p_rsp::MergeFrom(const offline_msg_p2p_rsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.offline_msg_p2p_rsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg_tag();
      msg_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      total_ = from.total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void offline_msg_p2p_rsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.offline_msg_p2p_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_msg_p2p_rsp::CopyFrom(const offline_msg_p2p_rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.offline_msg_p2p_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_msg_p2p_rsp::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->msg_list())) return false;
  return true;
}

void offline_msg_p2p_rsp::Swap(offline_msg_p2p_rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_msg_p2p_rsp::InternalSwap(offline_msg_p2p_rsp* other) {
  using std::swap;
  CastToBase(&msg_list_)->InternalSwap(CastToBase(&other->msg_list_));
  msg_tag_.Swap(&other->msg_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_msg_p2p_rsp::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_msg_p2p_rsp_ack::InitAsDefaultInstance() {
  ::chat_msg::_offline_msg_p2p_rsp_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void offline_msg_p2p_rsp_ack::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_msg_p2p_rsp_ack::kErrorFieldNumber;
const int offline_msg_p2p_rsp_ack::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_msg_p2p_rsp_ack::offline_msg_p2p_rsp_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_p2p_rsp_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.offline_msg_p2p_rsp_ack)
}
offline_msg_p2p_rsp_ack::offline_msg_p2p_rsp_ack(const offline_msg_p2p_rsp_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      msg_id_(from.msg_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chat_msg.offline_msg_p2p_rsp_ack)
}

void offline_msg_p2p_rsp_ack::SharedCtor() {
  error_ = NULL;
}

offline_msg_p2p_rsp_ack::~offline_msg_p2p_rsp_ack() {
  // @@protoc_insertion_point(destructor:chat_msg.offline_msg_p2p_rsp_ack)
  SharedDtor();
}

void offline_msg_p2p_rsp_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void offline_msg_p2p_rsp_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_msg_p2p_rsp_ack::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_msg_p2p_rsp_ack& offline_msg_p2p_rsp_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_p2p_rsp_ack.base);
  return *internal_default_instance();
}


void offline_msg_p2p_rsp_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.offline_msg_p2p_rsp_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool offline_msg_p2p_rsp_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.offline_msg_p2p_rsp_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 msg_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_msg_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_msg_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.offline_msg_p2p_rsp_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.offline_msg_p2p_rsp_ack)
  return false;
#undef DO_
}

void offline_msg_p2p_rsp_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.offline_msg_p2p_rsp_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // repeated uint64 msg_id = 2;
  for (int i = 0, n = this->msg_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->msg_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.offline_msg_p2p_rsp_ack)
}

::google::protobuf::uint8* offline_msg_p2p_rsp_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.offline_msg_p2p_rsp_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // repeated uint64 msg_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->msg_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.offline_msg_p2p_rsp_ack)
  return target;
}

size_t offline_msg_p2p_rsp_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.offline_msg_p2p_rsp_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.errorinfo error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }
  // repeated uint64 msg_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->msg_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->msg_id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_msg_p2p_rsp_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.offline_msg_p2p_rsp_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_msg_p2p_rsp_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_msg_p2p_rsp_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.offline_msg_p2p_rsp_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.offline_msg_p2p_rsp_ack)
    MergeFrom(*source);
  }
}

void offline_msg_p2p_rsp_ack::MergeFrom(const offline_msg_p2p_rsp_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.offline_msg_p2p_rsp_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_id_.MergeFrom(from.msg_id_);
  if (from.has_error()) {
    mutable_error()->::common::errorinfo::MergeFrom(from.error());
  }
}

void offline_msg_p2p_rsp_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.offline_msg_p2p_rsp_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_msg_p2p_rsp_ack::CopyFrom(const offline_msg_p2p_rsp_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.offline_msg_p2p_rsp_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_msg_p2p_rsp_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void offline_msg_p2p_rsp_ack::Swap(offline_msg_p2p_rsp_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_msg_p2p_rsp_ack::InternalSwap(offline_msg_p2p_rsp_ack* other) {
  using std::swap;
  msg_id_.InternalSwap(&other->msg_id_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_msg_p2p_rsp_ack::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_msg_group_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_msg_group_req::kMsgCountFieldNumber;
const int offline_msg_group_req::kGroupIdFieldNumber;
const int offline_msg_group_req::kMsgIdFieldNumber;
const int offline_msg_group_req::kMsgTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_msg_group_req::offline_msg_group_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_group_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.offline_msg_group_req)
}
offline_msg_group_req::offline_msg_group_req(const offline_msg_group_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_tag()) {
    msg_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_tag_);
  }
  ::memcpy(&msg_count_, &from.msg_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&msg_count_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.offline_msg_group_req)
}

void offline_msg_group_req::SharedCtor() {
  msg_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&msg_count_)) + sizeof(msg_id_));
}

offline_msg_group_req::~offline_msg_group_req() {
  // @@protoc_insertion_point(destructor:chat_msg.offline_msg_group_req)
  SharedDtor();
}

void offline_msg_group_req::SharedDtor() {
  msg_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void offline_msg_group_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_msg_group_req::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_msg_group_req& offline_msg_group_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_group_req.base);
  return *internal_default_instance();
}


void offline_msg_group_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.offline_msg_group_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_tag_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&msg_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_id_) -
        reinterpret_cast<char*>(&msg_count_)) + sizeof(msg_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool offline_msg_group_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.offline_msg_group_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msg_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_msg_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_msg.offline_msg_group_req.msg_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.offline_msg_group_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.offline_msg_group_req)
  return false;
#undef DO_
}

void offline_msg_group_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.offline_msg_group_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 msg_count = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_count(), output);
  }

  // optional uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional uint64 msg_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  // optional string msg_tag = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_msg.offline_msg_group_req.msg_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.offline_msg_group_req)
}

::google::protobuf::uint8* offline_msg_group_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.offline_msg_group_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 msg_count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_count(), target);
  }

  // optional uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // optional uint64 msg_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  // optional string msg_tag = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_msg.offline_msg_group_req.msg_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.offline_msg_group_req)
  return target;
}

size_t offline_msg_group_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.offline_msg_group_req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 msg_count = 1;
  if (has_msg_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_count());
  }
  // optional string msg_tag = 4;
  if (has_msg_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_tag());
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint64 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_msg_group_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.offline_msg_group_req)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_msg_group_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_msg_group_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.offline_msg_group_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.offline_msg_group_req)
    MergeFrom(*source);
  }
}

void offline_msg_group_req::MergeFrom(const offline_msg_group_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.offline_msg_group_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg_tag();
      msg_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      msg_count_ = from.msg_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void offline_msg_group_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.offline_msg_group_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_msg_group_req::CopyFrom(const offline_msg_group_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.offline_msg_group_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_msg_group_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void offline_msg_group_req::Swap(offline_msg_group_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_msg_group_req::InternalSwap(offline_msg_group_req* other) {
  using std::swap;
  msg_tag_.Swap(&other->msg_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_count_, other->msg_count_);
  swap(group_id_, other->group_id_);
  swap(msg_id_, other->msg_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_msg_group_req::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_msg_group_ack::InitAsDefaultInstance() {
  ::chat_msg::_offline_msg_group_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void offline_msg_group_ack::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_msg_group_ack::kErrorFieldNumber;
const int offline_msg_group_ack::kGroupIdFieldNumber;
const int offline_msg_group_ack::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_msg_group_ack::offline_msg_group_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_group_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.offline_msg_group_ack)
}
offline_msg_group_ack::offline_msg_group_ack(const offline_msg_group_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.offline_msg_group_ack)
}

void offline_msg_group_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(group_id_));
}

offline_msg_group_ack::~offline_msg_group_ack() {
  // @@protoc_insertion_point(destructor:chat_msg.offline_msg_group_ack)
  SharedDtor();
}

void offline_msg_group_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void offline_msg_group_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_msg_group_ack::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_msg_group_ack& offline_msg_group_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_group_ack.base);
  return *internal_default_instance();
}


void offline_msg_group_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.offline_msg_group_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&msg_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_id_) -
        reinterpret_cast<char*>(&msg_id_)) + sizeof(group_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool offline_msg_group_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.offline_msg_group_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_msg_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.offline_msg_group_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.offline_msg_group_ack)
  return false;
#undef DO_
}

void offline_msg_group_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.offline_msg_group_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // optional uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional uint64 msg_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.offline_msg_group_ack)
}

::google::protobuf::uint8* offline_msg_group_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.offline_msg_group_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // optional uint32 group_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // optional uint64 msg_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.offline_msg_group_ack)
  return target;
}

size_t offline_msg_group_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.offline_msg_group_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.errorinfo error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional uint64 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_msg_group_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.offline_msg_group_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_msg_group_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_msg_group_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.offline_msg_group_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.offline_msg_group_ack)
    MergeFrom(*source);
  }
}

void offline_msg_group_ack::MergeFrom(const offline_msg_group_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.offline_msg_group_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_id_ = from.msg_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void offline_msg_group_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.offline_msg_group_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_msg_group_ack::CopyFrom(const offline_msg_group_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.offline_msg_group_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_msg_group_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void offline_msg_group_ack::Swap(offline_msg_group_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_msg_group_ack::InternalSwap(offline_msg_group_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(msg_id_, other->msg_id_);
  swap(group_id_, other->group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_msg_group_ack::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_msg_group_rsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_msg_group_rsp::kMsgListFieldNumber;
const int offline_msg_group_rsp::kGroupIdFieldNumber;
const int offline_msg_group_rsp::kTotalFieldNumber;
const int offline_msg_group_rsp::kMsgTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_msg_group_rsp::offline_msg_group_rsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_group_rsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.offline_msg_group_rsp)
}
offline_msg_group_rsp::offline_msg_group_rsp(const offline_msg_group_rsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_tag()) {
    msg_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_tag_);
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.offline_msg_group_rsp)
}

void offline_msg_group_rsp::SharedCtor() {
  msg_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(total_));
}

offline_msg_group_rsp::~offline_msg_group_rsp() {
  // @@protoc_insertion_point(destructor:chat_msg.offline_msg_group_rsp)
  SharedDtor();
}

void offline_msg_group_rsp::SharedDtor() {
  msg_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void offline_msg_group_rsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_msg_group_rsp::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_msg_group_rsp& offline_msg_group_rsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_group_rsp.base);
  return *internal_default_instance();
}


void offline_msg_group_rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.offline_msg_group_rsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_tag_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(total_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool offline_msg_group_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.offline_msg_group_rsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chat_msg.msg_group_recv msg_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chat_msg.offline_msg_group_rsp.msg_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.offline_msg_group_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.offline_msg_group_rsp)
  return false;
#undef DO_
}

void offline_msg_group_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.offline_msg_group_rsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat_msg.msg_group_recv msg_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->msg_list(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // optional uint32 total = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total(), output);
  }

  // optional string msg_tag = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_msg.offline_msg_group_rsp.msg_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.offline_msg_group_rsp)
}

::google::protobuf::uint8* offline_msg_group_rsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.offline_msg_group_rsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat_msg.msg_group_recv msg_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->msg_list(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // optional uint32 total = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total(), target);
  }

  // optional string msg_tag = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_tag().data(), static_cast<int>(this->msg_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chat_msg.offline_msg_group_rsp.msg_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.offline_msg_group_rsp)
  return target;
}

size_t offline_msg_group_rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.offline_msg_group_rsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .chat_msg.msg_group_recv msg_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->msg_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->msg_list(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string msg_tag = 4;
    if (has_msg_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_tag());
    }

    // optional uint32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // optional uint32 total = 3;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_msg_group_rsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.offline_msg_group_rsp)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_msg_group_rsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_msg_group_rsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.offline_msg_group_rsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.offline_msg_group_rsp)
    MergeFrom(*source);
  }
}

void offline_msg_group_rsp::MergeFrom(const offline_msg_group_rsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.offline_msg_group_rsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg_tag();
      msg_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_ = from.total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void offline_msg_group_rsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.offline_msg_group_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_msg_group_rsp::CopyFrom(const offline_msg_group_rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.offline_msg_group_rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_msg_group_rsp::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->msg_list())) return false;
  return true;
}

void offline_msg_group_rsp::Swap(offline_msg_group_rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_msg_group_rsp::InternalSwap(offline_msg_group_rsp* other) {
  using std::swap;
  CastToBase(&msg_list_)->InternalSwap(CastToBase(&other->msg_list_));
  msg_tag_.Swap(&other->msg_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_id_, other->group_id_);
  swap(total_, other->total_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_msg_group_rsp::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void offline_msg_group_rsp_ack::InitAsDefaultInstance() {
  ::chat_msg::_offline_msg_group_rsp_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void offline_msg_group_rsp_ack::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int offline_msg_group_rsp_ack::kErrorFieldNumber;
const int offline_msg_group_rsp_ack::kMsgIdFieldNumber;
const int offline_msg_group_rsp_ack::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

offline_msg_group_rsp_ack::offline_msg_group_rsp_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_group_rsp_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.offline_msg_group_rsp_ack)
}
offline_msg_group_rsp_ack::offline_msg_group_rsp_ack(const offline_msg_group_rsp_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      msg_id_(from.msg_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:chat_msg.offline_msg_group_rsp_ack)
}

void offline_msg_group_rsp_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(group_id_));
}

offline_msg_group_rsp_ack::~offline_msg_group_rsp_ack() {
  // @@protoc_insertion_point(destructor:chat_msg.offline_msg_group_rsp_ack)
  SharedDtor();
}

void offline_msg_group_rsp_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void offline_msg_group_rsp_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* offline_msg_group_rsp_ack::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const offline_msg_group_rsp_ack& offline_msg_group_rsp_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_offline_msg_group_rsp_ack.base);
  return *internal_default_instance();
}


void offline_msg_group_rsp_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.offline_msg_group_rsp_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool offline_msg_group_rsp_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.offline_msg_group_rsp_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 msg_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_msg_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_msg_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.offline_msg_group_rsp_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.offline_msg_group_rsp_ack)
  return false;
#undef DO_
}

void offline_msg_group_rsp_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.offline_msg_group_rsp_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // repeated uint64 msg_id = 2;
  for (int i = 0, n = this->msg_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->msg_id(i), output);
  }

  // optional uint32 group_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.offline_msg_group_rsp_ack)
}

::google::protobuf::uint8* offline_msg_group_rsp_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.offline_msg_group_rsp_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // repeated uint64 msg_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->msg_id_, target);

  // optional uint32 group_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.offline_msg_group_rsp_ack)
  return target;
}

size_t offline_msg_group_rsp_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.offline_msg_group_rsp_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.errorinfo error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }
  // repeated uint64 msg_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->msg_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->msg_id_size());
    total_size += data_size;
  }

  // optional uint32 group_id = 3;
  if (has_group_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void offline_msg_group_rsp_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.offline_msg_group_rsp_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const offline_msg_group_rsp_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const offline_msg_group_rsp_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.offline_msg_group_rsp_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.offline_msg_group_rsp_ack)
    MergeFrom(*source);
  }
}

void offline_msg_group_rsp_ack::MergeFrom(const offline_msg_group_rsp_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.offline_msg_group_rsp_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_id_.MergeFrom(from.msg_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void offline_msg_group_rsp_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.offline_msg_group_rsp_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offline_msg_group_rsp_ack::CopyFrom(const offline_msg_group_rsp_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.offline_msg_group_rsp_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offline_msg_group_rsp_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void offline_msg_group_rsp_ack::Swap(offline_msg_group_rsp_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void offline_msg_group_rsp_ack::InternalSwap(offline_msg_group_rsp_ack* other) {
  using std::swap;
  msg_id_.InternalSwap(&other->msg_id_);
  swap(error_, other->error_);
  swap(group_id_, other->group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata offline_msg_group_rsp_ack::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void service_control::InitAsDefaultInstance() {
  ::chat_msg::_service_control_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void service_control::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int service_control::kSendIdFieldNumber;
const int service_control::kRecvIdFieldNumber;
const int service_control::kMsgFieldNumber;
const int service_control::kCIdFieldNumber;
const int service_control::kErrorFieldNumber;
const int service_control::kTransferObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

service_control::service_control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_service_control.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.service_control)
}
service_control::service_control(const service_control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&send_id_, &from.send_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&transfer_object_) -
    reinterpret_cast<char*>(&send_id_)) + sizeof(transfer_object_));
  // @@protoc_insertion_point(copy_constructor:chat_msg.service_control)
}

void service_control::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_object_) -
      reinterpret_cast<char*>(&error_)) + sizeof(transfer_object_));
}

service_control::~service_control() {
  // @@protoc_insertion_point(destructor:chat_msg.service_control)
  SharedDtor();
}

void service_control::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void service_control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* service_control::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const service_control& service_control::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_service_control.base);
  return *internal_default_instance();
}


void service_control::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.service_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&send_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transfer_object_) -
        reinterpret_cast<char*>(&send_id_)) + sizeof(transfer_object_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool service_control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.service_control)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 send_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_send_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recv_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_recv_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 c_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_c_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.errorinfo error = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transfer_object = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_transfer_object();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transfer_object_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.service_control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.service_control)
  return false;
#undef DO_
}

void service_control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.service_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 send_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->send_id(), output);
  }

  // optional uint32 recv_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recv_id(), output);
  }

  // optional bytes msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msg(), output);
  }

  // optional uint32 c_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->c_id(), output);
  }

  // optional .common.errorinfo error = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_error(), output);
  }

  // optional uint32 transfer_object = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->transfer_object(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.service_control)
}

::google::protobuf::uint8* service_control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.service_control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 send_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->send_id(), target);
  }

  // optional uint32 recv_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recv_id(), target);
  }

  // optional bytes msg = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  // optional uint32 c_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->c_id(), target);
  }

  // optional .common.errorinfo error = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_error(), deterministic, target);
  }

  // optional uint32 transfer_object = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->transfer_object(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.service_control)
  return target;
}

size_t service_control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.service_control)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional .common.errorinfo error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *error_);
    }

    // optional uint32 send_id = 1;
    if (has_send_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_id());
    }

    // optional uint32 recv_id = 2;
    if (has_recv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_id());
    }

    // optional uint32 c_id = 4;
    if (has_c_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c_id());
    }

    // optional uint32 transfer_object = 6;
    if (has_transfer_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transfer_object());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void service_control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.service_control)
  GOOGLE_DCHECK_NE(&from, this);
  const service_control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const service_control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.service_control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.service_control)
    MergeFrom(*source);
  }
}

void service_control::MergeFrom(const service_control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.service_control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000004u) {
      send_id_ = from.send_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      recv_id_ = from.recv_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      c_id_ = from.c_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      transfer_object_ = from.transfer_object_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void service_control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.service_control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void service_control::CopyFrom(const service_control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.service_control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool service_control::IsInitialized() const {
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void service_control::Swap(service_control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void service_control::InternalSwap(service_control* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(send_id_, other->send_id_);
  swap(recv_id_, other->recv_id_);
  swap(c_id_, other->c_id_);
  swap(transfer_object_, other->transfer_object_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata service_control::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void service_control_ack::InitAsDefaultInstance() {
  ::chat_msg::_service_control_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void service_control_ack::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int service_control_ack::kErrorFieldNumber;
const int service_control_ack::kMsgSerialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

service_control_ack::service_control_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_service_control_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.service_control_ack)
}
service_control_ack::service_control_ack(const service_control_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  msg_serial_ = from.msg_serial_;
  // @@protoc_insertion_point(copy_constructor:chat_msg.service_control_ack)
}

void service_control_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_serial_) -
      reinterpret_cast<char*>(&error_)) + sizeof(msg_serial_));
}

service_control_ack::~service_control_ack() {
  // @@protoc_insertion_point(destructor:chat_msg.service_control_ack)
  SharedDtor();
}

void service_control_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void service_control_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* service_control_ack::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const service_control_ack& service_control_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_service_control_ack.base);
  return *internal_default_instance();
}


void service_control_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.service_control_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(error_ != NULL);
    error_->Clear();
  }
  msg_serial_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool service_control_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.service_control_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 msg_serial = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_msg_serial();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.service_control_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.service_control_ack)
  return false;
#undef DO_
}

void service_control_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.service_control_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // optional uint64 msg_serial = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_serial(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.service_control_ack)
}

::google::protobuf::uint8* service_control_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.service_control_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.errorinfo error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // optional uint64 msg_serial = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_serial(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.service_control_ack)
  return target;
}

size_t service_control_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.service_control_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.errorinfo error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }
  // optional uint64 msg_serial = 2;
  if (has_msg_serial()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_serial());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void service_control_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.service_control_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const service_control_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const service_control_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.service_control_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.service_control_ack)
    MergeFrom(*source);
  }
}

void service_control_ack::MergeFrom(const service_control_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.service_control_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_error()->::common::errorinfo::MergeFrom(from.error());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_serial_ = from.msg_serial_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void service_control_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.service_control_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void service_control_ack::CopyFrom(const service_control_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.service_control_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool service_control_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void service_control_ack::Swap(service_control_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void service_control_ack::InternalSwap(service_control_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(msg_serial_, other->msg_serial_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata service_control_ack::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void personal_notify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int personal_notify::kImidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

personal_notify::personal_notify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_personal_notify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.personal_notify)
}
personal_notify::personal_notify(const personal_notify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imid_ = from.imid_;
  // @@protoc_insertion_point(copy_constructor:chat_msg.personal_notify)
}

void personal_notify::SharedCtor() {
  imid_ = 0u;
}

personal_notify::~personal_notify() {
  // @@protoc_insertion_point(destructor:chat_msg.personal_notify)
  SharedDtor();
}

void personal_notify::SharedDtor() {
}

void personal_notify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* personal_notify::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const personal_notify& personal_notify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_personal_notify.base);
  return *internal_default_instance();
}


void personal_notify::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.personal_notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool personal_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.personal_notify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 imid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_imid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.personal_notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.personal_notify)
  return false;
#undef DO_
}

void personal_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.personal_notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 imid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->imid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.personal_notify)
}

::google::protobuf::uint8* personal_notify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.personal_notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 imid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->imid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.personal_notify)
  return target;
}

size_t personal_notify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.personal_notify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 imid = 1;
  if (has_imid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void personal_notify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.personal_notify)
  GOOGLE_DCHECK_NE(&from, this);
  const personal_notify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const personal_notify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.personal_notify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.personal_notify)
    MergeFrom(*source);
  }
}

void personal_notify::MergeFrom(const personal_notify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.personal_notify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imid()) {
    set_imid(from.imid());
  }
}

void personal_notify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.personal_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void personal_notify::CopyFrom(const personal_notify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.personal_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool personal_notify::IsInitialized() const {
  return true;
}

void personal_notify::Swap(personal_notify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void personal_notify::InternalSwap(personal_notify* other) {
  using std::swap;
  swap(imid_, other->imid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata personal_notify::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void group_notify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int group_notify::kImidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

group_notify::group_notify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_5fmsg_2eproto::scc_info_group_notify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat_msg.group_notify)
}
group_notify::group_notify(const group_notify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imid_ = from.imid_;
  // @@protoc_insertion_point(copy_constructor:chat_msg.group_notify)
}

void group_notify::SharedCtor() {
  imid_ = 0u;
}

group_notify::~group_notify() {
  // @@protoc_insertion_point(destructor:chat_msg.group_notify)
  SharedDtor();
}

void group_notify::SharedDtor() {
}

void group_notify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* group_notify::descriptor() {
  ::protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const group_notify& group_notify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_5fmsg_2eproto::scc_info_group_notify.base);
  return *internal_default_instance();
}


void group_notify::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_msg.group_notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool group_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat_msg.group_notify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 imid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_imid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat_msg.group_notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat_msg.group_notify)
  return false;
#undef DO_
}

void group_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat_msg.group_notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 imid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->imid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chat_msg.group_notify)
}

::google::protobuf::uint8* group_notify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat_msg.group_notify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 imid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->imid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_msg.group_notify)
  return target;
}

size_t group_notify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_msg.group_notify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 imid = 1;
  if (has_imid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void group_notify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat_msg.group_notify)
  GOOGLE_DCHECK_NE(&from, this);
  const group_notify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const group_notify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat_msg.group_notify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat_msg.group_notify)
    MergeFrom(*source);
  }
}

void group_notify::MergeFrom(const group_notify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat_msg.group_notify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imid()) {
    set_imid(from.imid());
  }
}

void group_notify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat_msg.group_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void group_notify::CopyFrom(const group_notify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_msg.group_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool group_notify::IsInitialized() const {
  return true;
}

void group_notify::Swap(group_notify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void group_notify::InternalSwap(group_notify* other) {
  using std::swap;
  swap(imid_, other->imid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata group_notify::GetMetadata() const {
  protobuf_chat_5fmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_5fmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chat_msg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::msg_p2p_send* Arena::CreateMaybeMessage< ::chat_msg::msg_p2p_send >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::msg_p2p_send >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::msg_p2p_ack* Arena::CreateMaybeMessage< ::chat_msg::msg_p2p_ack >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::msg_p2p_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::msg_p2p_recv* Arena::CreateMaybeMessage< ::chat_msg::msg_p2p_recv >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::msg_p2p_recv >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::msg_group_send* Arena::CreateMaybeMessage< ::chat_msg::msg_group_send >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::msg_group_send >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::msg_group_send_ack* Arena::CreateMaybeMessage< ::chat_msg::msg_group_send_ack >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::msg_group_send_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::msg_group_recv* Arena::CreateMaybeMessage< ::chat_msg::msg_group_recv >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::msg_group_recv >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::msg_group_recv_ack* Arena::CreateMaybeMessage< ::chat_msg::msg_group_recv_ack >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::msg_group_recv_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::offline_msg_p2p_req* Arena::CreateMaybeMessage< ::chat_msg::offline_msg_p2p_req >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::offline_msg_p2p_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::offline_msg_p2p_req_ack* Arena::CreateMaybeMessage< ::chat_msg::offline_msg_p2p_req_ack >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::offline_msg_p2p_req_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::offline_msg_p2p_rsp* Arena::CreateMaybeMessage< ::chat_msg::offline_msg_p2p_rsp >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::offline_msg_p2p_rsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::offline_msg_p2p_rsp_ack* Arena::CreateMaybeMessage< ::chat_msg::offline_msg_p2p_rsp_ack >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::offline_msg_p2p_rsp_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::offline_msg_group_req* Arena::CreateMaybeMessage< ::chat_msg::offline_msg_group_req >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::offline_msg_group_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::offline_msg_group_ack* Arena::CreateMaybeMessage< ::chat_msg::offline_msg_group_ack >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::offline_msg_group_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::offline_msg_group_rsp* Arena::CreateMaybeMessage< ::chat_msg::offline_msg_group_rsp >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::offline_msg_group_rsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::offline_msg_group_rsp_ack* Arena::CreateMaybeMessage< ::chat_msg::offline_msg_group_rsp_ack >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::offline_msg_group_rsp_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::service_control* Arena::CreateMaybeMessage< ::chat_msg::service_control >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::service_control >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::service_control_ack* Arena::CreateMaybeMessage< ::chat_msg::service_control_ack >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::service_control_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::personal_notify* Arena::CreateMaybeMessage< ::chat_msg::personal_notify >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::personal_notify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat_msg::group_notify* Arena::CreateMaybeMessage< ::chat_msg::group_notify >(Arena* arena) {
  return Arena::CreateInternal< ::chat_msg::group_notify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
