// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto 

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_common_2eproto
namespace common {
class PICTURE_CONTENT;
class PICTURE_CONTENTDefaultTypeInternal;
extern PICTURE_CONTENTDefaultTypeInternal _PICTURE_CONTENT_default_instance_;
class TEXT_CONTENT;
class TEXT_CONTENTDefaultTypeInternal;
extern TEXT_CONTENTDefaultTypeInternal _TEXT_CONTENT_default_instance_;
class VOICE_CONTENT;
class VOICE_CONTENTDefaultTypeInternal;
extern VOICE_CONTENTDefaultTypeInternal _VOICE_CONTENT_default_instance_;
class errorinfo;
class errorinfoDefaultTypeInternal;
extern errorinfoDefaultTypeInternal _errorinfo_default_instance_;
class msg_content;
class msg_contentDefaultTypeInternal;
extern msg_contentDefaultTypeInternal _msg_content_default_instance_;
class quality_control_option;
class quality_control_optionDefaultTypeInternal;
extern quality_control_optionDefaultTypeInternal _quality_control_option_default_instance_;
class session_info;
class session_infoDefaultTypeInternal;
extern session_infoDefaultTypeInternal _session_info_default_instance_;
class single_msg_push;
class single_msg_pushDefaultTypeInternal;
extern single_msg_pushDefaultTypeInternal _single_msg_push_default_instance_;
class taboo_option;
class taboo_optionDefaultTypeInternal;
extern taboo_optionDefaultTypeInternal _taboo_option_default_instance_;
class user_info;
class user_infoDefaultTypeInternal;
extern user_infoDefaultTypeInternal _user_info_default_instance_;
}  // namespace common
namespace google {
namespace protobuf {
template<> ::common::PICTURE_CONTENT* Arena::CreateMaybeMessage<::common::PICTURE_CONTENT>(Arena*);
template<> ::common::TEXT_CONTENT* Arena::CreateMaybeMessage<::common::TEXT_CONTENT>(Arena*);
template<> ::common::VOICE_CONTENT* Arena::CreateMaybeMessage<::common::VOICE_CONTENT>(Arena*);
template<> ::common::errorinfo* Arena::CreateMaybeMessage<::common::errorinfo>(Arena*);
template<> ::common::msg_content* Arena::CreateMaybeMessage<::common::msg_content>(Arena*);
template<> ::common::quality_control_option* Arena::CreateMaybeMessage<::common::quality_control_option>(Arena*);
template<> ::common::session_info* Arena::CreateMaybeMessage<::common::session_info>(Arena*);
template<> ::common::single_msg_push* Arena::CreateMaybeMessage<::common::single_msg_push>(Arena*);
template<> ::common::taboo_option* Arena::CreateMaybeMessage<::common::taboo_option>(Arena*);
template<> ::common::user_info* Arena::CreateMaybeMessage<::common::user_info>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace common {

// ===================================================================

class TEXT_CONTENT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.TEXT_CONTENT) */ {
 public:
  TEXT_CONTENT();
  virtual ~TEXT_CONTENT();

  TEXT_CONTENT(const TEXT_CONTENT& from);

  inline TEXT_CONTENT& operator=(const TEXT_CONTENT& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TEXT_CONTENT(TEXT_CONTENT&& from) noexcept
    : TEXT_CONTENT() {
    *this = ::std::move(from);
  }

  inline TEXT_CONTENT& operator=(TEXT_CONTENT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TEXT_CONTENT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TEXT_CONTENT* internal_default_instance() {
    return reinterpret_cast<const TEXT_CONTENT*>(
               &_TEXT_CONTENT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TEXT_CONTENT* other);
  friend void swap(TEXT_CONTENT& a, TEXT_CONTENT& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TEXT_CONTENT* New() const final {
    return CreateMaybeMessage<TEXT_CONTENT>(NULL);
  }

  TEXT_CONTENT* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TEXT_CONTENT>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TEXT_CONTENT& from);
  void MergeFrom(const TEXT_CONTENT& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TEXT_CONTENT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:common.TEXT_CONTENT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PICTURE_CONTENT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.PICTURE_CONTENT) */ {
 public:
  PICTURE_CONTENT();
  virtual ~PICTURE_CONTENT();

  PICTURE_CONTENT(const PICTURE_CONTENT& from);

  inline PICTURE_CONTENT& operator=(const PICTURE_CONTENT& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PICTURE_CONTENT(PICTURE_CONTENT&& from) noexcept
    : PICTURE_CONTENT() {
    *this = ::std::move(from);
  }

  inline PICTURE_CONTENT& operator=(PICTURE_CONTENT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PICTURE_CONTENT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PICTURE_CONTENT* internal_default_instance() {
    return reinterpret_cast<const PICTURE_CONTENT*>(
               &_PICTURE_CONTENT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PICTURE_CONTENT* other);
  friend void swap(PICTURE_CONTENT& a, PICTURE_CONTENT& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PICTURE_CONTENT* New() const final {
    return CreateMaybeMessage<PICTURE_CONTENT>(NULL);
  }

  PICTURE_CONTENT* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PICTURE_CONTENT>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PICTURE_CONTENT& from);
  void MergeFrom(const PICTURE_CONTENT& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PICTURE_CONTENT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes picture_url = 1;
  void clear_picture_url();
  static const int kPictureUrlFieldNumber = 1;
  const ::std::string& picture_url() const;
  void set_picture_url(const ::std::string& value);
  #if LANG_CXX11
  void set_picture_url(::std::string&& value);
  #endif
  void set_picture_url(const char* value);
  void set_picture_url(const void* value, size_t size);
  ::std::string* mutable_picture_url();
  ::std::string* release_picture_url();
  void set_allocated_picture_url(::std::string* picture_url);

  // bytes thumbnail_url = 2;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 2;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const void* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // uint32 thumbnail_width = 3;
  void clear_thumbnail_width();
  static const int kThumbnailWidthFieldNumber = 3;
  ::google::protobuf::uint32 thumbnail_width() const;
  void set_thumbnail_width(::google::protobuf::uint32 value);

  // uint32 thumbnail_hight = 4;
  void clear_thumbnail_hight();
  static const int kThumbnailHightFieldNumber = 4;
  ::google::protobuf::uint32 thumbnail_hight() const;
  void set_thumbnail_hight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.PICTURE_CONTENT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr picture_url_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::uint32 thumbnail_width_;
  ::google::protobuf::uint32 thumbnail_hight_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VOICE_CONTENT : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.VOICE_CONTENT) */ {
 public:
  VOICE_CONTENT();
  virtual ~VOICE_CONTENT();

  VOICE_CONTENT(const VOICE_CONTENT& from);

  inline VOICE_CONTENT& operator=(const VOICE_CONTENT& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VOICE_CONTENT(VOICE_CONTENT&& from) noexcept
    : VOICE_CONTENT() {
    *this = ::std::move(from);
  }

  inline VOICE_CONTENT& operator=(VOICE_CONTENT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VOICE_CONTENT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VOICE_CONTENT* internal_default_instance() {
    return reinterpret_cast<const VOICE_CONTENT*>(
               &_VOICE_CONTENT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VOICE_CONTENT* other);
  friend void swap(VOICE_CONTENT& a, VOICE_CONTENT& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VOICE_CONTENT* New() const final {
    return CreateMaybeMessage<VOICE_CONTENT>(NULL);
  }

  VOICE_CONTENT* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VOICE_CONTENT>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VOICE_CONTENT& from);
  void MergeFrom(const VOICE_CONTENT& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VOICE_CONTENT* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes voice_url = 2;
  void clear_voice_url();
  static const int kVoiceUrlFieldNumber = 2;
  const ::std::string& voice_url() const;
  void set_voice_url(const ::std::string& value);
  #if LANG_CXX11
  void set_voice_url(::std::string&& value);
  #endif
  void set_voice_url(const char* value);
  void set_voice_url(const void* value, size_t size);
  ::std::string* mutable_voice_url();
  ::std::string* release_voice_url();
  void set_allocated_voice_url(::std::string* voice_url);

  // uint32 voice_len = 1;
  void clear_voice_len();
  static const int kVoiceLenFieldNumber = 1;
  ::google::protobuf::uint32 voice_len() const;
  void set_voice_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.VOICE_CONTENT)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr voice_url_;
  ::google::protobuf::uint32 voice_len_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_content : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg_content) */ {
 public:
  msg_content();
  virtual ~msg_content();

  msg_content(const msg_content& from);

  inline msg_content& operator=(const msg_content& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_content(msg_content&& from) noexcept
    : msg_content() {
    *this = ::std::move(from);
  }

  inline msg_content& operator=(msg_content&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_content& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_content* internal_default_instance() {
    return reinterpret_cast<const msg_content*>(
               &_msg_content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(msg_content* other);
  friend void swap(msg_content& a, msg_content& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_content* New() const final {
    return CreateMaybeMessage<msg_content>(NULL);
  }

  msg_content* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_content>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_content& from);
  void MergeFrom(const msg_content& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_content* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.TEXT_CONTENT text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  private:
  const ::common::TEXT_CONTENT& _internal_text() const;
  public:
  const ::common::TEXT_CONTENT& text() const;
  ::common::TEXT_CONTENT* release_text();
  ::common::TEXT_CONTENT* mutable_text();
  void set_allocated_text(::common::TEXT_CONTENT* text);

  // .common.PICTURE_CONTENT picture = 2;
  bool has_picture() const;
  void clear_picture();
  static const int kPictureFieldNumber = 2;
  private:
  const ::common::PICTURE_CONTENT& _internal_picture() const;
  public:
  const ::common::PICTURE_CONTENT& picture() const;
  ::common::PICTURE_CONTENT* release_picture();
  ::common::PICTURE_CONTENT* mutable_picture();
  void set_allocated_picture(::common::PICTURE_CONTENT* picture);

  // .common.VOICE_CONTENT voice = 3;
  bool has_voice() const;
  void clear_voice();
  static const int kVoiceFieldNumber = 3;
  private:
  const ::common::VOICE_CONTENT& _internal_voice() const;
  public:
  const ::common::VOICE_CONTENT& voice() const;
  ::common::VOICE_CONTENT* release_voice();
  ::common::VOICE_CONTENT* mutable_voice();
  void set_allocated_voice(::common::VOICE_CONTENT* voice);

  // @@protoc_insertion_point(class_scope:common.msg_content)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::TEXT_CONTENT* text_;
  ::common::PICTURE_CONTENT* picture_;
  ::common::VOICE_CONTENT* voice_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class errorinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.errorinfo) */ {
 public:
  errorinfo();
  virtual ~errorinfo();

  errorinfo(const errorinfo& from);

  inline errorinfo& operator=(const errorinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  errorinfo(errorinfo&& from) noexcept
    : errorinfo() {
    *this = ::std::move(from);
  }

  inline errorinfo& operator=(errorinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const errorinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const errorinfo* internal_default_instance() {
    return reinterpret_cast<const errorinfo*>(
               &_errorinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(errorinfo* other);
  friend void swap(errorinfo& a, errorinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline errorinfo* New() const final {
    return CreateMaybeMessage<errorinfo>(NULL);
  }

  errorinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<errorinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const errorinfo& from);
  void MergeFrom(const errorinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(errorinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes error_info = 2;
  void clear_error_info();
  static const int kErrorInfoFieldNumber = 2;
  const ::std::string& error_info() const;
  void set_error_info(const ::std::string& value);
  #if LANG_CXX11
  void set_error_info(::std::string&& value);
  #endif
  void set_error_info(const char* value);
  void set_error_info(const void* value, size_t size);
  ::std::string* mutable_error_info();
  ::std::string* release_error_info();
  void set_allocated_error_info(::std::string* error_info);

  // bytes error_client_show = 3;
  void clear_error_client_show();
  static const int kErrorClientShowFieldNumber = 3;
  const ::std::string& error_client_show() const;
  void set_error_client_show(const ::std::string& value);
  #if LANG_CXX11
  void set_error_client_show(::std::string&& value);
  #endif
  void set_error_client_show(const char* value);
  void set_error_client_show(const void* value, size_t size);
  ::std::string* mutable_error_client_show();
  ::std::string* release_error_client_show();
  void set_allocated_error_client_show(::std::string* error_client_show);

  // int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:common.errorinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_info_;
  ::google::protobuf::internal::ArenaStringPtr error_client_show_;
  ::google::protobuf::int32 error_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.user_info) */ {
 public:
  user_info();
  virtual ~user_info();

  user_info(const user_info& from);

  inline user_info& operator=(const user_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  user_info(user_info&& from) noexcept
    : user_info() {
    *this = ::std::move(from);
  }

  inline user_info& operator=(user_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_info* internal_default_instance() {
    return reinterpret_cast<const user_info*>(
               &_user_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(user_info* other);
  friend void swap(user_info& a, user_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline user_info* New() const final {
    return CreateMaybeMessage<user_info>(NULL);
  }

  user_info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<user_info>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const user_info& from);
  void MergeFrom(const user_info& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes nickname = 2;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // bytes avatar_url = 3;
  void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 3;
  const ::std::string& avatar_url() const;
  void set_avatar_url(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar_url(::std::string&& value);
  #endif
  void set_avatar_url(const char* value);
  void set_avatar_url(const void* value, size_t size);
  ::std::string* mutable_avatar_url();
  ::std::string* release_avatar_url();
  void set_allocated_avatar_url(::std::string* avatar_url);

  // bytes introduction = 5;
  void clear_introduction();
  static const int kIntroductionFieldNumber = 5;
  const ::std::string& introduction() const;
  void set_introduction(const ::std::string& value);
  #if LANG_CXX11
  void set_introduction(::std::string&& value);
  #endif
  void set_introduction(const char* value);
  void set_introduction(const void* value, size_t size);
  ::std::string* mutable_introduction();
  ::std::string* release_introduction();
  void set_allocated_introduction(::std::string* introduction);

  // uint32 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::uint32 userid() const;
  void set_userid(::google::protobuf::uint32 value);

  // uint32 sex = 6;
  void clear_sex();
  static const int kSexFieldNumber = 6;
  ::google::protobuf::uint32 sex() const;
  void set_sex(::google::protobuf::uint32 value);

  // uint64 user_identity = 7;
  void clear_user_identity();
  static const int kUserIdentityFieldNumber = 7;
  ::google::protobuf::uint64 user_identity() const;
  void set_user_identity(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.user_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr avatar_url_;
  ::google::protobuf::internal::ArenaStringPtr introduction_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint64 user_identity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class single_msg_push : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.single_msg_push) */ {
 public:
  single_msg_push();
  virtual ~single_msg_push();

  single_msg_push(const single_msg_push& from);

  inline single_msg_push& operator=(const single_msg_push& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  single_msg_push(single_msg_push&& from) noexcept
    : single_msg_push() {
    *this = ::std::move(from);
  }

  inline single_msg_push& operator=(single_msg_push&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const single_msg_push& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const single_msg_push* internal_default_instance() {
    return reinterpret_cast<const single_msg_push*>(
               &_single_msg_push_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(single_msg_push* other);
  friend void swap(single_msg_push& a, single_msg_push& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline single_msg_push* New() const final {
    return CreateMaybeMessage<single_msg_push>(NULL);
  }

  single_msg_push* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<single_msg_push>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const single_msg_push& from);
  void MergeFrom(const single_msg_push& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(single_msg_push* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes send_nickname = 2;
  void clear_send_nickname();
  static const int kSendNicknameFieldNumber = 2;
  const ::std::string& send_nickname() const;
  void set_send_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_send_nickname(::std::string&& value);
  #endif
  void set_send_nickname(const char* value);
  void set_send_nickname(const void* value, size_t size);
  ::std::string* mutable_send_nickname();
  ::std::string* release_send_nickname();
  void set_allocated_send_nickname(::std::string* send_nickname);

  // bytes send_avatar = 3;
  void clear_send_avatar();
  static const int kSendAvatarFieldNumber = 3;
  const ::std::string& send_avatar() const;
  void set_send_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_send_avatar(::std::string&& value);
  #endif
  void set_send_avatar(const char* value);
  void set_send_avatar(const void* value, size_t size);
  ::std::string* mutable_send_avatar();
  ::std::string* release_send_avatar();
  void set_allocated_send_avatar(::std::string* send_avatar);

  // bytes recv_nickname = 6;
  void clear_recv_nickname();
  static const int kRecvNicknameFieldNumber = 6;
  const ::std::string& recv_nickname() const;
  void set_recv_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_recv_nickname(::std::string&& value);
  #endif
  void set_recv_nickname(const char* value);
  void set_recv_nickname(const void* value, size_t size);
  ::std::string* mutable_recv_nickname();
  ::std::string* release_recv_nickname();
  void set_allocated_recv_nickname(::std::string* recv_nickname);

  // bytes recv_avatar = 7;
  void clear_recv_avatar();
  static const int kRecvAvatarFieldNumber = 7;
  const ::std::string& recv_avatar() const;
  void set_recv_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_recv_avatar(::std::string&& value);
  #endif
  void set_recv_avatar(const char* value);
  void set_recv_avatar(const void* value, size_t size);
  ::std::string* mutable_recv_avatar();
  ::std::string* release_recv_avatar();
  void set_allocated_recv_avatar(::std::string* recv_avatar);

  // bytes msg = 10;
  void clear_msg();
  static const int kMsgFieldNumber = 10;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // uint32 send_id = 1;
  void clear_send_id();
  static const int kSendIdFieldNumber = 1;
  ::google::protobuf::uint32 send_id() const;
  void set_send_id(::google::protobuf::uint32 value);

  // uint32 send_type = 4;
  void clear_send_type();
  static const int kSendTypeFieldNumber = 4;
  ::google::protobuf::uint32 send_type() const;
  void set_send_type(::google::protobuf::uint32 value);

  // uint32 recv_id = 5;
  void clear_recv_id();
  static const int kRecvIdFieldNumber = 5;
  ::google::protobuf::uint32 recv_id() const;
  void set_recv_id(::google::protobuf::uint32 value);

  // uint32 recv_type = 8;
  void clear_recv_type();
  static const int kRecvTypeFieldNumber = 8;
  ::google::protobuf::uint32 recv_type() const;
  void set_recv_type(::google::protobuf::uint32 value);

  // uint32 msg_type = 9;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 9;
  ::google::protobuf::uint32 msg_type() const;
  void set_msg_type(::google::protobuf::uint32 value);

  // uint32 send_time = 12;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 12;
  ::google::protobuf::uint32 send_time() const;
  void set_send_time(::google::protobuf::uint32 value);

  // uint64 msg_id = 11;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 11;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.single_msg_push)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr send_nickname_;
  ::google::protobuf::internal::ArenaStringPtr send_avatar_;
  ::google::protobuf::internal::ArenaStringPtr recv_nickname_;
  ::google::protobuf::internal::ArenaStringPtr recv_avatar_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint32 send_id_;
  ::google::protobuf::uint32 send_type_;
  ::google::protobuf::uint32 recv_id_;
  ::google::protobuf::uint32 recv_type_;
  ::google::protobuf::uint32 msg_type_;
  ::google::protobuf::uint32 send_time_;
  ::google::protobuf::uint64 msg_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class session_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.session_info) */ {
 public:
  session_info();
  virtual ~session_info();

  session_info(const session_info& from);

  inline session_info& operator=(const session_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  session_info(session_info&& from) noexcept
    : session_info() {
    *this = ::std::move(from);
  }

  inline session_info& operator=(session_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const session_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const session_info* internal_default_instance() {
    return reinterpret_cast<const session_info*>(
               &_session_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(session_info* other);
  friend void swap(session_info& a, session_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline session_info* New() const final {
    return CreateMaybeMessage<session_info>(NULL);
  }

  session_info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<session_info>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const session_info& from);
  void MergeFrom(const session_info& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(session_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.single_msg_push msg_list = 20;
  int msg_list_size() const;
  void clear_msg_list();
  static const int kMsgListFieldNumber = 20;
  ::common::single_msg_push* mutable_msg_list(int index);
  ::google::protobuf::RepeatedPtrField< ::common::single_msg_push >*
      mutable_msg_list();
  const ::common::single_msg_push& msg_list(int index) const;
  ::common::single_msg_push* add_msg_list();
  const ::google::protobuf::RepeatedPtrField< ::common::single_msg_push >&
      msg_list() const;

  // bytes customer_nickname = 8;
  void clear_customer_nickname();
  static const int kCustomerNicknameFieldNumber = 8;
  const ::std::string& customer_nickname() const;
  void set_customer_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_nickname(::std::string&& value);
  #endif
  void set_customer_nickname(const char* value);
  void set_customer_nickname(const void* value, size_t size);
  ::std::string* mutable_customer_nickname();
  ::std::string* release_customer_nickname();
  void set_allocated_customer_nickname(::std::string* customer_nickname);

  // bytes customer_avatar = 9;
  void clear_customer_avatar();
  static const int kCustomerAvatarFieldNumber = 9;
  const ::std::string& customer_avatar() const;
  void set_customer_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_avatar(::std::string&& value);
  #endif
  void set_customer_avatar(const char* value);
  void set_customer_avatar(const void* value, size_t size);
  ::std::string* mutable_customer_avatar();
  ::std::string* release_customer_avatar();
  void set_allocated_customer_avatar(::std::string* customer_avatar);

  // bytes customerservice_nickname = 12;
  void clear_customerservice_nickname();
  static const int kCustomerserviceNicknameFieldNumber = 12;
  const ::std::string& customerservice_nickname() const;
  void set_customerservice_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_customerservice_nickname(::std::string&& value);
  #endif
  void set_customerservice_nickname(const char* value);
  void set_customerservice_nickname(const void* value, size_t size);
  ::std::string* mutable_customerservice_nickname();
  ::std::string* release_customerservice_nickname();
  void set_allocated_customerservice_nickname(::std::string* customerservice_nickname);

  // bytes customerservice_avatar = 13;
  void clear_customerservice_avatar();
  static const int kCustomerserviceAvatarFieldNumber = 13;
  const ::std::string& customerservice_avatar() const;
  void set_customerservice_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_customerservice_avatar(::std::string&& value);
  #endif
  void set_customerservice_avatar(const char* value);
  void set_customerservice_avatar(const void* value, size_t size);
  ::std::string* mutable_customerservice_avatar();
  ::std::string* release_customerservice_avatar();
  void set_allocated_customerservice_avatar(::std::string* customerservice_avatar);

  // bytes customer_address = 15;
  void clear_customer_address();
  static const int kCustomerAddressFieldNumber = 15;
  const ::std::string& customer_address() const;
  void set_customer_address(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_address(::std::string&& value);
  #endif
  void set_customer_address(const char* value);
  void set_customer_address(const void* value, size_t size);
  ::std::string* mutable_customer_address();
  ::std::string* release_customer_address();
  void set_allocated_customer_address(::std::string* customer_address);

  // bytes customer_terminal_source = 16;
  void clear_customer_terminal_source();
  static const int kCustomerTerminalSourceFieldNumber = 16;
  const ::std::string& customer_terminal_source() const;
  void set_customer_terminal_source(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_terminal_source(::std::string&& value);
  #endif
  void set_customer_terminal_source(const char* value);
  void set_customer_terminal_source(const void* value, size_t size);
  ::std::string* mutable_customer_terminal_source();
  ::std::string* release_customer_terminal_source();
  void set_allocated_customer_terminal_source(::std::string* customer_terminal_source);

  // bytes customer_page_source = 17;
  void clear_customer_page_source();
  static const int kCustomerPageSourceFieldNumber = 17;
  const ::std::string& customer_page_source() const;
  void set_customer_page_source(const ::std::string& value);
  #if LANG_CXX11
  void set_customer_page_source(::std::string&& value);
  #endif
  void set_customer_page_source(const char* value);
  void set_customer_page_source(const void* value, size_t size);
  ::std::string* mutable_customer_page_source();
  ::std::string* release_customer_page_source();
  void set_allocated_customer_page_source(::std::string* customer_page_source);

  // bytes session_remark = 21;
  void clear_session_remark();
  static const int kSessionRemarkFieldNumber = 21;
  const ::std::string& session_remark() const;
  void set_session_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_session_remark(::std::string&& value);
  #endif
  void set_session_remark(const char* value);
  void set_session_remark(const void* value, size_t size);
  ::std::string* mutable_session_remark();
  ::std::string* release_session_remark();
  void set_allocated_session_remark(::std::string* session_remark);

  // bytes evaluate_remark = 23;
  void clear_evaluate_remark();
  static const int kEvaluateRemarkFieldNumber = 23;
  const ::std::string& evaluate_remark() const;
  void set_evaluate_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_evaluate_remark(::std::string&& value);
  #endif
  void set_evaluate_remark(const char* value);
  void set_evaluate_remark(const void* value, size_t size);
  ::std::string* mutable_evaluate_remark();
  ::std::string* release_evaluate_remark();
  void set_allocated_evaluate_remark(::std::string* evaluate_remark);

  // bytes quality_control_nickname = 27;
  void clear_quality_control_nickname();
  static const int kQualityControlNicknameFieldNumber = 27;
  const ::std::string& quality_control_nickname() const;
  void set_quality_control_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_quality_control_nickname(::std::string&& value);
  #endif
  void set_quality_control_nickname(const char* value);
  void set_quality_control_nickname(const void* value, size_t size);
  ::std::string* mutable_quality_control_nickname();
  ::std::string* release_quality_control_nickname();
  void set_allocated_quality_control_nickname(::std::string* quality_control_nickname);

  // bytes quality_control_comment = 28;
  void clear_quality_control_comment();
  static const int kQualityControlCommentFieldNumber = 28;
  const ::std::string& quality_control_comment() const;
  void set_quality_control_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_quality_control_comment(::std::string&& value);
  #endif
  void set_quality_control_comment(const char* value);
  void set_quality_control_comment(const void* value, size_t size);
  ::std::string* mutable_quality_control_comment();
  ::std::string* release_quality_control_comment();
  void set_allocated_quality_control_comment(::std::string* quality_control_comment);

  // uint64 session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  ::google::protobuf::uint64 session_id() const;
  void set_session_id(::google::protobuf::uint64 value);

  // uint32 session_type = 2;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  ::google::protobuf::uint32 session_type() const;
  void set_session_type(::google::protobuf::uint32 value);

  // uint32 req_session_time = 3;
  void clear_req_session_time();
  static const int kReqSessionTimeFieldNumber = 3;
  ::google::protobuf::uint32 req_session_time() const;
  void set_req_session_time(::google::protobuf::uint32 value);

  // uint32 enter_session_time = 4;
  void clear_enter_session_time();
  static const int kEnterSessionTimeFieldNumber = 4;
  ::google::protobuf::uint32 enter_session_time() const;
  void set_enter_session_time(::google::protobuf::uint32 value);

  // uint32 close_session_time = 5;
  void clear_close_session_time();
  static const int kCloseSessionTimeFieldNumber = 5;
  ::google::protobuf::uint32 close_session_time() const;
  void set_close_session_time(::google::protobuf::uint32 value);

  // uint32 customer_id = 6;
  void clear_customer_id();
  static const int kCustomerIdFieldNumber = 6;
  ::google::protobuf::uint32 customer_id() const;
  void set_customer_id(::google::protobuf::uint32 value);

  // uint32 customer_type = 7;
  void clear_customer_type();
  static const int kCustomerTypeFieldNumber = 7;
  ::google::protobuf::uint32 customer_type() const;
  void set_customer_type(::google::protobuf::uint32 value);

  // uint32 customerservice_id = 10;
  void clear_customerservice_id();
  static const int kCustomerserviceIdFieldNumber = 10;
  ::google::protobuf::uint32 customerservice_id() const;
  void set_customerservice_id(::google::protobuf::uint32 value);

  // uint32 customerservice_type = 11;
  void clear_customerservice_type();
  static const int kCustomerserviceTypeFieldNumber = 11;
  ::google::protobuf::uint32 customerservice_type() const;
  void set_customerservice_type(::google::protobuf::uint32 value);

  // uint32 customer_login_client_type = 14;
  void clear_customer_login_client_type();
  static const int kCustomerLoginClientTypeFieldNumber = 14;
  ::google::protobuf::uint32 customer_login_client_type() const;
  void set_customer_login_client_type(::google::protobuf::uint32 value);

  // uint32 question_stage = 18;
  void clear_question_stage();
  static const int kQuestionStageFieldNumber = 18;
  ::google::protobuf::uint32 question_stage() const;
  void set_question_stage(::google::protobuf::uint32 value);

  // uint32 consult_type = 19;
  void clear_consult_type();
  static const int kConsultTypeFieldNumber = 19;
  ::google::protobuf::uint32 consult_type() const;
  void set_consult_type(::google::protobuf::uint32 value);

  // uint32 evaluate_stage = 22;
  void clear_evaluate_stage();
  static const int kEvaluateStageFieldNumber = 22;
  ::google::protobuf::uint32 evaluate_stage() const;
  void set_evaluate_stage(::google::protobuf::uint32 value);

  // uint32 quality_control_stage = 24;
  void clear_quality_control_stage();
  static const int kQualityControlStageFieldNumber = 24;
  ::google::protobuf::uint32 quality_control_stage() const;
  void set_quality_control_stage(::google::protobuf::uint32 value);

  // uint32 quality_control_time = 25;
  void clear_quality_control_time();
  static const int kQualityControlTimeFieldNumber = 25;
  ::google::protobuf::uint32 quality_control_time() const;
  void set_quality_control_time(::google::protobuf::uint32 value);

  // uint32 quality_control_userid = 26;
  void clear_quality_control_userid();
  static const int kQualityControlUseridFieldNumber = 26;
  ::google::protobuf::uint32 quality_control_userid() const;
  void set_quality_control_userid(::google::protobuf::uint32 value);

  // uint32 reponse_timeout_count = 29;
  void clear_reponse_timeout_count();
  static const int kReponseTimeoutCountFieldNumber = 29;
  ::google::protobuf::uint32 reponse_timeout_count() const;
  void set_reponse_timeout_count(::google::protobuf::uint32 value);

  // uint32 session_timeout_count = 30;
  void clear_session_timeout_count();
  static const int kSessionTimeoutCountFieldNumber = 30;
  ::google::protobuf::uint32 session_timeout_count() const;
  void set_session_timeout_count(::google::protobuf::uint32 value);

  // uint32 session_stage = 31;
  void clear_session_stage();
  static const int kSessionStageFieldNumber = 31;
  ::google::protobuf::uint32 session_stage() const;
  void set_session_stage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.session_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::common::single_msg_push > msg_list_;
  ::google::protobuf::internal::ArenaStringPtr customer_nickname_;
  ::google::protobuf::internal::ArenaStringPtr customer_avatar_;
  ::google::protobuf::internal::ArenaStringPtr customerservice_nickname_;
  ::google::protobuf::internal::ArenaStringPtr customerservice_avatar_;
  ::google::protobuf::internal::ArenaStringPtr customer_address_;
  ::google::protobuf::internal::ArenaStringPtr customer_terminal_source_;
  ::google::protobuf::internal::ArenaStringPtr customer_page_source_;
  ::google::protobuf::internal::ArenaStringPtr session_remark_;
  ::google::protobuf::internal::ArenaStringPtr evaluate_remark_;
  ::google::protobuf::internal::ArenaStringPtr quality_control_nickname_;
  ::google::protobuf::internal::ArenaStringPtr quality_control_comment_;
  ::google::protobuf::uint64 session_id_;
  ::google::protobuf::uint32 session_type_;
  ::google::protobuf::uint32 req_session_time_;
  ::google::protobuf::uint32 enter_session_time_;
  ::google::protobuf::uint32 close_session_time_;
  ::google::protobuf::uint32 customer_id_;
  ::google::protobuf::uint32 customer_type_;
  ::google::protobuf::uint32 customerservice_id_;
  ::google::protobuf::uint32 customerservice_type_;
  ::google::protobuf::uint32 customer_login_client_type_;
  ::google::protobuf::uint32 question_stage_;
  ::google::protobuf::uint32 consult_type_;
  ::google::protobuf::uint32 evaluate_stage_;
  ::google::protobuf::uint32 quality_control_stage_;
  ::google::protobuf::uint32 quality_control_time_;
  ::google::protobuf::uint32 quality_control_userid_;
  ::google::protobuf::uint32 reponse_timeout_count_;
  ::google::protobuf::uint32 session_timeout_count_;
  ::google::protobuf::uint32 session_stage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class quality_control_option : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.quality_control_option) */ {
 public:
  quality_control_option();
  virtual ~quality_control_option();

  quality_control_option(const quality_control_option& from);

  inline quality_control_option& operator=(const quality_control_option& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  quality_control_option(quality_control_option&& from) noexcept
    : quality_control_option() {
    *this = ::std::move(from);
  }

  inline quality_control_option& operator=(quality_control_option&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const quality_control_option& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const quality_control_option* internal_default_instance() {
    return reinterpret_cast<const quality_control_option*>(
               &_quality_control_option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(quality_control_option* other);
  friend void swap(quality_control_option& a, quality_control_option& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline quality_control_option* New() const final {
    return CreateMaybeMessage<quality_control_option>(NULL);
  }

  quality_control_option* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<quality_control_option>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const quality_control_option& from);
  void MergeFrom(const quality_control_option& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(quality_control_option* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes option_name = 2;
  void clear_option_name();
  static const int kOptionNameFieldNumber = 2;
  const ::std::string& option_name() const;
  void set_option_name(const ::std::string& value);
  #if LANG_CXX11
  void set_option_name(::std::string&& value);
  #endif
  void set_option_name(const char* value);
  void set_option_name(const void* value, size_t size);
  ::std::string* mutable_option_name();
  ::std::string* release_option_name();
  void set_allocated_option_name(::std::string* option_name);

  // uint64 option_id = 1;
  void clear_option_id();
  static const int kOptionIdFieldNumber = 1;
  ::google::protobuf::uint64 option_id() const;
  void set_option_id(::google::protobuf::uint64 value);

  // float judge_score = 3;
  void clear_judge_score();
  static const int kJudgeScoreFieldNumber = 3;
  float judge_score() const;
  void set_judge_score(float value);

  // float option_score = 4;
  void clear_option_score();
  static const int kOptionScoreFieldNumber = 4;
  float option_score() const;
  void set_option_score(float value);

  // @@protoc_insertion_point(class_scope:common.quality_control_option)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr option_name_;
  ::google::protobuf::uint64 option_id_;
  float judge_score_;
  float option_score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class taboo_option : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.taboo_option) */ {
 public:
  taboo_option();
  virtual ~taboo_option();

  taboo_option(const taboo_option& from);

  inline taboo_option& operator=(const taboo_option& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  taboo_option(taboo_option&& from) noexcept
    : taboo_option() {
    *this = ::std::move(from);
  }

  inline taboo_option& operator=(taboo_option&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const taboo_option& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const taboo_option* internal_default_instance() {
    return reinterpret_cast<const taboo_option*>(
               &_taboo_option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(taboo_option* other);
  friend void swap(taboo_option& a, taboo_option& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline taboo_option* New() const final {
    return CreateMaybeMessage<taboo_option>(NULL);
  }

  taboo_option* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<taboo_option>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const taboo_option& from);
  void MergeFrom(const taboo_option& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(taboo_option* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes option_name = 2;
  void clear_option_name();
  static const int kOptionNameFieldNumber = 2;
  const ::std::string& option_name() const;
  void set_option_name(const ::std::string& value);
  #if LANG_CXX11
  void set_option_name(::std::string&& value);
  #endif
  void set_option_name(const char* value);
  void set_option_name(const void* value, size_t size);
  ::std::string* mutable_option_name();
  ::std::string* release_option_name();
  void set_allocated_option_name(::std::string* option_name);

  // uint64 option_id = 1;
  void clear_option_id();
  static const int kOptionIdFieldNumber = 1;
  ::google::protobuf::uint64 option_id() const;
  void set_option_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.taboo_option)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr option_name_;
  ::google::protobuf::uint64 option_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TEXT_CONTENT

// bytes msg = 1;
inline void TEXT_CONTENT::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TEXT_CONTENT::msg() const {
  // @@protoc_insertion_point(field_get:common.TEXT_CONTENT.msg)
  return msg_.GetNoArena();
}
inline void TEXT_CONTENT::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.TEXT_CONTENT.msg)
}
#if LANG_CXX11
inline void TEXT_CONTENT::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.TEXT_CONTENT.msg)
}
#endif
inline void TEXT_CONTENT::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.TEXT_CONTENT.msg)
}
inline void TEXT_CONTENT::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.TEXT_CONTENT.msg)
}
inline ::std::string* TEXT_CONTENT::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:common.TEXT_CONTENT.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TEXT_CONTENT::release_msg() {
  // @@protoc_insertion_point(field_release:common.TEXT_CONTENT.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TEXT_CONTENT::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:common.TEXT_CONTENT.msg)
}

// -------------------------------------------------------------------

// PICTURE_CONTENT

// bytes picture_url = 1;
inline void PICTURE_CONTENT::clear_picture_url() {
  picture_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PICTURE_CONTENT::picture_url() const {
  // @@protoc_insertion_point(field_get:common.PICTURE_CONTENT.picture_url)
  return picture_url_.GetNoArena();
}
inline void PICTURE_CONTENT::set_picture_url(const ::std::string& value) {
  
  picture_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.PICTURE_CONTENT.picture_url)
}
#if LANG_CXX11
inline void PICTURE_CONTENT::set_picture_url(::std::string&& value) {
  
  picture_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.PICTURE_CONTENT.picture_url)
}
#endif
inline void PICTURE_CONTENT::set_picture_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  picture_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.PICTURE_CONTENT.picture_url)
}
inline void PICTURE_CONTENT::set_picture_url(const void* value, size_t size) {
  
  picture_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.PICTURE_CONTENT.picture_url)
}
inline ::std::string* PICTURE_CONTENT::mutable_picture_url() {
  
  // @@protoc_insertion_point(field_mutable:common.PICTURE_CONTENT.picture_url)
  return picture_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PICTURE_CONTENT::release_picture_url() {
  // @@protoc_insertion_point(field_release:common.PICTURE_CONTENT.picture_url)
  
  return picture_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PICTURE_CONTENT::set_allocated_picture_url(::std::string* picture_url) {
  if (picture_url != NULL) {
    
  } else {
    
  }
  picture_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), picture_url);
  // @@protoc_insertion_point(field_set_allocated:common.PICTURE_CONTENT.picture_url)
}

// bytes thumbnail_url = 2;
inline void PICTURE_CONTENT::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PICTURE_CONTENT::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:common.PICTURE_CONTENT.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void PICTURE_CONTENT::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.PICTURE_CONTENT.thumbnail_url)
}
#if LANG_CXX11
inline void PICTURE_CONTENT::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.PICTURE_CONTENT.thumbnail_url)
}
#endif
inline void PICTURE_CONTENT::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.PICTURE_CONTENT.thumbnail_url)
}
inline void PICTURE_CONTENT::set_thumbnail_url(const void* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.PICTURE_CONTENT.thumbnail_url)
}
inline ::std::string* PICTURE_CONTENT::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:common.PICTURE_CONTENT.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PICTURE_CONTENT::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:common.PICTURE_CONTENT.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PICTURE_CONTENT::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:common.PICTURE_CONTENT.thumbnail_url)
}

// uint32 thumbnail_width = 3;
inline void PICTURE_CONTENT::clear_thumbnail_width() {
  thumbnail_width_ = 0u;
}
inline ::google::protobuf::uint32 PICTURE_CONTENT::thumbnail_width() const {
  // @@protoc_insertion_point(field_get:common.PICTURE_CONTENT.thumbnail_width)
  return thumbnail_width_;
}
inline void PICTURE_CONTENT::set_thumbnail_width(::google::protobuf::uint32 value) {
  
  thumbnail_width_ = value;
  // @@protoc_insertion_point(field_set:common.PICTURE_CONTENT.thumbnail_width)
}

// uint32 thumbnail_hight = 4;
inline void PICTURE_CONTENT::clear_thumbnail_hight() {
  thumbnail_hight_ = 0u;
}
inline ::google::protobuf::uint32 PICTURE_CONTENT::thumbnail_hight() const {
  // @@protoc_insertion_point(field_get:common.PICTURE_CONTENT.thumbnail_hight)
  return thumbnail_hight_;
}
inline void PICTURE_CONTENT::set_thumbnail_hight(::google::protobuf::uint32 value) {
  
  thumbnail_hight_ = value;
  // @@protoc_insertion_point(field_set:common.PICTURE_CONTENT.thumbnail_hight)
}

// -------------------------------------------------------------------

// VOICE_CONTENT

// uint32 voice_len = 1;
inline void VOICE_CONTENT::clear_voice_len() {
  voice_len_ = 0u;
}
inline ::google::protobuf::uint32 VOICE_CONTENT::voice_len() const {
  // @@protoc_insertion_point(field_get:common.VOICE_CONTENT.voice_len)
  return voice_len_;
}
inline void VOICE_CONTENT::set_voice_len(::google::protobuf::uint32 value) {
  
  voice_len_ = value;
  // @@protoc_insertion_point(field_set:common.VOICE_CONTENT.voice_len)
}

// bytes voice_url = 2;
inline void VOICE_CONTENT::clear_voice_url() {
  voice_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VOICE_CONTENT::voice_url() const {
  // @@protoc_insertion_point(field_get:common.VOICE_CONTENT.voice_url)
  return voice_url_.GetNoArena();
}
inline void VOICE_CONTENT::set_voice_url(const ::std::string& value) {
  
  voice_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.VOICE_CONTENT.voice_url)
}
#if LANG_CXX11
inline void VOICE_CONTENT::set_voice_url(::std::string&& value) {
  
  voice_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.VOICE_CONTENT.voice_url)
}
#endif
inline void VOICE_CONTENT::set_voice_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  voice_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.VOICE_CONTENT.voice_url)
}
inline void VOICE_CONTENT::set_voice_url(const void* value, size_t size) {
  
  voice_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.VOICE_CONTENT.voice_url)
}
inline ::std::string* VOICE_CONTENT::mutable_voice_url() {
  
  // @@protoc_insertion_point(field_mutable:common.VOICE_CONTENT.voice_url)
  return voice_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VOICE_CONTENT::release_voice_url() {
  // @@protoc_insertion_point(field_release:common.VOICE_CONTENT.voice_url)
  
  return voice_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VOICE_CONTENT::set_allocated_voice_url(::std::string* voice_url) {
  if (voice_url != NULL) {
    
  } else {
    
  }
  voice_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voice_url);
  // @@protoc_insertion_point(field_set_allocated:common.VOICE_CONTENT.voice_url)
}

// -------------------------------------------------------------------

// msg_content

// .common.TEXT_CONTENT text = 1;
inline bool msg_content::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void msg_content::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
}
inline const ::common::TEXT_CONTENT& msg_content::_internal_text() const {
  return *text_;
}
inline const ::common::TEXT_CONTENT& msg_content::text() const {
  const ::common::TEXT_CONTENT* p = text_;
  // @@protoc_insertion_point(field_get:common.msg_content.text)
  return p != NULL ? *p : *reinterpret_cast<const ::common::TEXT_CONTENT*>(
      &::common::_TEXT_CONTENT_default_instance_);
}
inline ::common::TEXT_CONTENT* msg_content::release_text() {
  // @@protoc_insertion_point(field_release:common.msg_content.text)
  
  ::common::TEXT_CONTENT* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::common::TEXT_CONTENT* msg_content::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::common::TEXT_CONTENT>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.msg_content.text)
  return text_;
}
inline void msg_content::set_allocated_text(::common::TEXT_CONTENT* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_;
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:common.msg_content.text)
}

// .common.PICTURE_CONTENT picture = 2;
inline bool msg_content::has_picture() const {
  return this != internal_default_instance() && picture_ != NULL;
}
inline void msg_content::clear_picture() {
  if (GetArenaNoVirtual() == NULL && picture_ != NULL) {
    delete picture_;
  }
  picture_ = NULL;
}
inline const ::common::PICTURE_CONTENT& msg_content::_internal_picture() const {
  return *picture_;
}
inline const ::common::PICTURE_CONTENT& msg_content::picture() const {
  const ::common::PICTURE_CONTENT* p = picture_;
  // @@protoc_insertion_point(field_get:common.msg_content.picture)
  return p != NULL ? *p : *reinterpret_cast<const ::common::PICTURE_CONTENT*>(
      &::common::_PICTURE_CONTENT_default_instance_);
}
inline ::common::PICTURE_CONTENT* msg_content::release_picture() {
  // @@protoc_insertion_point(field_release:common.msg_content.picture)
  
  ::common::PICTURE_CONTENT* temp = picture_;
  picture_ = NULL;
  return temp;
}
inline ::common::PICTURE_CONTENT* msg_content::mutable_picture() {
  
  if (picture_ == NULL) {
    auto* p = CreateMaybeMessage<::common::PICTURE_CONTENT>(GetArenaNoVirtual());
    picture_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.msg_content.picture)
  return picture_;
}
inline void msg_content::set_allocated_picture(::common::PICTURE_CONTENT* picture) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete picture_;
  }
  if (picture) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      picture = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, picture, submessage_arena);
    }
    
  } else {
    
  }
  picture_ = picture;
  // @@protoc_insertion_point(field_set_allocated:common.msg_content.picture)
}

// .common.VOICE_CONTENT voice = 3;
inline bool msg_content::has_voice() const {
  return this != internal_default_instance() && voice_ != NULL;
}
inline void msg_content::clear_voice() {
  if (GetArenaNoVirtual() == NULL && voice_ != NULL) {
    delete voice_;
  }
  voice_ = NULL;
}
inline const ::common::VOICE_CONTENT& msg_content::_internal_voice() const {
  return *voice_;
}
inline const ::common::VOICE_CONTENT& msg_content::voice() const {
  const ::common::VOICE_CONTENT* p = voice_;
  // @@protoc_insertion_point(field_get:common.msg_content.voice)
  return p != NULL ? *p : *reinterpret_cast<const ::common::VOICE_CONTENT*>(
      &::common::_VOICE_CONTENT_default_instance_);
}
inline ::common::VOICE_CONTENT* msg_content::release_voice() {
  // @@protoc_insertion_point(field_release:common.msg_content.voice)
  
  ::common::VOICE_CONTENT* temp = voice_;
  voice_ = NULL;
  return temp;
}
inline ::common::VOICE_CONTENT* msg_content::mutable_voice() {
  
  if (voice_ == NULL) {
    auto* p = CreateMaybeMessage<::common::VOICE_CONTENT>(GetArenaNoVirtual());
    voice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.msg_content.voice)
  return voice_;
}
inline void msg_content::set_allocated_voice(::common::VOICE_CONTENT* voice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete voice_;
  }
  if (voice) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      voice = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    
  } else {
    
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:common.msg_content.voice)
}

// -------------------------------------------------------------------

// errorinfo

// int32 error_code = 1;
inline void errorinfo::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 errorinfo::error_code() const {
  // @@protoc_insertion_point(field_get:common.errorinfo.error_code)
  return error_code_;
}
inline void errorinfo::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:common.errorinfo.error_code)
}

// bytes error_info = 2;
inline void errorinfo::clear_error_info() {
  error_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& errorinfo::error_info() const {
  // @@protoc_insertion_point(field_get:common.errorinfo.error_info)
  return error_info_.GetNoArena();
}
inline void errorinfo::set_error_info(const ::std::string& value) {
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.errorinfo.error_info)
}
#if LANG_CXX11
inline void errorinfo::set_error_info(::std::string&& value) {
  
  error_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.errorinfo.error_info)
}
#endif
inline void errorinfo::set_error_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.errorinfo.error_info)
}
inline void errorinfo::set_error_info(const void* value, size_t size) {
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.errorinfo.error_info)
}
inline ::std::string* errorinfo::mutable_error_info() {
  
  // @@protoc_insertion_point(field_mutable:common.errorinfo.error_info)
  return error_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* errorinfo::release_error_info() {
  // @@protoc_insertion_point(field_release:common.errorinfo.error_info)
  
  return error_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void errorinfo::set_allocated_error_info(::std::string* error_info) {
  if (error_info != NULL) {
    
  } else {
    
  }
  error_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_info);
  // @@protoc_insertion_point(field_set_allocated:common.errorinfo.error_info)
}

// bytes error_client_show = 3;
inline void errorinfo::clear_error_client_show() {
  error_client_show_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& errorinfo::error_client_show() const {
  // @@protoc_insertion_point(field_get:common.errorinfo.error_client_show)
  return error_client_show_.GetNoArena();
}
inline void errorinfo::set_error_client_show(const ::std::string& value) {
  
  error_client_show_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.errorinfo.error_client_show)
}
#if LANG_CXX11
inline void errorinfo::set_error_client_show(::std::string&& value) {
  
  error_client_show_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.errorinfo.error_client_show)
}
#endif
inline void errorinfo::set_error_client_show(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_client_show_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.errorinfo.error_client_show)
}
inline void errorinfo::set_error_client_show(const void* value, size_t size) {
  
  error_client_show_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.errorinfo.error_client_show)
}
inline ::std::string* errorinfo::mutable_error_client_show() {
  
  // @@protoc_insertion_point(field_mutable:common.errorinfo.error_client_show)
  return error_client_show_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* errorinfo::release_error_client_show() {
  // @@protoc_insertion_point(field_release:common.errorinfo.error_client_show)
  
  return error_client_show_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void errorinfo::set_allocated_error_client_show(::std::string* error_client_show) {
  if (error_client_show != NULL) {
    
  } else {
    
  }
  error_client_show_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_client_show);
  // @@protoc_insertion_point(field_set_allocated:common.errorinfo.error_client_show)
}

// -------------------------------------------------------------------

// user_info

// uint32 userid = 1;
inline void user_info::clear_userid() {
  userid_ = 0u;
}
inline ::google::protobuf::uint32 user_info::userid() const {
  // @@protoc_insertion_point(field_get:common.user_info.userid)
  return userid_;
}
inline void user_info::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:common.user_info.userid)
}

// bytes nickname = 2;
inline void user_info::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_info::nickname() const {
  // @@protoc_insertion_point(field_get:common.user_info.nickname)
  return nickname_.GetNoArena();
}
inline void user_info::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.user_info.nickname)
}
#if LANG_CXX11
inline void user_info::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.user_info.nickname)
}
#endif
inline void user_info::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.user_info.nickname)
}
inline void user_info::set_nickname(const void* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.user_info.nickname)
}
inline ::std::string* user_info::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:common.user_info.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_info::release_nickname() {
  // @@protoc_insertion_point(field_release:common.user_info.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:common.user_info.nickname)
}

// bytes avatar_url = 3;
inline void user_info::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_info::avatar_url() const {
  // @@protoc_insertion_point(field_get:common.user_info.avatar_url)
  return avatar_url_.GetNoArena();
}
inline void user_info::set_avatar_url(const ::std::string& value) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.user_info.avatar_url)
}
#if LANG_CXX11
inline void user_info::set_avatar_url(::std::string&& value) {
  
  avatar_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.user_info.avatar_url)
}
#endif
inline void user_info::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.user_info.avatar_url)
}
inline void user_info::set_avatar_url(const void* value, size_t size) {
  
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.user_info.avatar_url)
}
inline ::std::string* user_info::mutable_avatar_url() {
  
  // @@protoc_insertion_point(field_mutable:common.user_info.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_info::release_avatar_url() {
  // @@protoc_insertion_point(field_release:common.user_info.avatar_url)
  
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_info::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    
  } else {
    
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:common.user_info.avatar_url)
}

// bytes introduction = 5;
inline void user_info::clear_introduction() {
  introduction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_info::introduction() const {
  // @@protoc_insertion_point(field_get:common.user_info.introduction)
  return introduction_.GetNoArena();
}
inline void user_info::set_introduction(const ::std::string& value) {
  
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.user_info.introduction)
}
#if LANG_CXX11
inline void user_info::set_introduction(::std::string&& value) {
  
  introduction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.user_info.introduction)
}
#endif
inline void user_info::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.user_info.introduction)
}
inline void user_info::set_introduction(const void* value, size_t size) {
  
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.user_info.introduction)
}
inline ::std::string* user_info::mutable_introduction() {
  
  // @@protoc_insertion_point(field_mutable:common.user_info.introduction)
  return introduction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_info::release_introduction() {
  // @@protoc_insertion_point(field_release:common.user_info.introduction)
  
  return introduction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_info::set_allocated_introduction(::std::string* introduction) {
  if (introduction != NULL) {
    
  } else {
    
  }
  introduction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), introduction);
  // @@protoc_insertion_point(field_set_allocated:common.user_info.introduction)
}

// uint32 sex = 6;
inline void user_info::clear_sex() {
  sex_ = 0u;
}
inline ::google::protobuf::uint32 user_info::sex() const {
  // @@protoc_insertion_point(field_get:common.user_info.sex)
  return sex_;
}
inline void user_info::set_sex(::google::protobuf::uint32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:common.user_info.sex)
}

// uint64 user_identity = 7;
inline void user_info::clear_user_identity() {
  user_identity_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 user_info::user_identity() const {
  // @@protoc_insertion_point(field_get:common.user_info.user_identity)
  return user_identity_;
}
inline void user_info::set_user_identity(::google::protobuf::uint64 value) {
  
  user_identity_ = value;
  // @@protoc_insertion_point(field_set:common.user_info.user_identity)
}

// -------------------------------------------------------------------

// single_msg_push

// uint32 send_id = 1;
inline void single_msg_push::clear_send_id() {
  send_id_ = 0u;
}
inline ::google::protobuf::uint32 single_msg_push::send_id() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.send_id)
  return send_id_;
}
inline void single_msg_push::set_send_id(::google::protobuf::uint32 value) {
  
  send_id_ = value;
  // @@protoc_insertion_point(field_set:common.single_msg_push.send_id)
}

// bytes send_nickname = 2;
inline void single_msg_push::clear_send_nickname() {
  send_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& single_msg_push::send_nickname() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.send_nickname)
  return send_nickname_.GetNoArena();
}
inline void single_msg_push::set_send_nickname(const ::std::string& value) {
  
  send_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.single_msg_push.send_nickname)
}
#if LANG_CXX11
inline void single_msg_push::set_send_nickname(::std::string&& value) {
  
  send_nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.single_msg_push.send_nickname)
}
#endif
inline void single_msg_push::set_send_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  send_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.single_msg_push.send_nickname)
}
inline void single_msg_push::set_send_nickname(const void* value, size_t size) {
  
  send_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.single_msg_push.send_nickname)
}
inline ::std::string* single_msg_push::mutable_send_nickname() {
  
  // @@protoc_insertion_point(field_mutable:common.single_msg_push.send_nickname)
  return send_nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* single_msg_push::release_send_nickname() {
  // @@protoc_insertion_point(field_release:common.single_msg_push.send_nickname)
  
  return send_nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void single_msg_push::set_allocated_send_nickname(::std::string* send_nickname) {
  if (send_nickname != NULL) {
    
  } else {
    
  }
  send_nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_nickname);
  // @@protoc_insertion_point(field_set_allocated:common.single_msg_push.send_nickname)
}

// bytes send_avatar = 3;
inline void single_msg_push::clear_send_avatar() {
  send_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& single_msg_push::send_avatar() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.send_avatar)
  return send_avatar_.GetNoArena();
}
inline void single_msg_push::set_send_avatar(const ::std::string& value) {
  
  send_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.single_msg_push.send_avatar)
}
#if LANG_CXX11
inline void single_msg_push::set_send_avatar(::std::string&& value) {
  
  send_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.single_msg_push.send_avatar)
}
#endif
inline void single_msg_push::set_send_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  send_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.single_msg_push.send_avatar)
}
inline void single_msg_push::set_send_avatar(const void* value, size_t size) {
  
  send_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.single_msg_push.send_avatar)
}
inline ::std::string* single_msg_push::mutable_send_avatar() {
  
  // @@protoc_insertion_point(field_mutable:common.single_msg_push.send_avatar)
  return send_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* single_msg_push::release_send_avatar() {
  // @@protoc_insertion_point(field_release:common.single_msg_push.send_avatar)
  
  return send_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void single_msg_push::set_allocated_send_avatar(::std::string* send_avatar) {
  if (send_avatar != NULL) {
    
  } else {
    
  }
  send_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_avatar);
  // @@protoc_insertion_point(field_set_allocated:common.single_msg_push.send_avatar)
}

// uint32 send_type = 4;
inline void single_msg_push::clear_send_type() {
  send_type_ = 0u;
}
inline ::google::protobuf::uint32 single_msg_push::send_type() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.send_type)
  return send_type_;
}
inline void single_msg_push::set_send_type(::google::protobuf::uint32 value) {
  
  send_type_ = value;
  // @@protoc_insertion_point(field_set:common.single_msg_push.send_type)
}

// uint32 recv_id = 5;
inline void single_msg_push::clear_recv_id() {
  recv_id_ = 0u;
}
inline ::google::protobuf::uint32 single_msg_push::recv_id() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.recv_id)
  return recv_id_;
}
inline void single_msg_push::set_recv_id(::google::protobuf::uint32 value) {
  
  recv_id_ = value;
  // @@protoc_insertion_point(field_set:common.single_msg_push.recv_id)
}

// bytes recv_nickname = 6;
inline void single_msg_push::clear_recv_nickname() {
  recv_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& single_msg_push::recv_nickname() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.recv_nickname)
  return recv_nickname_.GetNoArena();
}
inline void single_msg_push::set_recv_nickname(const ::std::string& value) {
  
  recv_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.single_msg_push.recv_nickname)
}
#if LANG_CXX11
inline void single_msg_push::set_recv_nickname(::std::string&& value) {
  
  recv_nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.single_msg_push.recv_nickname)
}
#endif
inline void single_msg_push::set_recv_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recv_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.single_msg_push.recv_nickname)
}
inline void single_msg_push::set_recv_nickname(const void* value, size_t size) {
  
  recv_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.single_msg_push.recv_nickname)
}
inline ::std::string* single_msg_push::mutable_recv_nickname() {
  
  // @@protoc_insertion_point(field_mutable:common.single_msg_push.recv_nickname)
  return recv_nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* single_msg_push::release_recv_nickname() {
  // @@protoc_insertion_point(field_release:common.single_msg_push.recv_nickname)
  
  return recv_nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void single_msg_push::set_allocated_recv_nickname(::std::string* recv_nickname) {
  if (recv_nickname != NULL) {
    
  } else {
    
  }
  recv_nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_nickname);
  // @@protoc_insertion_point(field_set_allocated:common.single_msg_push.recv_nickname)
}

// bytes recv_avatar = 7;
inline void single_msg_push::clear_recv_avatar() {
  recv_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& single_msg_push::recv_avatar() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.recv_avatar)
  return recv_avatar_.GetNoArena();
}
inline void single_msg_push::set_recv_avatar(const ::std::string& value) {
  
  recv_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.single_msg_push.recv_avatar)
}
#if LANG_CXX11
inline void single_msg_push::set_recv_avatar(::std::string&& value) {
  
  recv_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.single_msg_push.recv_avatar)
}
#endif
inline void single_msg_push::set_recv_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recv_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.single_msg_push.recv_avatar)
}
inline void single_msg_push::set_recv_avatar(const void* value, size_t size) {
  
  recv_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.single_msg_push.recv_avatar)
}
inline ::std::string* single_msg_push::mutable_recv_avatar() {
  
  // @@protoc_insertion_point(field_mutable:common.single_msg_push.recv_avatar)
  return recv_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* single_msg_push::release_recv_avatar() {
  // @@protoc_insertion_point(field_release:common.single_msg_push.recv_avatar)
  
  return recv_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void single_msg_push::set_allocated_recv_avatar(::std::string* recv_avatar) {
  if (recv_avatar != NULL) {
    
  } else {
    
  }
  recv_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_avatar);
  // @@protoc_insertion_point(field_set_allocated:common.single_msg_push.recv_avatar)
}

// uint32 recv_type = 8;
inline void single_msg_push::clear_recv_type() {
  recv_type_ = 0u;
}
inline ::google::protobuf::uint32 single_msg_push::recv_type() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.recv_type)
  return recv_type_;
}
inline void single_msg_push::set_recv_type(::google::protobuf::uint32 value) {
  
  recv_type_ = value;
  // @@protoc_insertion_point(field_set:common.single_msg_push.recv_type)
}

// uint32 msg_type = 9;
inline void single_msg_push::clear_msg_type() {
  msg_type_ = 0u;
}
inline ::google::protobuf::uint32 single_msg_push::msg_type() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.msg_type)
  return msg_type_;
}
inline void single_msg_push::set_msg_type(::google::protobuf::uint32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:common.single_msg_push.msg_type)
}

// bytes msg = 10;
inline void single_msg_push::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& single_msg_push::msg() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.msg)
  return msg_.GetNoArena();
}
inline void single_msg_push::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.single_msg_push.msg)
}
#if LANG_CXX11
inline void single_msg_push::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.single_msg_push.msg)
}
#endif
inline void single_msg_push::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.single_msg_push.msg)
}
inline void single_msg_push::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.single_msg_push.msg)
}
inline ::std::string* single_msg_push::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:common.single_msg_push.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* single_msg_push::release_msg() {
  // @@protoc_insertion_point(field_release:common.single_msg_push.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void single_msg_push::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:common.single_msg_push.msg)
}

// uint64 msg_id = 11;
inline void single_msg_push::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 single_msg_push::msg_id() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.msg_id)
  return msg_id_;
}
inline void single_msg_push::set_msg_id(::google::protobuf::uint64 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:common.single_msg_push.msg_id)
}

// uint32 send_time = 12;
inline void single_msg_push::clear_send_time() {
  send_time_ = 0u;
}
inline ::google::protobuf::uint32 single_msg_push::send_time() const {
  // @@protoc_insertion_point(field_get:common.single_msg_push.send_time)
  return send_time_;
}
inline void single_msg_push::set_send_time(::google::protobuf::uint32 value) {
  
  send_time_ = value;
  // @@protoc_insertion_point(field_set:common.single_msg_push.send_time)
}

// -------------------------------------------------------------------

// session_info

// uint64 session_id = 1;
inline void session_info::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 session_info::session_id() const {
  // @@protoc_insertion_point(field_get:common.session_info.session_id)
  return session_id_;
}
inline void session_info::set_session_id(::google::protobuf::uint64 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.session_id)
}

// uint32 session_type = 2;
inline void session_info::clear_session_type() {
  session_type_ = 0u;
}
inline ::google::protobuf::uint32 session_info::session_type() const {
  // @@protoc_insertion_point(field_get:common.session_info.session_type)
  return session_type_;
}
inline void session_info::set_session_type(::google::protobuf::uint32 value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.session_type)
}

// uint32 req_session_time = 3;
inline void session_info::clear_req_session_time() {
  req_session_time_ = 0u;
}
inline ::google::protobuf::uint32 session_info::req_session_time() const {
  // @@protoc_insertion_point(field_get:common.session_info.req_session_time)
  return req_session_time_;
}
inline void session_info::set_req_session_time(::google::protobuf::uint32 value) {
  
  req_session_time_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.req_session_time)
}

// uint32 enter_session_time = 4;
inline void session_info::clear_enter_session_time() {
  enter_session_time_ = 0u;
}
inline ::google::protobuf::uint32 session_info::enter_session_time() const {
  // @@protoc_insertion_point(field_get:common.session_info.enter_session_time)
  return enter_session_time_;
}
inline void session_info::set_enter_session_time(::google::protobuf::uint32 value) {
  
  enter_session_time_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.enter_session_time)
}

// uint32 close_session_time = 5;
inline void session_info::clear_close_session_time() {
  close_session_time_ = 0u;
}
inline ::google::protobuf::uint32 session_info::close_session_time() const {
  // @@protoc_insertion_point(field_get:common.session_info.close_session_time)
  return close_session_time_;
}
inline void session_info::set_close_session_time(::google::protobuf::uint32 value) {
  
  close_session_time_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.close_session_time)
}

// uint32 customer_id = 6;
inline void session_info::clear_customer_id() {
  customer_id_ = 0u;
}
inline ::google::protobuf::uint32 session_info::customer_id() const {
  // @@protoc_insertion_point(field_get:common.session_info.customer_id)
  return customer_id_;
}
inline void session_info::set_customer_id(::google::protobuf::uint32 value) {
  
  customer_id_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.customer_id)
}

// uint32 customer_type = 7;
inline void session_info::clear_customer_type() {
  customer_type_ = 0u;
}
inline ::google::protobuf::uint32 session_info::customer_type() const {
  // @@protoc_insertion_point(field_get:common.session_info.customer_type)
  return customer_type_;
}
inline void session_info::set_customer_type(::google::protobuf::uint32 value) {
  
  customer_type_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.customer_type)
}

// bytes customer_nickname = 8;
inline void session_info::clear_customer_nickname() {
  customer_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::customer_nickname() const {
  // @@protoc_insertion_point(field_get:common.session_info.customer_nickname)
  return customer_nickname_.GetNoArena();
}
inline void session_info::set_customer_nickname(const ::std::string& value) {
  
  customer_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.customer_nickname)
}
#if LANG_CXX11
inline void session_info::set_customer_nickname(::std::string&& value) {
  
  customer_nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.customer_nickname)
}
#endif
inline void session_info::set_customer_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.customer_nickname)
}
inline void session_info::set_customer_nickname(const void* value, size_t size) {
  
  customer_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.customer_nickname)
}
inline ::std::string* session_info::mutable_customer_nickname() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.customer_nickname)
  return customer_nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_customer_nickname() {
  // @@protoc_insertion_point(field_release:common.session_info.customer_nickname)
  
  return customer_nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_customer_nickname(::std::string* customer_nickname) {
  if (customer_nickname != NULL) {
    
  } else {
    
  }
  customer_nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_nickname);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.customer_nickname)
}

// bytes customer_avatar = 9;
inline void session_info::clear_customer_avatar() {
  customer_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::customer_avatar() const {
  // @@protoc_insertion_point(field_get:common.session_info.customer_avatar)
  return customer_avatar_.GetNoArena();
}
inline void session_info::set_customer_avatar(const ::std::string& value) {
  
  customer_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.customer_avatar)
}
#if LANG_CXX11
inline void session_info::set_customer_avatar(::std::string&& value) {
  
  customer_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.customer_avatar)
}
#endif
inline void session_info::set_customer_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.customer_avatar)
}
inline void session_info::set_customer_avatar(const void* value, size_t size) {
  
  customer_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.customer_avatar)
}
inline ::std::string* session_info::mutable_customer_avatar() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.customer_avatar)
  return customer_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_customer_avatar() {
  // @@protoc_insertion_point(field_release:common.session_info.customer_avatar)
  
  return customer_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_customer_avatar(::std::string* customer_avatar) {
  if (customer_avatar != NULL) {
    
  } else {
    
  }
  customer_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_avatar);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.customer_avatar)
}

// uint32 customerservice_id = 10;
inline void session_info::clear_customerservice_id() {
  customerservice_id_ = 0u;
}
inline ::google::protobuf::uint32 session_info::customerservice_id() const {
  // @@protoc_insertion_point(field_get:common.session_info.customerservice_id)
  return customerservice_id_;
}
inline void session_info::set_customerservice_id(::google::protobuf::uint32 value) {
  
  customerservice_id_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.customerservice_id)
}

// uint32 customerservice_type = 11;
inline void session_info::clear_customerservice_type() {
  customerservice_type_ = 0u;
}
inline ::google::protobuf::uint32 session_info::customerservice_type() const {
  // @@protoc_insertion_point(field_get:common.session_info.customerservice_type)
  return customerservice_type_;
}
inline void session_info::set_customerservice_type(::google::protobuf::uint32 value) {
  
  customerservice_type_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.customerservice_type)
}

// bytes customerservice_nickname = 12;
inline void session_info::clear_customerservice_nickname() {
  customerservice_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::customerservice_nickname() const {
  // @@protoc_insertion_point(field_get:common.session_info.customerservice_nickname)
  return customerservice_nickname_.GetNoArena();
}
inline void session_info::set_customerservice_nickname(const ::std::string& value) {
  
  customerservice_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.customerservice_nickname)
}
#if LANG_CXX11
inline void session_info::set_customerservice_nickname(::std::string&& value) {
  
  customerservice_nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.customerservice_nickname)
}
#endif
inline void session_info::set_customerservice_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customerservice_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.customerservice_nickname)
}
inline void session_info::set_customerservice_nickname(const void* value, size_t size) {
  
  customerservice_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.customerservice_nickname)
}
inline ::std::string* session_info::mutable_customerservice_nickname() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.customerservice_nickname)
  return customerservice_nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_customerservice_nickname() {
  // @@protoc_insertion_point(field_release:common.session_info.customerservice_nickname)
  
  return customerservice_nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_customerservice_nickname(::std::string* customerservice_nickname) {
  if (customerservice_nickname != NULL) {
    
  } else {
    
  }
  customerservice_nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customerservice_nickname);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.customerservice_nickname)
}

// bytes customerservice_avatar = 13;
inline void session_info::clear_customerservice_avatar() {
  customerservice_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::customerservice_avatar() const {
  // @@protoc_insertion_point(field_get:common.session_info.customerservice_avatar)
  return customerservice_avatar_.GetNoArena();
}
inline void session_info::set_customerservice_avatar(const ::std::string& value) {
  
  customerservice_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.customerservice_avatar)
}
#if LANG_CXX11
inline void session_info::set_customerservice_avatar(::std::string&& value) {
  
  customerservice_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.customerservice_avatar)
}
#endif
inline void session_info::set_customerservice_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customerservice_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.customerservice_avatar)
}
inline void session_info::set_customerservice_avatar(const void* value, size_t size) {
  
  customerservice_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.customerservice_avatar)
}
inline ::std::string* session_info::mutable_customerservice_avatar() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.customerservice_avatar)
  return customerservice_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_customerservice_avatar() {
  // @@protoc_insertion_point(field_release:common.session_info.customerservice_avatar)
  
  return customerservice_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_customerservice_avatar(::std::string* customerservice_avatar) {
  if (customerservice_avatar != NULL) {
    
  } else {
    
  }
  customerservice_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customerservice_avatar);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.customerservice_avatar)
}

// uint32 customer_login_client_type = 14;
inline void session_info::clear_customer_login_client_type() {
  customer_login_client_type_ = 0u;
}
inline ::google::protobuf::uint32 session_info::customer_login_client_type() const {
  // @@protoc_insertion_point(field_get:common.session_info.customer_login_client_type)
  return customer_login_client_type_;
}
inline void session_info::set_customer_login_client_type(::google::protobuf::uint32 value) {
  
  customer_login_client_type_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.customer_login_client_type)
}

// bytes customer_address = 15;
inline void session_info::clear_customer_address() {
  customer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::customer_address() const {
  // @@protoc_insertion_point(field_get:common.session_info.customer_address)
  return customer_address_.GetNoArena();
}
inline void session_info::set_customer_address(const ::std::string& value) {
  
  customer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.customer_address)
}
#if LANG_CXX11
inline void session_info::set_customer_address(::std::string&& value) {
  
  customer_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.customer_address)
}
#endif
inline void session_info::set_customer_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.customer_address)
}
inline void session_info::set_customer_address(const void* value, size_t size) {
  
  customer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.customer_address)
}
inline ::std::string* session_info::mutable_customer_address() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.customer_address)
  return customer_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_customer_address() {
  // @@protoc_insertion_point(field_release:common.session_info.customer_address)
  
  return customer_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_customer_address(::std::string* customer_address) {
  if (customer_address != NULL) {
    
  } else {
    
  }
  customer_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_address);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.customer_address)
}

// bytes customer_terminal_source = 16;
inline void session_info::clear_customer_terminal_source() {
  customer_terminal_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::customer_terminal_source() const {
  // @@protoc_insertion_point(field_get:common.session_info.customer_terminal_source)
  return customer_terminal_source_.GetNoArena();
}
inline void session_info::set_customer_terminal_source(const ::std::string& value) {
  
  customer_terminal_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.customer_terminal_source)
}
#if LANG_CXX11
inline void session_info::set_customer_terminal_source(::std::string&& value) {
  
  customer_terminal_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.customer_terminal_source)
}
#endif
inline void session_info::set_customer_terminal_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_terminal_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.customer_terminal_source)
}
inline void session_info::set_customer_terminal_source(const void* value, size_t size) {
  
  customer_terminal_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.customer_terminal_source)
}
inline ::std::string* session_info::mutable_customer_terminal_source() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.customer_terminal_source)
  return customer_terminal_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_customer_terminal_source() {
  // @@protoc_insertion_point(field_release:common.session_info.customer_terminal_source)
  
  return customer_terminal_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_customer_terminal_source(::std::string* customer_terminal_source) {
  if (customer_terminal_source != NULL) {
    
  } else {
    
  }
  customer_terminal_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_terminal_source);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.customer_terminal_source)
}

// bytes customer_page_source = 17;
inline void session_info::clear_customer_page_source() {
  customer_page_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::customer_page_source() const {
  // @@protoc_insertion_point(field_get:common.session_info.customer_page_source)
  return customer_page_source_.GetNoArena();
}
inline void session_info::set_customer_page_source(const ::std::string& value) {
  
  customer_page_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.customer_page_source)
}
#if LANG_CXX11
inline void session_info::set_customer_page_source(::std::string&& value) {
  
  customer_page_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.customer_page_source)
}
#endif
inline void session_info::set_customer_page_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  customer_page_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.customer_page_source)
}
inline void session_info::set_customer_page_source(const void* value, size_t size) {
  
  customer_page_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.customer_page_source)
}
inline ::std::string* session_info::mutable_customer_page_source() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.customer_page_source)
  return customer_page_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_customer_page_source() {
  // @@protoc_insertion_point(field_release:common.session_info.customer_page_source)
  
  return customer_page_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_customer_page_source(::std::string* customer_page_source) {
  if (customer_page_source != NULL) {
    
  } else {
    
  }
  customer_page_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customer_page_source);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.customer_page_source)
}

// uint32 question_stage = 18;
inline void session_info::clear_question_stage() {
  question_stage_ = 0u;
}
inline ::google::protobuf::uint32 session_info::question_stage() const {
  // @@protoc_insertion_point(field_get:common.session_info.question_stage)
  return question_stage_;
}
inline void session_info::set_question_stage(::google::protobuf::uint32 value) {
  
  question_stage_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.question_stage)
}

// uint32 consult_type = 19;
inline void session_info::clear_consult_type() {
  consult_type_ = 0u;
}
inline ::google::protobuf::uint32 session_info::consult_type() const {
  // @@protoc_insertion_point(field_get:common.session_info.consult_type)
  return consult_type_;
}
inline void session_info::set_consult_type(::google::protobuf::uint32 value) {
  
  consult_type_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.consult_type)
}

// repeated .common.single_msg_push msg_list = 20;
inline int session_info::msg_list_size() const {
  return msg_list_.size();
}
inline void session_info::clear_msg_list() {
  msg_list_.Clear();
}
inline ::common::single_msg_push* session_info::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:common.session_info.msg_list)
  return msg_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::common::single_msg_push >*
session_info::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:common.session_info.msg_list)
  return &msg_list_;
}
inline const ::common::single_msg_push& session_info::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:common.session_info.msg_list)
  return msg_list_.Get(index);
}
inline ::common::single_msg_push* session_info::add_msg_list() {
  // @@protoc_insertion_point(field_add:common.session_info.msg_list)
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::single_msg_push >&
session_info::msg_list() const {
  // @@protoc_insertion_point(field_list:common.session_info.msg_list)
  return msg_list_;
}

// bytes session_remark = 21;
inline void session_info::clear_session_remark() {
  session_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::session_remark() const {
  // @@protoc_insertion_point(field_get:common.session_info.session_remark)
  return session_remark_.GetNoArena();
}
inline void session_info::set_session_remark(const ::std::string& value) {
  
  session_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.session_remark)
}
#if LANG_CXX11
inline void session_info::set_session_remark(::std::string&& value) {
  
  session_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.session_remark)
}
#endif
inline void session_info::set_session_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  session_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.session_remark)
}
inline void session_info::set_session_remark(const void* value, size_t size) {
  
  session_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.session_remark)
}
inline ::std::string* session_info::mutable_session_remark() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.session_remark)
  return session_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_session_remark() {
  // @@protoc_insertion_point(field_release:common.session_info.session_remark)
  
  return session_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_session_remark(::std::string* session_remark) {
  if (session_remark != NULL) {
    
  } else {
    
  }
  session_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_remark);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.session_remark)
}

// uint32 evaluate_stage = 22;
inline void session_info::clear_evaluate_stage() {
  evaluate_stage_ = 0u;
}
inline ::google::protobuf::uint32 session_info::evaluate_stage() const {
  // @@protoc_insertion_point(field_get:common.session_info.evaluate_stage)
  return evaluate_stage_;
}
inline void session_info::set_evaluate_stage(::google::protobuf::uint32 value) {
  
  evaluate_stage_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.evaluate_stage)
}

// bytes evaluate_remark = 23;
inline void session_info::clear_evaluate_remark() {
  evaluate_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::evaluate_remark() const {
  // @@protoc_insertion_point(field_get:common.session_info.evaluate_remark)
  return evaluate_remark_.GetNoArena();
}
inline void session_info::set_evaluate_remark(const ::std::string& value) {
  
  evaluate_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.evaluate_remark)
}
#if LANG_CXX11
inline void session_info::set_evaluate_remark(::std::string&& value) {
  
  evaluate_remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.evaluate_remark)
}
#endif
inline void session_info::set_evaluate_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  evaluate_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.evaluate_remark)
}
inline void session_info::set_evaluate_remark(const void* value, size_t size) {
  
  evaluate_remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.evaluate_remark)
}
inline ::std::string* session_info::mutable_evaluate_remark() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.evaluate_remark)
  return evaluate_remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_evaluate_remark() {
  // @@protoc_insertion_point(field_release:common.session_info.evaluate_remark)
  
  return evaluate_remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_evaluate_remark(::std::string* evaluate_remark) {
  if (evaluate_remark != NULL) {
    
  } else {
    
  }
  evaluate_remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), evaluate_remark);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.evaluate_remark)
}

// uint32 quality_control_stage = 24;
inline void session_info::clear_quality_control_stage() {
  quality_control_stage_ = 0u;
}
inline ::google::protobuf::uint32 session_info::quality_control_stage() const {
  // @@protoc_insertion_point(field_get:common.session_info.quality_control_stage)
  return quality_control_stage_;
}
inline void session_info::set_quality_control_stage(::google::protobuf::uint32 value) {
  
  quality_control_stage_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.quality_control_stage)
}

// uint32 quality_control_time = 25;
inline void session_info::clear_quality_control_time() {
  quality_control_time_ = 0u;
}
inline ::google::protobuf::uint32 session_info::quality_control_time() const {
  // @@protoc_insertion_point(field_get:common.session_info.quality_control_time)
  return quality_control_time_;
}
inline void session_info::set_quality_control_time(::google::protobuf::uint32 value) {
  
  quality_control_time_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.quality_control_time)
}

// uint32 quality_control_userid = 26;
inline void session_info::clear_quality_control_userid() {
  quality_control_userid_ = 0u;
}
inline ::google::protobuf::uint32 session_info::quality_control_userid() const {
  // @@protoc_insertion_point(field_get:common.session_info.quality_control_userid)
  return quality_control_userid_;
}
inline void session_info::set_quality_control_userid(::google::protobuf::uint32 value) {
  
  quality_control_userid_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.quality_control_userid)
}

// bytes quality_control_nickname = 27;
inline void session_info::clear_quality_control_nickname() {
  quality_control_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::quality_control_nickname() const {
  // @@protoc_insertion_point(field_get:common.session_info.quality_control_nickname)
  return quality_control_nickname_.GetNoArena();
}
inline void session_info::set_quality_control_nickname(const ::std::string& value) {
  
  quality_control_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.quality_control_nickname)
}
#if LANG_CXX11
inline void session_info::set_quality_control_nickname(::std::string&& value) {
  
  quality_control_nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.quality_control_nickname)
}
#endif
inline void session_info::set_quality_control_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quality_control_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.quality_control_nickname)
}
inline void session_info::set_quality_control_nickname(const void* value, size_t size) {
  
  quality_control_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.quality_control_nickname)
}
inline ::std::string* session_info::mutable_quality_control_nickname() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.quality_control_nickname)
  return quality_control_nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_quality_control_nickname() {
  // @@protoc_insertion_point(field_release:common.session_info.quality_control_nickname)
  
  return quality_control_nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_quality_control_nickname(::std::string* quality_control_nickname) {
  if (quality_control_nickname != NULL) {
    
  } else {
    
  }
  quality_control_nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quality_control_nickname);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.quality_control_nickname)
}

// bytes quality_control_comment = 28;
inline void session_info::clear_quality_control_comment() {
  quality_control_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& session_info::quality_control_comment() const {
  // @@protoc_insertion_point(field_get:common.session_info.quality_control_comment)
  return quality_control_comment_.GetNoArena();
}
inline void session_info::set_quality_control_comment(const ::std::string& value) {
  
  quality_control_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.session_info.quality_control_comment)
}
#if LANG_CXX11
inline void session_info::set_quality_control_comment(::std::string&& value) {
  
  quality_control_comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.session_info.quality_control_comment)
}
#endif
inline void session_info::set_quality_control_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  quality_control_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.session_info.quality_control_comment)
}
inline void session_info::set_quality_control_comment(const void* value, size_t size) {
  
  quality_control_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.session_info.quality_control_comment)
}
inline ::std::string* session_info::mutable_quality_control_comment() {
  
  // @@protoc_insertion_point(field_mutable:common.session_info.quality_control_comment)
  return quality_control_comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* session_info::release_quality_control_comment() {
  // @@protoc_insertion_point(field_release:common.session_info.quality_control_comment)
  
  return quality_control_comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void session_info::set_allocated_quality_control_comment(::std::string* quality_control_comment) {
  if (quality_control_comment != NULL) {
    
  } else {
    
  }
  quality_control_comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), quality_control_comment);
  // @@protoc_insertion_point(field_set_allocated:common.session_info.quality_control_comment)
}

// uint32 reponse_timeout_count = 29;
inline void session_info::clear_reponse_timeout_count() {
  reponse_timeout_count_ = 0u;
}
inline ::google::protobuf::uint32 session_info::reponse_timeout_count() const {
  // @@protoc_insertion_point(field_get:common.session_info.reponse_timeout_count)
  return reponse_timeout_count_;
}
inline void session_info::set_reponse_timeout_count(::google::protobuf::uint32 value) {
  
  reponse_timeout_count_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.reponse_timeout_count)
}

// uint32 session_timeout_count = 30;
inline void session_info::clear_session_timeout_count() {
  session_timeout_count_ = 0u;
}
inline ::google::protobuf::uint32 session_info::session_timeout_count() const {
  // @@protoc_insertion_point(field_get:common.session_info.session_timeout_count)
  return session_timeout_count_;
}
inline void session_info::set_session_timeout_count(::google::protobuf::uint32 value) {
  
  session_timeout_count_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.session_timeout_count)
}

// uint32 session_stage = 31;
inline void session_info::clear_session_stage() {
  session_stage_ = 0u;
}
inline ::google::protobuf::uint32 session_info::session_stage() const {
  // @@protoc_insertion_point(field_get:common.session_info.session_stage)
  return session_stage_;
}
inline void session_info::set_session_stage(::google::protobuf::uint32 value) {
  
  session_stage_ = value;
  // @@protoc_insertion_point(field_set:common.session_info.session_stage)
}

// -------------------------------------------------------------------

// quality_control_option

// uint64 option_id = 1;
inline void quality_control_option::clear_option_id() {
  option_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 quality_control_option::option_id() const {
  // @@protoc_insertion_point(field_get:common.quality_control_option.option_id)
  return option_id_;
}
inline void quality_control_option::set_option_id(::google::protobuf::uint64 value) {
  
  option_id_ = value;
  // @@protoc_insertion_point(field_set:common.quality_control_option.option_id)
}

// bytes option_name = 2;
inline void quality_control_option::clear_option_name() {
  option_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& quality_control_option::option_name() const {
  // @@protoc_insertion_point(field_get:common.quality_control_option.option_name)
  return option_name_.GetNoArena();
}
inline void quality_control_option::set_option_name(const ::std::string& value) {
  
  option_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.quality_control_option.option_name)
}
#if LANG_CXX11
inline void quality_control_option::set_option_name(::std::string&& value) {
  
  option_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.quality_control_option.option_name)
}
#endif
inline void quality_control_option::set_option_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  option_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.quality_control_option.option_name)
}
inline void quality_control_option::set_option_name(const void* value, size_t size) {
  
  option_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.quality_control_option.option_name)
}
inline ::std::string* quality_control_option::mutable_option_name() {
  
  // @@protoc_insertion_point(field_mutable:common.quality_control_option.option_name)
  return option_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* quality_control_option::release_option_name() {
  // @@protoc_insertion_point(field_release:common.quality_control_option.option_name)
  
  return option_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void quality_control_option::set_allocated_option_name(::std::string* option_name) {
  if (option_name != NULL) {
    
  } else {
    
  }
  option_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), option_name);
  // @@protoc_insertion_point(field_set_allocated:common.quality_control_option.option_name)
}

// float judge_score = 3;
inline void quality_control_option::clear_judge_score() {
  judge_score_ = 0;
}
inline float quality_control_option::judge_score() const {
  // @@protoc_insertion_point(field_get:common.quality_control_option.judge_score)
  return judge_score_;
}
inline void quality_control_option::set_judge_score(float value) {
  
  judge_score_ = value;
  // @@protoc_insertion_point(field_set:common.quality_control_option.judge_score)
}

// float option_score = 4;
inline void quality_control_option::clear_option_score() {
  option_score_ = 0;
}
inline float quality_control_option::option_score() const {
  // @@protoc_insertion_point(field_get:common.quality_control_option.option_score)
  return option_score_;
}
inline void quality_control_option::set_option_score(float value) {
  
  option_score_ = value;
  // @@protoc_insertion_point(field_set:common.quality_control_option.option_score)
}

// -------------------------------------------------------------------

// taboo_option

// uint64 option_id = 1;
inline void taboo_option::clear_option_id() {
  option_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 taboo_option::option_id() const {
  // @@protoc_insertion_point(field_get:common.taboo_option.option_id)
  return option_id_;
}
inline void taboo_option::set_option_id(::google::protobuf::uint64 value) {
  
  option_id_ = value;
  // @@protoc_insertion_point(field_set:common.taboo_option.option_id)
}

// bytes option_name = 2;
inline void taboo_option::clear_option_name() {
  option_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& taboo_option::option_name() const {
  // @@protoc_insertion_point(field_get:common.taboo_option.option_name)
  return option_name_.GetNoArena();
}
inline void taboo_option::set_option_name(const ::std::string& value) {
  
  option_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.taboo_option.option_name)
}
#if LANG_CXX11
inline void taboo_option::set_option_name(::std::string&& value) {
  
  option_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.taboo_option.option_name)
}
#endif
inline void taboo_option::set_option_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  option_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.taboo_option.option_name)
}
inline void taboo_option::set_option_name(const void* value, size_t size) {
  
  option_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.taboo_option.option_name)
}
inline ::std::string* taboo_option::mutable_option_name() {
  
  // @@protoc_insertion_point(field_mutable:common.taboo_option.option_name)
  return option_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* taboo_option::release_option_name() {
  // @@protoc_insertion_point(field_release:common.taboo_option.option_name)
  
  return option_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void taboo_option::set_allocated_option_name(::std::string* option_name) {
  if (option_name != NULL) {
    
  } else {
    
  }
  option_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), option_name);
  // @@protoc_insertion_point(field_set_allocated:common.taboo_option.option_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_common_2eproto
