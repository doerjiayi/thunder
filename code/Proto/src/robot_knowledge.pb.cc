// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_knowledge.proto

#include "robot_knowledge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_errorinfo;
}  // namespace protobuf_common_2eproto
namespace protobuf_robot_5fknowledge_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fknowledge_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_similar_question;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fknowledge_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ai_question;
}  // namespace protobuf_robot_5fknowledge_2eproto
namespace robot_knowledge {
class similar_questionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<similar_question>
      _instance;
} _similar_question_default_instance_;
class ai_questionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ai_question>
      _instance;
} _ai_question_default_instance_;
class get_ai_question_list_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<get_ai_question_list_req>
      _instance;
} _get_ai_question_list_req_default_instance_;
class get_ai_question_list_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<get_ai_question_list_ack>
      _instance;
} _get_ai_question_list_ack_default_instance_;
class inquery_ai_question_content_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<inquery_ai_question_content_req>
      _instance;
} _inquery_ai_question_content_req_default_instance_;
class inquery_ai_question_content_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<inquery_ai_question_content_ack>
      _instance;
} _inquery_ai_question_content_ack_default_instance_;
class edit_ai_question_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<edit_ai_question_req>
      _instance;
} _edit_ai_question_req_default_instance_;
class edit_ai_question_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<edit_ai_question_ack>
      _instance;
} _edit_ai_question_ack_default_instance_;
}  // namespace robot_knowledge
namespace protobuf_robot_5fknowledge_2eproto {
static void InitDefaultssimilar_question() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_knowledge::_similar_question_default_instance_;
    new (ptr) ::robot_knowledge::similar_question();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_knowledge::similar_question::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_similar_question =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssimilar_question}, {}};

static void InitDefaultsai_question() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_knowledge::_ai_question_default_instance_;
    new (ptr) ::robot_knowledge::ai_question();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_knowledge::ai_question::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ai_question =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsai_question}, {
      &protobuf_robot_5fknowledge_2eproto::scc_info_similar_question.base,}};

static void InitDefaultsget_ai_question_list_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_knowledge::_get_ai_question_list_req_default_instance_;
    new (ptr) ::robot_knowledge::get_ai_question_list_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_knowledge::get_ai_question_list_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_get_ai_question_list_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsget_ai_question_list_req}, {}};

static void InitDefaultsget_ai_question_list_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_knowledge::_get_ai_question_list_ack_default_instance_;
    new (ptr) ::robot_knowledge::get_ai_question_list_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_knowledge::get_ai_question_list_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_get_ai_question_list_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsget_ai_question_list_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,
      &protobuf_robot_5fknowledge_2eproto::scc_info_ai_question.base,}};

static void InitDefaultsinquery_ai_question_content_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_knowledge::_inquery_ai_question_content_req_default_instance_;
    new (ptr) ::robot_knowledge::inquery_ai_question_content_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_knowledge::inquery_ai_question_content_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_inquery_ai_question_content_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsinquery_ai_question_content_req}, {}};

static void InitDefaultsinquery_ai_question_content_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_knowledge::_inquery_ai_question_content_ack_default_instance_;
    new (ptr) ::robot_knowledge::inquery_ai_question_content_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_knowledge::inquery_ai_question_content_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_inquery_ai_question_content_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsinquery_ai_question_content_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,
      &protobuf_robot_5fknowledge_2eproto::scc_info_ai_question.base,}};

static void InitDefaultsedit_ai_question_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_knowledge::_edit_ai_question_req_default_instance_;
    new (ptr) ::robot_knowledge::edit_ai_question_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_knowledge::edit_ai_question_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_edit_ai_question_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsedit_ai_question_req}, {
      &protobuf_robot_5fknowledge_2eproto::scc_info_ai_question.base,}};

static void InitDefaultsedit_ai_question_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_knowledge::_edit_ai_question_ack_default_instance_;
    new (ptr) ::robot_knowledge::edit_ai_question_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_knowledge::edit_ai_question_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_edit_ai_question_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsedit_ai_question_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,
      &protobuf_robot_5fknowledge_2eproto::scc_info_ai_question.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_similar_question.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ai_question.base);
  ::google::protobuf::internal::InitSCC(&scc_info_get_ai_question_list_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_get_ai_question_list_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_inquery_ai_question_content_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_inquery_ai_question_content_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_edit_ai_question_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_edit_ai_question_ack.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::similar_question, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::similar_question, index_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::similar_question, question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::similar_question, create_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::similar_question, update_date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::ai_question, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::ai_question, index_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::ai_question, standard_question_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::ai_question, question_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::ai_question, question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::ai_question, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::ai_question, create_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::ai_question, update_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::ai_question, similar_questions_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::get_ai_question_list_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::get_ai_question_list_req, question_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::get_ai_question_list_req, page_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::get_ai_question_list_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::get_ai_question_list_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::get_ai_question_list_ack, ai_question_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::get_ai_question_list_ack, total_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::inquery_ai_question_content_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::inquery_ai_question_content_req, standard_question_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::inquery_ai_question_content_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::inquery_ai_question_content_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::inquery_ai_question_content_ack, question_content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::edit_ai_question_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::edit_ai_question_req, question_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::edit_ai_question_req, update_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::edit_ai_question_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::edit_ai_question_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_knowledge::edit_ai_question_ack, question_content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::robot_knowledge::similar_question)},
  { 9, -1, sizeof(::robot_knowledge::ai_question)},
  { 22, -1, sizeof(::robot_knowledge::get_ai_question_list_req)},
  { 29, -1, sizeof(::robot_knowledge::get_ai_question_list_ack)},
  { 37, -1, sizeof(::robot_knowledge::inquery_ai_question_content_req)},
  { 43, -1, sizeof(::robot_knowledge::inquery_ai_question_content_ack)},
  { 50, -1, sizeof(::robot_knowledge::edit_ai_question_req)},
  { 57, -1, sizeof(::robot_knowledge::edit_ai_question_ack)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_knowledge::_similar_question_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_knowledge::_ai_question_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_knowledge::_get_ai_question_list_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_knowledge::_get_ai_question_list_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_knowledge::_inquery_ai_question_content_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_knowledge::_inquery_ai_question_content_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_knowledge::_edit_ai_question_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_knowledge::_edit_ai_question_ack_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "robot_knowledge.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025robot_knowledge.proto\022\017robot_knowledge"
      "\032\014common.proto\"`\n\020similar_question\022\020\n\010in"
      "dex_id\030\001 \001(\004\022\020\n\010question\030\002 \001(\014\022\023\n\013create"
      "_date\030\003 \001(\r\022\023\n\013update_date\030\004 \001(\r\"\343\001\n\013ai_"
      "question\022\020\n\010index_id\030\001 \001(\004\022\034\n\024standard_q"
      "uestion_id\030\002 \001(\004\022\025\n\rquestion_type\030\003 \001(\r\022"
      "\020\n\010question\030\004 \001(\014\022\016\n\006answer\030\005 \001(\014\022\023\n\013cre"
      "ate_date\030\006 \001(\r\022\023\n\013update_date\030\007 \001(\r\022A\n\026s"
      "imilar_questions_list\030\010 \003(\0132!.robot_know"
      "ledge.similar_question\"\?\n\030get_ai_questio"
      "n_list_req\022\025\n\rquestion_type\030\001 \001(\r\022\014\n\004pag"
      "e\030\002 \001(\r\"\207\001\n\030get_ai_question_list_ack\022 \n\005"
      "error\030\001 \001(\0132\021.common.errorinfo\0226\n\020ai_que"
      "stion_list\030\002 \003(\0132\034.robot_knowledge.ai_qu"
      "estion\022\021\n\ttotal_num\030\003 \001(\r\"\?\n\037inquery_ai_"
      "question_content_req\022\034\n\024standard_questio"
      "n_id\030\001 \001(\004\"{\n\037inquery_ai_question_conten"
      "t_ack\022 \n\005error\030\001 \001(\0132\021.common.errorinfo\022"
      "6\n\020question_content\030\002 \001(\0132\034.robot_knowle"
      "dge.ai_question\"c\n\024edit_ai_question_req\022"
      "6\n\020question_content\030\001 \001(\0132\034.robot_knowle"
      "dge.ai_question\022\023\n\013update_type\030\002 \001(\r\"p\n\024"
      "edit_ai_question_ack\022 \n\005error\030\001 \001(\0132\021.co"
      "mmon.errorinfo\0226\n\020question_content\030\002 \001(\013"
      "2\034.robot_knowledge.ai_questionb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 998);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot_knowledge.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_robot_5fknowledge_2eproto
namespace robot_knowledge {

// ===================================================================

void similar_question::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int similar_question::kIndexIdFieldNumber;
const int similar_question::kQuestionFieldNumber;
const int similar_question::kCreateDateFieldNumber;
const int similar_question::kUpdateDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

similar_question::similar_question()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fknowledge_2eproto::scc_info_similar_question.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_knowledge.similar_question)
}
similar_question::similar_question(const similar_question& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.question().size() > 0) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  ::memcpy(&index_id_, &from.index_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_date_) -
    reinterpret_cast<char*>(&index_id_)) + sizeof(update_date_));
  // @@protoc_insertion_point(copy_constructor:robot_knowledge.similar_question)
}

void similar_question::SharedCtor() {
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_date_) -
      reinterpret_cast<char*>(&index_id_)) + sizeof(update_date_));
}

similar_question::~similar_question() {
  // @@protoc_insertion_point(destructor:robot_knowledge.similar_question)
  SharedDtor();
}

void similar_question::SharedDtor() {
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void similar_question::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* similar_question::descriptor() {
  ::protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const similar_question& similar_question::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fknowledge_2eproto::scc_info_similar_question.base);
  return *internal_default_instance();
}


void similar_question::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_knowledge.similar_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_date_) -
      reinterpret_cast<char*>(&index_id_)) + sizeof(update_date_));
  _internal_metadata_.Clear();
}

bool similar_question::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_knowledge.similar_question)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 index_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes question = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_question()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_knowledge.similar_question)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_knowledge.similar_question)
  return false;
#undef DO_
}

void similar_question::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_knowledge.similar_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index_id = 1;
  if (this->index_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index_id(), output);
  }

  // bytes question = 2;
  if (this->question().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->question(), output);
  }

  // uint32 create_date = 3;
  if (this->create_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->create_date(), output);
  }

  // uint32 update_date = 4;
  if (this->update_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_date(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_knowledge.similar_question)
}

::google::protobuf::uint8* similar_question::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_knowledge.similar_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index_id = 1;
  if (this->index_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index_id(), target);
  }

  // bytes question = 2;
  if (this->question().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->question(), target);
  }

  // uint32 create_date = 3;
  if (this->create_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->create_date(), target);
  }

  // uint32 update_date = 4;
  if (this->update_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->update_date(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_knowledge.similar_question)
  return target;
}

size_t similar_question::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_knowledge.similar_question)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes question = 2;
  if (this->question().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->question());
  }

  // uint64 index_id = 1;
  if (this->index_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index_id());
  }

  // uint32 create_date = 3;
  if (this->create_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_date());
  }

  // uint32 update_date = 4;
  if (this->update_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void similar_question::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_knowledge.similar_question)
  GOOGLE_DCHECK_NE(&from, this);
  const similar_question* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const similar_question>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_knowledge.similar_question)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_knowledge.similar_question)
    MergeFrom(*source);
  }
}

void similar_question::MergeFrom(const similar_question& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_knowledge.similar_question)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.question().size() > 0) {

    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  if (from.index_id() != 0) {
    set_index_id(from.index_id());
  }
  if (from.create_date() != 0) {
    set_create_date(from.create_date());
  }
  if (from.update_date() != 0) {
    set_update_date(from.update_date());
  }
}

void similar_question::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_knowledge.similar_question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void similar_question::CopyFrom(const similar_question& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_knowledge.similar_question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool similar_question::IsInitialized() const {
  return true;
}

void similar_question::Swap(similar_question* other) {
  if (other == this) return;
  InternalSwap(other);
}
void similar_question::InternalSwap(similar_question* other) {
  using std::swap;
  question_.Swap(&other->question_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_id_, other->index_id_);
  swap(create_date_, other->create_date_);
  swap(update_date_, other->update_date_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata similar_question::GetMetadata() const {
  protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ai_question::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ai_question::kIndexIdFieldNumber;
const int ai_question::kStandardQuestionIdFieldNumber;
const int ai_question::kQuestionTypeFieldNumber;
const int ai_question::kQuestionFieldNumber;
const int ai_question::kAnswerFieldNumber;
const int ai_question::kCreateDateFieldNumber;
const int ai_question::kUpdateDateFieldNumber;
const int ai_question::kSimilarQuestionsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ai_question::ai_question()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fknowledge_2eproto::scc_info_ai_question.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_knowledge.ai_question)
}
ai_question::ai_question(const ai_question& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      similar_questions_list_(from.similar_questions_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.question().size() > 0) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.answer().size() > 0) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  ::memcpy(&index_id_, &from.index_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_date_) -
    reinterpret_cast<char*>(&index_id_)) + sizeof(update_date_));
  // @@protoc_insertion_point(copy_constructor:robot_knowledge.ai_question)
}

void ai_question::SharedCtor() {
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_date_) -
      reinterpret_cast<char*>(&index_id_)) + sizeof(update_date_));
}

ai_question::~ai_question() {
  // @@protoc_insertion_point(destructor:robot_knowledge.ai_question)
  SharedDtor();
}

void ai_question::SharedDtor() {
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ai_question::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ai_question::descriptor() {
  ::protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ai_question& ai_question::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fknowledge_2eproto::scc_info_ai_question.base);
  return *internal_default_instance();
}


void ai_question::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_knowledge.ai_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  similar_questions_list_.Clear();
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_date_) -
      reinterpret_cast<char*>(&index_id_)) + sizeof(update_date_));
  _internal_metadata_.Clear();
}

bool ai_question::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_knowledge.ai_question)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 index_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 standard_question_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &standard_question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 question_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes question = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_question()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes answer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_answer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_date = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robot_knowledge.similar_question similar_questions_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_similar_questions_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_knowledge.ai_question)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_knowledge.ai_question)
  return false;
#undef DO_
}

void ai_question::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_knowledge.ai_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index_id = 1;
  if (this->index_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index_id(), output);
  }

  // uint64 standard_question_id = 2;
  if (this->standard_question_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->standard_question_id(), output);
  }

  // uint32 question_type = 3;
  if (this->question_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->question_type(), output);
  }

  // bytes question = 4;
  if (this->question().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->question(), output);
  }

  // bytes answer = 5;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->answer(), output);
  }

  // uint32 create_date = 6;
  if (this->create_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->create_date(), output);
  }

  // uint32 update_date = 7;
  if (this->update_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->update_date(), output);
  }

  // repeated .robot_knowledge.similar_question similar_questions_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->similar_questions_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->similar_questions_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_knowledge.ai_question)
}

::google::protobuf::uint8* ai_question::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_knowledge.ai_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index_id = 1;
  if (this->index_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index_id(), target);
  }

  // uint64 standard_question_id = 2;
  if (this->standard_question_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->standard_question_id(), target);
  }

  // uint32 question_type = 3;
  if (this->question_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->question_type(), target);
  }

  // bytes question = 4;
  if (this->question().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->question(), target);
  }

  // bytes answer = 5;
  if (this->answer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->answer(), target);
  }

  // uint32 create_date = 6;
  if (this->create_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->create_date(), target);
  }

  // uint32 update_date = 7;
  if (this->update_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->update_date(), target);
  }

  // repeated .robot_knowledge.similar_question similar_questions_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->similar_questions_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->similar_questions_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_knowledge.ai_question)
  return target;
}

size_t ai_question::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_knowledge.ai_question)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .robot_knowledge.similar_question similar_questions_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->similar_questions_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->similar_questions_list(static_cast<int>(i)));
    }
  }

  // bytes question = 4;
  if (this->question().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->question());
  }

  // bytes answer = 5;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->answer());
  }

  // uint64 index_id = 1;
  if (this->index_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index_id());
  }

  // uint64 standard_question_id = 2;
  if (this->standard_question_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->standard_question_id());
  }

  // uint32 question_type = 3;
  if (this->question_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->question_type());
  }

  // uint32 create_date = 6;
  if (this->create_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_date());
  }

  // uint32 update_date = 7;
  if (this->update_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ai_question::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_knowledge.ai_question)
  GOOGLE_DCHECK_NE(&from, this);
  const ai_question* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ai_question>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_knowledge.ai_question)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_knowledge.ai_question)
    MergeFrom(*source);
  }
}

void ai_question::MergeFrom(const ai_question& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_knowledge.ai_question)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  similar_questions_list_.MergeFrom(from.similar_questions_list_);
  if (from.question().size() > 0) {

    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.index_id() != 0) {
    set_index_id(from.index_id());
  }
  if (from.standard_question_id() != 0) {
    set_standard_question_id(from.standard_question_id());
  }
  if (from.question_type() != 0) {
    set_question_type(from.question_type());
  }
  if (from.create_date() != 0) {
    set_create_date(from.create_date());
  }
  if (from.update_date() != 0) {
    set_update_date(from.update_date());
  }
}

void ai_question::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_knowledge.ai_question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ai_question::CopyFrom(const ai_question& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_knowledge.ai_question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ai_question::IsInitialized() const {
  return true;
}

void ai_question::Swap(ai_question* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ai_question::InternalSwap(ai_question* other) {
  using std::swap;
  CastToBase(&similar_questions_list_)->InternalSwap(CastToBase(&other->similar_questions_list_));
  question_.Swap(&other->question_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  answer_.Swap(&other->answer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_id_, other->index_id_);
  swap(standard_question_id_, other->standard_question_id_);
  swap(question_type_, other->question_type_);
  swap(create_date_, other->create_date_);
  swap(update_date_, other->update_date_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ai_question::GetMetadata() const {
  protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void get_ai_question_list_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_ai_question_list_req::kQuestionTypeFieldNumber;
const int get_ai_question_list_req::kPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_ai_question_list_req::get_ai_question_list_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fknowledge_2eproto::scc_info_get_ai_question_list_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_knowledge.get_ai_question_list_req)
}
get_ai_question_list_req::get_ai_question_list_req(const get_ai_question_list_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&question_type_, &from.question_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_) -
    reinterpret_cast<char*>(&question_type_)) + sizeof(page_));
  // @@protoc_insertion_point(copy_constructor:robot_knowledge.get_ai_question_list_req)
}

void get_ai_question_list_req::SharedCtor() {
  ::memset(&question_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_) -
      reinterpret_cast<char*>(&question_type_)) + sizeof(page_));
}

get_ai_question_list_req::~get_ai_question_list_req() {
  // @@protoc_insertion_point(destructor:robot_knowledge.get_ai_question_list_req)
  SharedDtor();
}

void get_ai_question_list_req::SharedDtor() {
}

void get_ai_question_list_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* get_ai_question_list_req::descriptor() {
  ::protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_ai_question_list_req& get_ai_question_list_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fknowledge_2eproto::scc_info_get_ai_question_list_req.base);
  return *internal_default_instance();
}


void get_ai_question_list_req::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_knowledge.get_ai_question_list_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&question_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_) -
      reinterpret_cast<char*>(&question_type_)) + sizeof(page_));
  _internal_metadata_.Clear();
}

bool get_ai_question_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_knowledge.get_ai_question_list_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 question_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 page = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_knowledge.get_ai_question_list_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_knowledge.get_ai_question_list_req)
  return false;
#undef DO_
}

void get_ai_question_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_knowledge.get_ai_question_list_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 question_type = 1;
  if (this->question_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->question_type(), output);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_knowledge.get_ai_question_list_req)
}

::google::protobuf::uint8* get_ai_question_list_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_knowledge.get_ai_question_list_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 question_type = 1;
  if (this->question_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->question_type(), target);
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_knowledge.get_ai_question_list_req)
  return target;
}

size_t get_ai_question_list_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_knowledge.get_ai_question_list_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 question_type = 1;
  if (this->question_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->question_type());
  }

  // uint32 page = 2;
  if (this->page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_ai_question_list_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_knowledge.get_ai_question_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  const get_ai_question_list_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_ai_question_list_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_knowledge.get_ai_question_list_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_knowledge.get_ai_question_list_req)
    MergeFrom(*source);
  }
}

void get_ai_question_list_req::MergeFrom(const get_ai_question_list_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_knowledge.get_ai_question_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.question_type() != 0) {
    set_question_type(from.question_type());
  }
  if (from.page() != 0) {
    set_page(from.page());
  }
}

void get_ai_question_list_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_knowledge.get_ai_question_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_ai_question_list_req::CopyFrom(const get_ai_question_list_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_knowledge.get_ai_question_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_ai_question_list_req::IsInitialized() const {
  return true;
}

void get_ai_question_list_req::Swap(get_ai_question_list_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_ai_question_list_req::InternalSwap(get_ai_question_list_req* other) {
  using std::swap;
  swap(question_type_, other->question_type_);
  swap(page_, other->page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata get_ai_question_list_req::GetMetadata() const {
  protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void get_ai_question_list_ack::InitAsDefaultInstance() {
  ::robot_knowledge::_get_ai_question_list_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void get_ai_question_list_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_ai_question_list_ack::kErrorFieldNumber;
const int get_ai_question_list_ack::kAiQuestionListFieldNumber;
const int get_ai_question_list_ack::kTotalNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_ai_question_list_ack::get_ai_question_list_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fknowledge_2eproto::scc_info_get_ai_question_list_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_knowledge.get_ai_question_list_ack)
}
get_ai_question_list_ack::get_ai_question_list_ack(const get_ai_question_list_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ai_question_list_(from.ai_question_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  total_num_ = from.total_num_;
  // @@protoc_insertion_point(copy_constructor:robot_knowledge.get_ai_question_list_ack)
}

void get_ai_question_list_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_num_) -
      reinterpret_cast<char*>(&error_)) + sizeof(total_num_));
}

get_ai_question_list_ack::~get_ai_question_list_ack() {
  // @@protoc_insertion_point(destructor:robot_knowledge.get_ai_question_list_ack)
  SharedDtor();
}

void get_ai_question_list_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void get_ai_question_list_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* get_ai_question_list_ack::descriptor() {
  ::protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_ai_question_list_ack& get_ai_question_list_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fknowledge_2eproto::scc_info_get_ai_question_list_ack.base);
  return *internal_default_instance();
}


void get_ai_question_list_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_knowledge.get_ai_question_list_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ai_question_list_.Clear();
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  total_num_ = 0u;
  _internal_metadata_.Clear();
}

bool get_ai_question_list_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_knowledge.get_ai_question_list_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robot_knowledge.ai_question ai_question_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ai_question_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_knowledge.get_ai_question_list_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_knowledge.get_ai_question_list_ack)
  return false;
#undef DO_
}

void get_ai_question_list_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_knowledge.get_ai_question_list_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // repeated .robot_knowledge.ai_question ai_question_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ai_question_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->ai_question_list(static_cast<int>(i)),
      output);
  }

  // uint32 total_num = 3;
  if (this->total_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_knowledge.get_ai_question_list_ack)
}

::google::protobuf::uint8* get_ai_question_list_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_knowledge.get_ai_question_list_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // repeated .robot_knowledge.ai_question ai_question_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ai_question_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ai_question_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 total_num = 3;
  if (this->total_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_knowledge.get_ai_question_list_ack)
  return target;
}

size_t get_ai_question_list_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_knowledge.get_ai_question_list_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .robot_knowledge.ai_question ai_question_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ai_question_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ai_question_list(static_cast<int>(i)));
    }
  }

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint32 total_num = 3;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_ai_question_list_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_knowledge.get_ai_question_list_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const get_ai_question_list_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_ai_question_list_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_knowledge.get_ai_question_list_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_knowledge.get_ai_question_list_ack)
    MergeFrom(*source);
  }
}

void get_ai_question_list_ack::MergeFrom(const get_ai_question_list_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_knowledge.get_ai_question_list_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ai_question_list_.MergeFrom(from.ai_question_list_);
  if (from.has_error()) {
    mutable_error()->::common::errorinfo::MergeFrom(from.error());
  }
  if (from.total_num() != 0) {
    set_total_num(from.total_num());
  }
}

void get_ai_question_list_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_knowledge.get_ai_question_list_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_ai_question_list_ack::CopyFrom(const get_ai_question_list_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_knowledge.get_ai_question_list_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_ai_question_list_ack::IsInitialized() const {
  return true;
}

void get_ai_question_list_ack::Swap(get_ai_question_list_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_ai_question_list_ack::InternalSwap(get_ai_question_list_ack* other) {
  using std::swap;
  CastToBase(&ai_question_list_)->InternalSwap(CastToBase(&other->ai_question_list_));
  swap(error_, other->error_);
  swap(total_num_, other->total_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata get_ai_question_list_ack::GetMetadata() const {
  protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void inquery_ai_question_content_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int inquery_ai_question_content_req::kStandardQuestionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

inquery_ai_question_content_req::inquery_ai_question_content_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fknowledge_2eproto::scc_info_inquery_ai_question_content_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_knowledge.inquery_ai_question_content_req)
}
inquery_ai_question_content_req::inquery_ai_question_content_req(const inquery_ai_question_content_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  standard_question_id_ = from.standard_question_id_;
  // @@protoc_insertion_point(copy_constructor:robot_knowledge.inquery_ai_question_content_req)
}

void inquery_ai_question_content_req::SharedCtor() {
  standard_question_id_ = GOOGLE_ULONGLONG(0);
}

inquery_ai_question_content_req::~inquery_ai_question_content_req() {
  // @@protoc_insertion_point(destructor:robot_knowledge.inquery_ai_question_content_req)
  SharedDtor();
}

void inquery_ai_question_content_req::SharedDtor() {
}

void inquery_ai_question_content_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* inquery_ai_question_content_req::descriptor() {
  ::protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const inquery_ai_question_content_req& inquery_ai_question_content_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fknowledge_2eproto::scc_info_inquery_ai_question_content_req.base);
  return *internal_default_instance();
}


void inquery_ai_question_content_req::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_knowledge.inquery_ai_question_content_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  standard_question_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool inquery_ai_question_content_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_knowledge.inquery_ai_question_content_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 standard_question_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &standard_question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_knowledge.inquery_ai_question_content_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_knowledge.inquery_ai_question_content_req)
  return false;
#undef DO_
}

void inquery_ai_question_content_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_knowledge.inquery_ai_question_content_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 standard_question_id = 1;
  if (this->standard_question_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->standard_question_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_knowledge.inquery_ai_question_content_req)
}

::google::protobuf::uint8* inquery_ai_question_content_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_knowledge.inquery_ai_question_content_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 standard_question_id = 1;
  if (this->standard_question_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->standard_question_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_knowledge.inquery_ai_question_content_req)
  return target;
}

size_t inquery_ai_question_content_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_knowledge.inquery_ai_question_content_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 standard_question_id = 1;
  if (this->standard_question_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->standard_question_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void inquery_ai_question_content_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_knowledge.inquery_ai_question_content_req)
  GOOGLE_DCHECK_NE(&from, this);
  const inquery_ai_question_content_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const inquery_ai_question_content_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_knowledge.inquery_ai_question_content_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_knowledge.inquery_ai_question_content_req)
    MergeFrom(*source);
  }
}

void inquery_ai_question_content_req::MergeFrom(const inquery_ai_question_content_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_knowledge.inquery_ai_question_content_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.standard_question_id() != 0) {
    set_standard_question_id(from.standard_question_id());
  }
}

void inquery_ai_question_content_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_knowledge.inquery_ai_question_content_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inquery_ai_question_content_req::CopyFrom(const inquery_ai_question_content_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_knowledge.inquery_ai_question_content_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inquery_ai_question_content_req::IsInitialized() const {
  return true;
}

void inquery_ai_question_content_req::Swap(inquery_ai_question_content_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void inquery_ai_question_content_req::InternalSwap(inquery_ai_question_content_req* other) {
  using std::swap;
  swap(standard_question_id_, other->standard_question_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata inquery_ai_question_content_req::GetMetadata() const {
  protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void inquery_ai_question_content_ack::InitAsDefaultInstance() {
  ::robot_knowledge::_inquery_ai_question_content_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
  ::robot_knowledge::_inquery_ai_question_content_ack_default_instance_._instance.get_mutable()->question_content_ = const_cast< ::robot_knowledge::ai_question*>(
      ::robot_knowledge::ai_question::internal_default_instance());
}
void inquery_ai_question_content_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int inquery_ai_question_content_ack::kErrorFieldNumber;
const int inquery_ai_question_content_ack::kQuestionContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

inquery_ai_question_content_ack::inquery_ai_question_content_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fknowledge_2eproto::scc_info_inquery_ai_question_content_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_knowledge.inquery_ai_question_content_ack)
}
inquery_ai_question_content_ack::inquery_ai_question_content_ack(const inquery_ai_question_content_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_question_content()) {
    question_content_ = new ::robot_knowledge::ai_question(*from.question_content_);
  } else {
    question_content_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:robot_knowledge.inquery_ai_question_content_ack)
}

void inquery_ai_question_content_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&question_content_) -
      reinterpret_cast<char*>(&error_)) + sizeof(question_content_));
}

inquery_ai_question_content_ack::~inquery_ai_question_content_ack() {
  // @@protoc_insertion_point(destructor:robot_knowledge.inquery_ai_question_content_ack)
  SharedDtor();
}

void inquery_ai_question_content_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete question_content_;
}

void inquery_ai_question_content_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* inquery_ai_question_content_ack::descriptor() {
  ::protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const inquery_ai_question_content_ack& inquery_ai_question_content_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fknowledge_2eproto::scc_info_inquery_ai_question_content_ack.base);
  return *internal_default_instance();
}


void inquery_ai_question_content_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_knowledge.inquery_ai_question_content_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && question_content_ != NULL) {
    delete question_content_;
  }
  question_content_ = NULL;
  _internal_metadata_.Clear();
}

bool inquery_ai_question_content_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_knowledge.inquery_ai_question_content_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .robot_knowledge.ai_question question_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_question_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_knowledge.inquery_ai_question_content_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_knowledge.inquery_ai_question_content_ack)
  return false;
#undef DO_
}

void inquery_ai_question_content_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_knowledge.inquery_ai_question_content_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // .robot_knowledge.ai_question question_content = 2;
  if (this->has_question_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_question_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_knowledge.inquery_ai_question_content_ack)
}

::google::protobuf::uint8* inquery_ai_question_content_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_knowledge.inquery_ai_question_content_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // .robot_knowledge.ai_question question_content = 2;
  if (this->has_question_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_question_content(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_knowledge.inquery_ai_question_content_ack)
  return target;
}

size_t inquery_ai_question_content_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_knowledge.inquery_ai_question_content_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .robot_knowledge.ai_question question_content = 2;
  if (this->has_question_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *question_content_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void inquery_ai_question_content_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_knowledge.inquery_ai_question_content_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const inquery_ai_question_content_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const inquery_ai_question_content_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_knowledge.inquery_ai_question_content_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_knowledge.inquery_ai_question_content_ack)
    MergeFrom(*source);
  }
}

void inquery_ai_question_content_ack::MergeFrom(const inquery_ai_question_content_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_knowledge.inquery_ai_question_content_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::common::errorinfo::MergeFrom(from.error());
  }
  if (from.has_question_content()) {
    mutable_question_content()->::robot_knowledge::ai_question::MergeFrom(from.question_content());
  }
}

void inquery_ai_question_content_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_knowledge.inquery_ai_question_content_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inquery_ai_question_content_ack::CopyFrom(const inquery_ai_question_content_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_knowledge.inquery_ai_question_content_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inquery_ai_question_content_ack::IsInitialized() const {
  return true;
}

void inquery_ai_question_content_ack::Swap(inquery_ai_question_content_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void inquery_ai_question_content_ack::InternalSwap(inquery_ai_question_content_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(question_content_, other->question_content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata inquery_ai_question_content_ack::GetMetadata() const {
  protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void edit_ai_question_req::InitAsDefaultInstance() {
  ::robot_knowledge::_edit_ai_question_req_default_instance_._instance.get_mutable()->question_content_ = const_cast< ::robot_knowledge::ai_question*>(
      ::robot_knowledge::ai_question::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int edit_ai_question_req::kQuestionContentFieldNumber;
const int edit_ai_question_req::kUpdateTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

edit_ai_question_req::edit_ai_question_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fknowledge_2eproto::scc_info_edit_ai_question_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_knowledge.edit_ai_question_req)
}
edit_ai_question_req::edit_ai_question_req(const edit_ai_question_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_question_content()) {
    question_content_ = new ::robot_knowledge::ai_question(*from.question_content_);
  } else {
    question_content_ = NULL;
  }
  update_type_ = from.update_type_;
  // @@protoc_insertion_point(copy_constructor:robot_knowledge.edit_ai_question_req)
}

void edit_ai_question_req::SharedCtor() {
  ::memset(&question_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_type_) -
      reinterpret_cast<char*>(&question_content_)) + sizeof(update_type_));
}

edit_ai_question_req::~edit_ai_question_req() {
  // @@protoc_insertion_point(destructor:robot_knowledge.edit_ai_question_req)
  SharedDtor();
}

void edit_ai_question_req::SharedDtor() {
  if (this != internal_default_instance()) delete question_content_;
}

void edit_ai_question_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* edit_ai_question_req::descriptor() {
  ::protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const edit_ai_question_req& edit_ai_question_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fknowledge_2eproto::scc_info_edit_ai_question_req.base);
  return *internal_default_instance();
}


void edit_ai_question_req::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_knowledge.edit_ai_question_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && question_content_ != NULL) {
    delete question_content_;
  }
  question_content_ = NULL;
  update_type_ = 0u;
  _internal_metadata_.Clear();
}

bool edit_ai_question_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_knowledge.edit_ai_question_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .robot_knowledge.ai_question question_content = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_question_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_knowledge.edit_ai_question_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_knowledge.edit_ai_question_req)
  return false;
#undef DO_
}

void edit_ai_question_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_knowledge.edit_ai_question_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .robot_knowledge.ai_question question_content = 1;
  if (this->has_question_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_question_content(), output);
  }

  // uint32 update_type = 2;
  if (this->update_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_knowledge.edit_ai_question_req)
}

::google::protobuf::uint8* edit_ai_question_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_knowledge.edit_ai_question_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .robot_knowledge.ai_question question_content = 1;
  if (this->has_question_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_question_content(), deterministic, target);
  }

  // uint32 update_type = 2;
  if (this->update_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_knowledge.edit_ai_question_req)
  return target;
}

size_t edit_ai_question_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_knowledge.edit_ai_question_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .robot_knowledge.ai_question question_content = 1;
  if (this->has_question_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *question_content_);
  }

  // uint32 update_type = 2;
  if (this->update_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void edit_ai_question_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_knowledge.edit_ai_question_req)
  GOOGLE_DCHECK_NE(&from, this);
  const edit_ai_question_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const edit_ai_question_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_knowledge.edit_ai_question_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_knowledge.edit_ai_question_req)
    MergeFrom(*source);
  }
}

void edit_ai_question_req::MergeFrom(const edit_ai_question_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_knowledge.edit_ai_question_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_question_content()) {
    mutable_question_content()->::robot_knowledge::ai_question::MergeFrom(from.question_content());
  }
  if (from.update_type() != 0) {
    set_update_type(from.update_type());
  }
}

void edit_ai_question_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_knowledge.edit_ai_question_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void edit_ai_question_req::CopyFrom(const edit_ai_question_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_knowledge.edit_ai_question_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool edit_ai_question_req::IsInitialized() const {
  return true;
}

void edit_ai_question_req::Swap(edit_ai_question_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void edit_ai_question_req::InternalSwap(edit_ai_question_req* other) {
  using std::swap;
  swap(question_content_, other->question_content_);
  swap(update_type_, other->update_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata edit_ai_question_req::GetMetadata() const {
  protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void edit_ai_question_ack::InitAsDefaultInstance() {
  ::robot_knowledge::_edit_ai_question_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
  ::robot_knowledge::_edit_ai_question_ack_default_instance_._instance.get_mutable()->question_content_ = const_cast< ::robot_knowledge::ai_question*>(
      ::robot_knowledge::ai_question::internal_default_instance());
}
void edit_ai_question_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int edit_ai_question_ack::kErrorFieldNumber;
const int edit_ai_question_ack::kQuestionContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

edit_ai_question_ack::edit_ai_question_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fknowledge_2eproto::scc_info_edit_ai_question_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_knowledge.edit_ai_question_ack)
}
edit_ai_question_ack::edit_ai_question_ack(const edit_ai_question_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  if (from.has_question_content()) {
    question_content_ = new ::robot_knowledge::ai_question(*from.question_content_);
  } else {
    question_content_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:robot_knowledge.edit_ai_question_ack)
}

void edit_ai_question_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&question_content_) -
      reinterpret_cast<char*>(&error_)) + sizeof(question_content_));
}

edit_ai_question_ack::~edit_ai_question_ack() {
  // @@protoc_insertion_point(destructor:robot_knowledge.edit_ai_question_ack)
  SharedDtor();
}

void edit_ai_question_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete question_content_;
}

void edit_ai_question_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* edit_ai_question_ack::descriptor() {
  ::protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const edit_ai_question_ack& edit_ai_question_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fknowledge_2eproto::scc_info_edit_ai_question_ack.base);
  return *internal_default_instance();
}


void edit_ai_question_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_knowledge.edit_ai_question_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  if (GetArenaNoVirtual() == NULL && question_content_ != NULL) {
    delete question_content_;
  }
  question_content_ = NULL;
  _internal_metadata_.Clear();
}

bool edit_ai_question_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_knowledge.edit_ai_question_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .robot_knowledge.ai_question question_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_question_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_knowledge.edit_ai_question_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_knowledge.edit_ai_question_ack)
  return false;
#undef DO_
}

void edit_ai_question_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_knowledge.edit_ai_question_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // .robot_knowledge.ai_question question_content = 2;
  if (this->has_question_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_question_content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_knowledge.edit_ai_question_ack)
}

::google::protobuf::uint8* edit_ai_question_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_knowledge.edit_ai_question_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // .robot_knowledge.ai_question question_content = 2;
  if (this->has_question_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_question_content(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_knowledge.edit_ai_question_ack)
  return target;
}

size_t edit_ai_question_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_knowledge.edit_ai_question_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .robot_knowledge.ai_question question_content = 2;
  if (this->has_question_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *question_content_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void edit_ai_question_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_knowledge.edit_ai_question_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const edit_ai_question_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const edit_ai_question_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_knowledge.edit_ai_question_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_knowledge.edit_ai_question_ack)
    MergeFrom(*source);
  }
}

void edit_ai_question_ack::MergeFrom(const edit_ai_question_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_knowledge.edit_ai_question_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::common::errorinfo::MergeFrom(from.error());
  }
  if (from.has_question_content()) {
    mutable_question_content()->::robot_knowledge::ai_question::MergeFrom(from.question_content());
  }
}

void edit_ai_question_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_knowledge.edit_ai_question_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void edit_ai_question_ack::CopyFrom(const edit_ai_question_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_knowledge.edit_ai_question_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool edit_ai_question_ack::IsInitialized() const {
  return true;
}

void edit_ai_question_ack::Swap(edit_ai_question_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void edit_ai_question_ack::InternalSwap(edit_ai_question_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(question_content_, other->question_content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata edit_ai_question_ack::GetMetadata() const {
  protobuf_robot_5fknowledge_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fknowledge_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robot_knowledge
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_knowledge::similar_question* Arena::CreateMaybeMessage< ::robot_knowledge::similar_question >(Arena* arena) {
  return Arena::CreateInternal< ::robot_knowledge::similar_question >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_knowledge::ai_question* Arena::CreateMaybeMessage< ::robot_knowledge::ai_question >(Arena* arena) {
  return Arena::CreateInternal< ::robot_knowledge::ai_question >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_knowledge::get_ai_question_list_req* Arena::CreateMaybeMessage< ::robot_knowledge::get_ai_question_list_req >(Arena* arena) {
  return Arena::CreateInternal< ::robot_knowledge::get_ai_question_list_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_knowledge::get_ai_question_list_ack* Arena::CreateMaybeMessage< ::robot_knowledge::get_ai_question_list_ack >(Arena* arena) {
  return Arena::CreateInternal< ::robot_knowledge::get_ai_question_list_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_knowledge::inquery_ai_question_content_req* Arena::CreateMaybeMessage< ::robot_knowledge::inquery_ai_question_content_req >(Arena* arena) {
  return Arena::CreateInternal< ::robot_knowledge::inquery_ai_question_content_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_knowledge::inquery_ai_question_content_ack* Arena::CreateMaybeMessage< ::robot_knowledge::inquery_ai_question_content_ack >(Arena* arena) {
  return Arena::CreateInternal< ::robot_knowledge::inquery_ai_question_content_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_knowledge::edit_ai_question_req* Arena::CreateMaybeMessage< ::robot_knowledge::edit_ai_question_req >(Arena* arena) {
  return Arena::CreateInternal< ::robot_knowledge::edit_ai_question_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_knowledge::edit_ai_question_ack* Arena::CreateMaybeMessage< ::robot_knowledge::edit_ai_question_ack >(Arena* arena) {
  return Arena::CreateInternal< ::robot_knowledge::edit_ai_question_ack >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
