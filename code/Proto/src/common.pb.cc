// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PICTURE_CONTENT;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TEXT_CONTENT;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VOICE_CONTENT;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_single_msg_push;
}  // namespace protobuf_common_2eproto
namespace common {
class TEXT_CONTENTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TEXT_CONTENT>
      _instance;
} _TEXT_CONTENT_default_instance_;
class PICTURE_CONTENTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PICTURE_CONTENT>
      _instance;
} _PICTURE_CONTENT_default_instance_;
class VOICE_CONTENTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VOICE_CONTENT>
      _instance;
} _VOICE_CONTENT_default_instance_;
class msg_contentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_content>
      _instance;
} _msg_content_default_instance_;
class errorinfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<errorinfo>
      _instance;
} _errorinfo_default_instance_;
class user_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<user_info>
      _instance;
} _user_info_default_instance_;
class single_msg_pushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<single_msg_push>
      _instance;
} _single_msg_push_default_instance_;
class session_infoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<session_info>
      _instance;
} _session_info_default_instance_;
class quality_control_optionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<quality_control_option>
      _instance;
} _quality_control_option_default_instance_;
class taboo_optionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<taboo_option>
      _instance;
} _taboo_option_default_instance_;
}  // namespace common
namespace protobuf_common_2eproto {
static void InitDefaultsTEXT_CONTENT() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_TEXT_CONTENT_default_instance_;
    new (ptr) ::common::TEXT_CONTENT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::TEXT_CONTENT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TEXT_CONTENT =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTEXT_CONTENT}, {}};

static void InitDefaultsPICTURE_CONTENT() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_PICTURE_CONTENT_default_instance_;
    new (ptr) ::common::PICTURE_CONTENT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::PICTURE_CONTENT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PICTURE_CONTENT =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPICTURE_CONTENT}, {}};

static void InitDefaultsVOICE_CONTENT() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_VOICE_CONTENT_default_instance_;
    new (ptr) ::common::VOICE_CONTENT();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::VOICE_CONTENT::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VOICE_CONTENT =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVOICE_CONTENT}, {}};

static void InitDefaultsmsg_content() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_msg_content_default_instance_;
    new (ptr) ::common::msg_content();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::msg_content::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_msg_content =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsmsg_content}, {
      &protobuf_common_2eproto::scc_info_TEXT_CONTENT.base,
      &protobuf_common_2eproto::scc_info_PICTURE_CONTENT.base,
      &protobuf_common_2eproto::scc_info_VOICE_CONTENT.base,}};

static void InitDefaultserrorinfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_errorinfo_default_instance_;
    new (ptr) ::common::errorinfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::errorinfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_errorinfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultserrorinfo}, {}};

static void InitDefaultsuser_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_user_info_default_instance_;
    new (ptr) ::common::user_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::user_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_user_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsuser_info}, {}};

static void InitDefaultssingle_msg_push() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_single_msg_push_default_instance_;
    new (ptr) ::common::single_msg_push();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::single_msg_push::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_single_msg_push =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultssingle_msg_push}, {}};

static void InitDefaultssession_info() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_session_info_default_instance_;
    new (ptr) ::common::session_info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::session_info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_session_info =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultssession_info}, {
      &protobuf_common_2eproto::scc_info_single_msg_push.base,}};

static void InitDefaultsquality_control_option() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_quality_control_option_default_instance_;
    new (ptr) ::common::quality_control_option();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::quality_control_option::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_quality_control_option =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsquality_control_option}, {}};

static void InitDefaultstaboo_option() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_taboo_option_default_instance_;
    new (ptr) ::common::taboo_option();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::taboo_option::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_taboo_option =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstaboo_option}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TEXT_CONTENT.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PICTURE_CONTENT.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VOICE_CONTENT.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_content.base);
  ::google::protobuf::internal::InitSCC(&scc_info_errorinfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_user_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_single_msg_push.base);
  ::google::protobuf::internal::InitSCC(&scc_info_session_info.base);
  ::google::protobuf::internal::InitSCC(&scc_info_quality_control_option.base);
  ::google::protobuf::internal::InitSCC(&scc_info_taboo_option.base);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::TEXT_CONTENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::TEXT_CONTENT, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::PICTURE_CONTENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::PICTURE_CONTENT, picture_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::PICTURE_CONTENT, thumbnail_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::PICTURE_CONTENT, thumbnail_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::PICTURE_CONTENT, thumbnail_hight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::VOICE_CONTENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::VOICE_CONTENT, voice_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::VOICE_CONTENT, voice_url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::msg_content, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::msg_content, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::msg_content, picture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::msg_content, voice_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::errorinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::errorinfo, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::errorinfo, error_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::errorinfo, error_client_show_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::user_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::user_info, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::user_info, nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::user_info, avatar_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::user_info, introduction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::user_info, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::user_info, user_identity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, send_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, send_nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, send_avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, send_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, recv_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, recv_nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, recv_avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, recv_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::single_msg_push, send_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, session_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, req_session_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, enter_session_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, close_session_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customer_nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customer_avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customerservice_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customerservice_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customerservice_nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customerservice_avatar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customer_login_client_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customer_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customer_terminal_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, customer_page_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, question_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, consult_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, msg_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, session_remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, evaluate_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, evaluate_remark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, quality_control_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, quality_control_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, quality_control_userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, quality_control_nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, quality_control_comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, reponse_timeout_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, session_timeout_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::session_info, session_stage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::quality_control_option, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::quality_control_option, option_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::quality_control_option, option_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::quality_control_option, judge_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::quality_control_option, option_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::taboo_option, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::taboo_option, option_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::common::taboo_option, option_name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::TEXT_CONTENT)},
  { 6, -1, sizeof(::common::PICTURE_CONTENT)},
  { 15, -1, sizeof(::common::VOICE_CONTENT)},
  { 22, -1, sizeof(::common::msg_content)},
  { 30, -1, sizeof(::common::errorinfo)},
  { 38, -1, sizeof(::common::user_info)},
  { 49, -1, sizeof(::common::single_msg_push)},
  { 66, -1, sizeof(::common::session_info)},
  { 102, -1, sizeof(::common::quality_control_option)},
  { 111, -1, sizeof(::common::taboo_option)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_TEXT_CONTENT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_PICTURE_CONTENT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_VOICE_CONTENT_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_msg_content_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_errorinfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_user_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_single_msg_push_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_session_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_quality_control_option_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::common::_taboo_option_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "common.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014common.proto\022\006common\"\033\n\014TEXT_CONTENT\022\013"
      "\n\003msg\030\001 \001(\014\"o\n\017PICTURE_CONTENT\022\023\n\013pictur"
      "e_url\030\001 \001(\014\022\025\n\rthumbnail_url\030\002 \001(\014\022\027\n\017th"
      "umbnail_width\030\003 \001(\r\022\027\n\017thumbnail_hight\030\004"
      " \001(\r\"5\n\rVOICE_CONTENT\022\021\n\tvoice_len\030\001 \001(\r"
      "\022\021\n\tvoice_url\030\002 \001(\014\"\201\001\n\013msg_content\022\"\n\004t"
      "ext\030\001 \001(\0132\024.common.TEXT_CONTENT\022(\n\007pictu"
      "re\030\002 \001(\0132\027.common.PICTURE_CONTENT\022$\n\005voi"
      "ce\030\003 \001(\0132\025.common.VOICE_CONTENT\"N\n\terror"
      "info\022\022\n\nerror_code\030\001 \001(\005\022\022\n\nerror_info\030\002"
      " \001(\014\022\031\n\021error_client_show\030\003 \001(\014\"{\n\tuser_"
      "info\022\016\n\006userid\030\001 \001(\r\022\020\n\010nickname\030\002 \001(\014\022\022"
      "\n\navatar_url\030\003 \001(\014\022\024\n\014introduction\030\005 \001(\014"
      "\022\013\n\003sex\030\006 \001(\r\022\025\n\ruser_identity\030\007 \001(\004\"\363\001\n"
      "\017single_msg_push\022\017\n\007send_id\030\001 \001(\r\022\025\n\rsen"
      "d_nickname\030\002 \001(\014\022\023\n\013send_avatar\030\003 \001(\014\022\021\n"
      "\tsend_type\030\004 \001(\r\022\017\n\007recv_id\030\005 \001(\r\022\025\n\rrec"
      "v_nickname\030\006 \001(\014\022\023\n\013recv_avatar\030\007 \001(\014\022\021\n"
      "\trecv_type\030\010 \001(\r\022\020\n\010msg_type\030\t \001(\r\022\013\n\003ms"
      "g\030\n \001(\014\022\016\n\006msg_id\030\013 \001(\004\022\021\n\tsend_time\030\014 \001"
      "(\r\"\373\006\n\014session_info\022\022\n\nsession_id\030\001 \001(\004\022"
      "\024\n\014session_type\030\002 \001(\r\022\030\n\020req_session_tim"
      "e\030\003 \001(\r\022\032\n\022enter_session_time\030\004 \001(\r\022\032\n\022c"
      "lose_session_time\030\005 \001(\r\022\023\n\013customer_id\030\006"
      " \001(\r\022\025\n\rcustomer_type\030\007 \001(\r\022\031\n\021customer_"
      "nickname\030\010 \001(\014\022\027\n\017customer_avatar\030\t \001(\014\022"
      "\032\n\022customerservice_id\030\n \001(\r\022\034\n\024customers"
      "ervice_type\030\013 \001(\r\022 \n\030customerservice_nic"
      "kname\030\014 \001(\014\022\036\n\026customerservice_avatar\030\r "
      "\001(\014\022\"\n\032customer_login_client_type\030\016 \001(\r\022"
      "\030\n\020customer_address\030\017 \001(\014\022 \n\030customer_te"
      "rminal_source\030\020 \001(\014\022\034\n\024customer_page_sou"
      "rce\030\021 \001(\014\022\026\n\016question_stage\030\022 \001(\r\022\024\n\014con"
      "sult_type\030\023 \001(\r\022)\n\010msg_list\030\024 \003(\0132\027.comm"
      "on.single_msg_push\022\026\n\016session_remark\030\025 \001"
      "(\014\022\026\n\016evaluate_stage\030\026 \001(\r\022\027\n\017evaluate_r"
      "emark\030\027 \001(\014\022\035\n\025quality_control_stage\030\030 \001"
      "(\r\022\034\n\024quality_control_time\030\031 \001(\r\022\036\n\026qual"
      "ity_control_userid\030\032 \001(\r\022 \n\030quality_cont"
      "rol_nickname\030\033 \001(\014\022\037\n\027quality_control_co"
      "mment\030\034 \001(\014\022\035\n\025reponse_timeout_count\030\035 \001"
      "(\r\022\035\n\025session_timeout_count\030\036 \001(\r\022\025\n\rses"
      "sion_stage\030\037 \001(\r\"k\n\026quality_control_opti"
      "on\022\021\n\toption_id\030\001 \001(\004\022\023\n\013option_name\030\002 \001"
      "(\014\022\023\n\013judge_score\030\003 \001(\002\022\024\n\014option_score\030"
      "\004 \001(\002\"6\n\014taboo_option\022\021\n\toption_id\030\001 \001(\004"
      "\022\023\n\013option_name\030\002 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1869);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_common_2eproto
namespace common {

// ===================================================================

void TEXT_CONTENT::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TEXT_CONTENT::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TEXT_CONTENT::TEXT_CONTENT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_TEXT_CONTENT.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.TEXT_CONTENT)
}
TEXT_CONTENT::TEXT_CONTENT(const TEXT_CONTENT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:common.TEXT_CONTENT)
}

void TEXT_CONTENT::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TEXT_CONTENT::~TEXT_CONTENT() {
  // @@protoc_insertion_point(destructor:common.TEXT_CONTENT)
  SharedDtor();
}

void TEXT_CONTENT::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TEXT_CONTENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TEXT_CONTENT::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TEXT_CONTENT& TEXT_CONTENT::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_TEXT_CONTENT.base);
  return *internal_default_instance();
}


void TEXT_CONTENT::Clear() {
// @@protoc_insertion_point(message_clear_start:common.TEXT_CONTENT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool TEXT_CONTENT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.TEXT_CONTENT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.TEXT_CONTENT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.TEXT_CONTENT)
  return false;
#undef DO_
}

void TEXT_CONTENT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.TEXT_CONTENT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.TEXT_CONTENT)
}

::google::protobuf::uint8* TEXT_CONTENT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.TEXT_CONTENT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.TEXT_CONTENT)
  return target;
}

size_t TEXT_CONTENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.TEXT_CONTENT)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TEXT_CONTENT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.TEXT_CONTENT)
  GOOGLE_DCHECK_NE(&from, this);
  const TEXT_CONTENT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TEXT_CONTENT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.TEXT_CONTENT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.TEXT_CONTENT)
    MergeFrom(*source);
  }
}

void TEXT_CONTENT::MergeFrom(const TEXT_CONTENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.TEXT_CONTENT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void TEXT_CONTENT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.TEXT_CONTENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEXT_CONTENT::CopyFrom(const TEXT_CONTENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.TEXT_CONTENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEXT_CONTENT::IsInitialized() const {
  return true;
}

void TEXT_CONTENT::Swap(TEXT_CONTENT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TEXT_CONTENT::InternalSwap(TEXT_CONTENT* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TEXT_CONTENT::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PICTURE_CONTENT::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PICTURE_CONTENT::kPictureUrlFieldNumber;
const int PICTURE_CONTENT::kThumbnailUrlFieldNumber;
const int PICTURE_CONTENT::kThumbnailWidthFieldNumber;
const int PICTURE_CONTENT::kThumbnailHightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PICTURE_CONTENT::PICTURE_CONTENT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_PICTURE_CONTENT.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.PICTURE_CONTENT)
}
PICTURE_CONTENT::PICTURE_CONTENT(const PICTURE_CONTENT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  picture_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.picture_url().size() > 0) {
    picture_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picture_url_);
  }
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thumbnail_url().size() > 0) {
    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  ::memcpy(&thumbnail_width_, &from.thumbnail_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&thumbnail_hight_) -
    reinterpret_cast<char*>(&thumbnail_width_)) + sizeof(thumbnail_hight_));
  // @@protoc_insertion_point(copy_constructor:common.PICTURE_CONTENT)
}

void PICTURE_CONTENT::SharedCtor() {
  picture_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thumbnail_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbnail_hight_) -
      reinterpret_cast<char*>(&thumbnail_width_)) + sizeof(thumbnail_hight_));
}

PICTURE_CONTENT::~PICTURE_CONTENT() {
  // @@protoc_insertion_point(destructor:common.PICTURE_CONTENT)
  SharedDtor();
}

void PICTURE_CONTENT::SharedDtor() {
  picture_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PICTURE_CONTENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PICTURE_CONTENT::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PICTURE_CONTENT& PICTURE_CONTENT::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_PICTURE_CONTENT.base);
  return *internal_default_instance();
}


void PICTURE_CONTENT::Clear() {
// @@protoc_insertion_point(message_clear_start:common.PICTURE_CONTENT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picture_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&thumbnail_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thumbnail_hight_) -
      reinterpret_cast<char*>(&thumbnail_width_)) + sizeof(thumbnail_hight_));
  _internal_metadata_.Clear();
}

bool PICTURE_CONTENT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.PICTURE_CONTENT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes picture_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_picture_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes thumbnail_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thumbnail_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thumbnail_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 thumbnail_hight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnail_hight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.PICTURE_CONTENT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.PICTURE_CONTENT)
  return false;
#undef DO_
}

void PICTURE_CONTENT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.PICTURE_CONTENT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes picture_url = 1;
  if (this->picture_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->picture_url(), output);
  }

  // bytes thumbnail_url = 2;
  if (this->thumbnail_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->thumbnail_url(), output);
  }

  // uint32 thumbnail_width = 3;
  if (this->thumbnail_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->thumbnail_width(), output);
  }

  // uint32 thumbnail_hight = 4;
  if (this->thumbnail_hight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thumbnail_hight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.PICTURE_CONTENT)
}

::google::protobuf::uint8* PICTURE_CONTENT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.PICTURE_CONTENT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes picture_url = 1;
  if (this->picture_url().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->picture_url(), target);
  }

  // bytes thumbnail_url = 2;
  if (this->thumbnail_url().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->thumbnail_url(), target);
  }

  // uint32 thumbnail_width = 3;
  if (this->thumbnail_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->thumbnail_width(), target);
  }

  // uint32 thumbnail_hight = 4;
  if (this->thumbnail_hight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thumbnail_hight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.PICTURE_CONTENT)
  return target;
}

size_t PICTURE_CONTENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.PICTURE_CONTENT)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes picture_url = 1;
  if (this->picture_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->picture_url());
  }

  // bytes thumbnail_url = 2;
  if (this->thumbnail_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->thumbnail_url());
  }

  // uint32 thumbnail_width = 3;
  if (this->thumbnail_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumbnail_width());
  }

  // uint32 thumbnail_hight = 4;
  if (this->thumbnail_hight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thumbnail_hight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PICTURE_CONTENT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.PICTURE_CONTENT)
  GOOGLE_DCHECK_NE(&from, this);
  const PICTURE_CONTENT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PICTURE_CONTENT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.PICTURE_CONTENT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.PICTURE_CONTENT)
    MergeFrom(*source);
  }
}

void PICTURE_CONTENT::MergeFrom(const PICTURE_CONTENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.PICTURE_CONTENT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.picture_url().size() > 0) {

    picture_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.picture_url_);
  }
  if (from.thumbnail_url().size() > 0) {

    thumbnail_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thumbnail_url_);
  }
  if (from.thumbnail_width() != 0) {
    set_thumbnail_width(from.thumbnail_width());
  }
  if (from.thumbnail_hight() != 0) {
    set_thumbnail_hight(from.thumbnail_hight());
  }
}

void PICTURE_CONTENT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.PICTURE_CONTENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PICTURE_CONTENT::CopyFrom(const PICTURE_CONTENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.PICTURE_CONTENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PICTURE_CONTENT::IsInitialized() const {
  return true;
}

void PICTURE_CONTENT::Swap(PICTURE_CONTENT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PICTURE_CONTENT::InternalSwap(PICTURE_CONTENT* other) {
  using std::swap;
  picture_url_.Swap(&other->picture_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thumbnail_url_.Swap(&other->thumbnail_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(thumbnail_width_, other->thumbnail_width_);
  swap(thumbnail_hight_, other->thumbnail_hight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PICTURE_CONTENT::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VOICE_CONTENT::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VOICE_CONTENT::kVoiceLenFieldNumber;
const int VOICE_CONTENT::kVoiceUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VOICE_CONTENT::VOICE_CONTENT()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_VOICE_CONTENT.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.VOICE_CONTENT)
}
VOICE_CONTENT::VOICE_CONTENT(const VOICE_CONTENT& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  voice_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.voice_url().size() > 0) {
    voice_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_url_);
  }
  voice_len_ = from.voice_len_;
  // @@protoc_insertion_point(copy_constructor:common.VOICE_CONTENT)
}

void VOICE_CONTENT::SharedCtor() {
  voice_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_len_ = 0u;
}

VOICE_CONTENT::~VOICE_CONTENT() {
  // @@protoc_insertion_point(destructor:common.VOICE_CONTENT)
  SharedDtor();
}

void VOICE_CONTENT::SharedDtor() {
  voice_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VOICE_CONTENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VOICE_CONTENT::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VOICE_CONTENT& VOICE_CONTENT::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_VOICE_CONTENT.base);
  return *internal_default_instance();
}


void VOICE_CONTENT::Clear() {
// @@protoc_insertion_point(message_clear_start:common.VOICE_CONTENT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voice_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_len_ = 0u;
  _internal_metadata_.Clear();
}

bool VOICE_CONTENT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.VOICE_CONTENT)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 voice_len = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voice_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes voice_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.VOICE_CONTENT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.VOICE_CONTENT)
  return false;
#undef DO_
}

void VOICE_CONTENT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.VOICE_CONTENT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 voice_len = 1;
  if (this->voice_len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->voice_len(), output);
  }

  // bytes voice_url = 2;
  if (this->voice_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->voice_url(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.VOICE_CONTENT)
}

::google::protobuf::uint8* VOICE_CONTENT::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.VOICE_CONTENT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 voice_len = 1;
  if (this->voice_len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->voice_len(), target);
  }

  // bytes voice_url = 2;
  if (this->voice_url().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->voice_url(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.VOICE_CONTENT)
  return target;
}

size_t VOICE_CONTENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.VOICE_CONTENT)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes voice_url = 2;
  if (this->voice_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->voice_url());
  }

  // uint32 voice_len = 1;
  if (this->voice_len() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->voice_len());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VOICE_CONTENT::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.VOICE_CONTENT)
  GOOGLE_DCHECK_NE(&from, this);
  const VOICE_CONTENT* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VOICE_CONTENT>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.VOICE_CONTENT)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.VOICE_CONTENT)
    MergeFrom(*source);
  }
}

void VOICE_CONTENT::MergeFrom(const VOICE_CONTENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.VOICE_CONTENT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.voice_url().size() > 0) {

    voice_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_url_);
  }
  if (from.voice_len() != 0) {
    set_voice_len(from.voice_len());
  }
}

void VOICE_CONTENT::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.VOICE_CONTENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VOICE_CONTENT::CopyFrom(const VOICE_CONTENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.VOICE_CONTENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VOICE_CONTENT::IsInitialized() const {
  return true;
}

void VOICE_CONTENT::Swap(VOICE_CONTENT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VOICE_CONTENT::InternalSwap(VOICE_CONTENT* other) {
  using std::swap;
  voice_url_.Swap(&other->voice_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(voice_len_, other->voice_len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VOICE_CONTENT::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void msg_content::InitAsDefaultInstance() {
  ::common::_msg_content_default_instance_._instance.get_mutable()->text_ = const_cast< ::common::TEXT_CONTENT*>(
      ::common::TEXT_CONTENT::internal_default_instance());
  ::common::_msg_content_default_instance_._instance.get_mutable()->picture_ = const_cast< ::common::PICTURE_CONTENT*>(
      ::common::PICTURE_CONTENT::internal_default_instance());
  ::common::_msg_content_default_instance_._instance.get_mutable()->voice_ = const_cast< ::common::VOICE_CONTENT*>(
      ::common::VOICE_CONTENT::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_content::kTextFieldNumber;
const int msg_content::kPictureFieldNumber;
const int msg_content::kVoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_content::msg_content()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_msg_content.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.msg_content)
}
msg_content::msg_content(const msg_content& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_text()) {
    text_ = new ::common::TEXT_CONTENT(*from.text_);
  } else {
    text_ = NULL;
  }
  if (from.has_picture()) {
    picture_ = new ::common::PICTURE_CONTENT(*from.picture_);
  } else {
    picture_ = NULL;
  }
  if (from.has_voice()) {
    voice_ = new ::common::VOICE_CONTENT(*from.voice_);
  } else {
    voice_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:common.msg_content)
}

void msg_content::SharedCtor() {
  ::memset(&text_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_) -
      reinterpret_cast<char*>(&text_)) + sizeof(voice_));
}

msg_content::~msg_content() {
  // @@protoc_insertion_point(destructor:common.msg_content)
  SharedDtor();
}

void msg_content::SharedDtor() {
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete picture_;
  if (this != internal_default_instance()) delete voice_;
}

void msg_content::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* msg_content::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const msg_content& msg_content::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_msg_content.base);
  return *internal_default_instance();
}


void msg_content::Clear() {
// @@protoc_insertion_point(message_clear_start:common.msg_content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
  if (GetArenaNoVirtual() == NULL && picture_ != NULL) {
    delete picture_;
  }
  picture_ = NULL;
  if (GetArenaNoVirtual() == NULL && voice_ != NULL) {
    delete voice_;
  }
  voice_ = NULL;
  _internal_metadata_.Clear();
}

bool msg_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.msg_content)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.TEXT_CONTENT text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.PICTURE_CONTENT picture = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_picture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.VOICE_CONTENT voice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.msg_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.msg_content)
  return false;
#undef DO_
}

void msg_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.msg_content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.TEXT_CONTENT text = 1;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_text(), output);
  }

  // .common.PICTURE_CONTENT picture = 2;
  if (this->has_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_picture(), output);
  }

  // .common.VOICE_CONTENT voice = 3;
  if (this->has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_voice(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.msg_content)
}

::google::protobuf::uint8* msg_content::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.msg_content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.TEXT_CONTENT text = 1;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_text(), deterministic, target);
  }

  // .common.PICTURE_CONTENT picture = 2;
  if (this->has_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_picture(), deterministic, target);
  }

  // .common.VOICE_CONTENT voice = 3;
  if (this->has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_voice(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.msg_content)
  return target;
}

size_t msg_content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.msg_content)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.TEXT_CONTENT text = 1;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // .common.PICTURE_CONTENT picture = 2;
  if (this->has_picture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *picture_);
  }

  // .common.VOICE_CONTENT voice = 3;
  if (this->has_voice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voice_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_content::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.msg_content)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_content* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_content>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.msg_content)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.msg_content)
    MergeFrom(*source);
  }
}

void msg_content::MergeFrom(const msg_content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.msg_content)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    mutable_text()->::common::TEXT_CONTENT::MergeFrom(from.text());
  }
  if (from.has_picture()) {
    mutable_picture()->::common::PICTURE_CONTENT::MergeFrom(from.picture());
  }
  if (from.has_voice()) {
    mutable_voice()->::common::VOICE_CONTENT::MergeFrom(from.voice());
  }
}

void msg_content::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.msg_content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_content::CopyFrom(const msg_content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.msg_content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_content::IsInitialized() const {
  return true;
}

void msg_content::Swap(msg_content* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_content::InternalSwap(msg_content* other) {
  using std::swap;
  swap(text_, other->text_);
  swap(picture_, other->picture_);
  swap(voice_, other->voice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata msg_content::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void errorinfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int errorinfo::kErrorCodeFieldNumber;
const int errorinfo::kErrorInfoFieldNumber;
const int errorinfo::kErrorClientShowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

errorinfo::errorinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_errorinfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.errorinfo)
}
errorinfo::errorinfo(const errorinfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_info().size() > 0) {
    error_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  error_client_show_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_client_show().size() > 0) {
    error_client_show_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_client_show_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:common.errorinfo)
}

void errorinfo::SharedCtor() {
  error_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_client_show_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
}

errorinfo::~errorinfo() {
  // @@protoc_insertion_point(destructor:common.errorinfo)
  SharedDtor();
}

void errorinfo::SharedDtor() {
  error_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_client_show_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void errorinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* errorinfo::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const errorinfo& errorinfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_errorinfo.base);
  return *internal_default_instance();
}


void errorinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.errorinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_client_show_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  _internal_metadata_.Clear();
}

bool errorinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.errorinfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes error_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes error_client_show = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_client_show()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.errorinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.errorinfo)
  return false;
#undef DO_
}

void errorinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.errorinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error_info(), output);
  }

  // bytes error_client_show = 3;
  if (this->error_client_show().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->error_client_show(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.errorinfo)
}

::google::protobuf::uint8* errorinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.errorinfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_info(), target);
  }

  // bytes error_client_show = 3;
  if (this->error_client_show().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->error_client_show(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.errorinfo)
  return target;
}

size_t errorinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.errorinfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes error_info = 2;
  if (this->error_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error_info());
  }

  // bytes error_client_show = 3;
  if (this->error_client_show().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error_client_show());
  }

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void errorinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.errorinfo)
  GOOGLE_DCHECK_NE(&from, this);
  const errorinfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const errorinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.errorinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.errorinfo)
    MergeFrom(*source);
  }
}

void errorinfo::MergeFrom(const errorinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.errorinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_info().size() > 0) {

    error_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_info_);
  }
  if (from.error_client_show().size() > 0) {

    error_client_show_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_client_show_);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void errorinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.errorinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void errorinfo::CopyFrom(const errorinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.errorinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool errorinfo::IsInitialized() const {
  return true;
}

void errorinfo::Swap(errorinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void errorinfo::InternalSwap(errorinfo* other) {
  using std::swap;
  error_info_.Swap(&other->error_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_client_show_.Swap(&other->error_client_show_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata errorinfo::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void user_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_info::kUseridFieldNumber;
const int user_info::kNicknameFieldNumber;
const int user_info::kAvatarUrlFieldNumber;
const int user_info::kIntroductionFieldNumber;
const int user_info::kSexFieldNumber;
const int user_info::kUserIdentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_info::user_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_user_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.user_info)
}
user_info::user_info(const user_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.avatar_url().size() > 0) {
    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  introduction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.introduction().size() > 0) {
    introduction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduction_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_identity_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(user_identity_));
  // @@protoc_insertion_point(copy_constructor:common.user_info)
}

void user_info::SharedCtor() {
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_identity_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(user_identity_));
}

user_info::~user_info() {
  // @@protoc_insertion_point(destructor:common.user_info)
  SharedDtor();
}

void user_info::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* user_info::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const user_info& user_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_user_info.base);
  return *internal_default_instance();
}


void user_info::Clear() {
// @@protoc_insertion_point(message_clear_start:common.user_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_identity_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(user_identity_));
  _internal_metadata_.Clear();
}

bool user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.user_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes avatar_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes introduction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_introduction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sex = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_identity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_identity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.user_info)
  return false;
#undef DO_
}

void user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.user_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->nickname(), output);
  }

  // bytes avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->avatar_url(), output);
  }

  // bytes introduction = 5;
  if (this->introduction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->introduction(), output);
  }

  // uint32 sex = 6;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // uint64 user_identity = 7;
  if (this->user_identity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->user_identity(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.user_info)
}

::google::protobuf::uint8* user_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.user_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }

  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nickname(), target);
  }

  // bytes avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->avatar_url(), target);
  }

  // bytes introduction = 5;
  if (this->introduction().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->introduction(), target);
  }

  // uint32 sex = 6;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // uint64 user_identity = 7;
  if (this->user_identity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->user_identity(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.user_info)
  return target;
}

size_t user_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.user_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nickname());
  }

  // bytes avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->avatar_url());
  }

  // bytes introduction = 5;
  if (this->introduction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->introduction());
  }

  // uint32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // uint32 sex = 6;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sex());
  }

  // uint64 user_identity = 7;
  if (this->user_identity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_identity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.user_info)
  GOOGLE_DCHECK_NE(&from, this);
  const user_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.user_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.user_info)
    MergeFrom(*source);
  }
}

void user_info::MergeFrom(const user_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.user_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.avatar_url().size() > 0) {

    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  if (from.introduction().size() > 0) {

    introduction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.introduction_);
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.user_identity() != 0) {
    set_user_identity(from.user_identity());
  }
}

void user_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.user_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info::CopyFrom(const user_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.user_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info::IsInitialized() const {
  return true;
}

void user_info::Swap(user_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_info::InternalSwap(user_info* other) {
  using std::swap;
  nickname_.Swap(&other->nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_url_.Swap(&other->avatar_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  introduction_.Swap(&other->introduction_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(sex_, other->sex_);
  swap(user_identity_, other->user_identity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata user_info::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void single_msg_push::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int single_msg_push::kSendIdFieldNumber;
const int single_msg_push::kSendNicknameFieldNumber;
const int single_msg_push::kSendAvatarFieldNumber;
const int single_msg_push::kSendTypeFieldNumber;
const int single_msg_push::kRecvIdFieldNumber;
const int single_msg_push::kRecvNicknameFieldNumber;
const int single_msg_push::kRecvAvatarFieldNumber;
const int single_msg_push::kRecvTypeFieldNumber;
const int single_msg_push::kMsgTypeFieldNumber;
const int single_msg_push::kMsgFieldNumber;
const int single_msg_push::kMsgIdFieldNumber;
const int single_msg_push::kSendTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

single_msg_push::single_msg_push()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_single_msg_push.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.single_msg_push)
}
single_msg_push::single_msg_push(const single_msg_push& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  send_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.send_nickname().size() > 0) {
    send_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_nickname_);
  }
  send_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.send_avatar().size() > 0) {
    send_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_avatar_);
  }
  recv_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_nickname().size() > 0) {
    recv_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_nickname_);
  }
  recv_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_avatar().size() > 0) {
    recv_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_avatar_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&send_id_, &from.send_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&send_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:common.single_msg_push)
}

void single_msg_push::SharedCtor() {
  send_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&send_id_)) + sizeof(msg_id_));
}

single_msg_push::~single_msg_push() {
  // @@protoc_insertion_point(destructor:common.single_msg_push)
  SharedDtor();
}

void single_msg_push::SharedDtor() {
  send_nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void single_msg_push::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* single_msg_push::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const single_msg_push& single_msg_push::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_single_msg_push.base);
  return *internal_default_instance();
}


void single_msg_push::Clear() {
// @@protoc_insertion_point(message_clear_start:common.single_msg_push)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&send_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

bool single_msg_push::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.single_msg_push)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 send_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes send_nickname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes send_avatar = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recv_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes recv_nickname = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recv_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes recv_avatar = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recv_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recv_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 msg_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.single_msg_push)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.single_msg_push)
  return false;
#undef DO_
}

void single_msg_push::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.single_msg_push)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 send_id = 1;
  if (this->send_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->send_id(), output);
  }

  // bytes send_nickname = 2;
  if (this->send_nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->send_nickname(), output);
  }

  // bytes send_avatar = 3;
  if (this->send_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->send_avatar(), output);
  }

  // uint32 send_type = 4;
  if (this->send_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->send_type(), output);
  }

  // uint32 recv_id = 5;
  if (this->recv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->recv_id(), output);
  }

  // bytes recv_nickname = 6;
  if (this->recv_nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->recv_nickname(), output);
  }

  // bytes recv_avatar = 7;
  if (this->recv_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->recv_avatar(), output);
  }

  // uint32 recv_type = 8;
  if (this->recv_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->recv_type(), output);
  }

  // uint32 msg_type = 9;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->msg_type(), output);
  }

  // bytes msg = 10;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->msg(), output);
  }

  // uint64 msg_id = 11;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->msg_id(), output);
  }

  // uint32 send_time = 12;
  if (this->send_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->send_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.single_msg_push)
}

::google::protobuf::uint8* single_msg_push::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.single_msg_push)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 send_id = 1;
  if (this->send_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->send_id(), target);
  }

  // bytes send_nickname = 2;
  if (this->send_nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->send_nickname(), target);
  }

  // bytes send_avatar = 3;
  if (this->send_avatar().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->send_avatar(), target);
  }

  // uint32 send_type = 4;
  if (this->send_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->send_type(), target);
  }

  // uint32 recv_id = 5;
  if (this->recv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->recv_id(), target);
  }

  // bytes recv_nickname = 6;
  if (this->recv_nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->recv_nickname(), target);
  }

  // bytes recv_avatar = 7;
  if (this->recv_avatar().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->recv_avatar(), target);
  }

  // uint32 recv_type = 8;
  if (this->recv_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->recv_type(), target);
  }

  // uint32 msg_type = 9;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->msg_type(), target);
  }

  // bytes msg = 10;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->msg(), target);
  }

  // uint64 msg_id = 11;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->msg_id(), target);
  }

  // uint32 send_time = 12;
  if (this->send_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->send_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.single_msg_push)
  return target;
}

size_t single_msg_push::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.single_msg_push)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes send_nickname = 2;
  if (this->send_nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->send_nickname());
  }

  // bytes send_avatar = 3;
  if (this->send_avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->send_avatar());
  }

  // bytes recv_nickname = 6;
  if (this->recv_nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_nickname());
  }

  // bytes recv_avatar = 7;
  if (this->recv_avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->recv_avatar());
  }

  // bytes msg = 10;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // uint32 send_id = 1;
  if (this->send_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_id());
  }

  // uint32 send_type = 4;
  if (this->send_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_type());
  }

  // uint32 recv_id = 5;
  if (this->recv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recv_id());
  }

  // uint32 recv_type = 8;
  if (this->recv_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recv_type());
  }

  // uint32 msg_type = 9;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());
  }

  // uint32 send_time = 12;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_time());
  }

  // uint64 msg_id = 11;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void single_msg_push::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.single_msg_push)
  GOOGLE_DCHECK_NE(&from, this);
  const single_msg_push* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const single_msg_push>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.single_msg_push)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.single_msg_push)
    MergeFrom(*source);
  }
}

void single_msg_push::MergeFrom(const single_msg_push& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.single_msg_push)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.send_nickname().size() > 0) {

    send_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_nickname_);
  }
  if (from.send_avatar().size() > 0) {

    send_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_avatar_);
  }
  if (from.recv_nickname().size() > 0) {

    recv_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_nickname_);
  }
  if (from.recv_avatar().size() > 0) {

    recv_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_avatar_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.send_id() != 0) {
    set_send_id(from.send_id());
  }
  if (from.send_type() != 0) {
    set_send_type(from.send_type());
  }
  if (from.recv_id() != 0) {
    set_recv_id(from.recv_id());
  }
  if (from.recv_type() != 0) {
    set_recv_type(from.recv_type());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.send_time() != 0) {
    set_send_time(from.send_time());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void single_msg_push::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.single_msg_push)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void single_msg_push::CopyFrom(const single_msg_push& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.single_msg_push)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool single_msg_push::IsInitialized() const {
  return true;
}

void single_msg_push::Swap(single_msg_push* other) {
  if (other == this) return;
  InternalSwap(other);
}
void single_msg_push::InternalSwap(single_msg_push* other) {
  using std::swap;
  send_nickname_.Swap(&other->send_nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  send_avatar_.Swap(&other->send_avatar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recv_nickname_.Swap(&other->recv_nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recv_avatar_.Swap(&other->recv_avatar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(send_id_, other->send_id_);
  swap(send_type_, other->send_type_);
  swap(recv_id_, other->recv_id_);
  swap(recv_type_, other->recv_type_);
  swap(msg_type_, other->msg_type_);
  swap(send_time_, other->send_time_);
  swap(msg_id_, other->msg_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata single_msg_push::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void session_info::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int session_info::kSessionIdFieldNumber;
const int session_info::kSessionTypeFieldNumber;
const int session_info::kReqSessionTimeFieldNumber;
const int session_info::kEnterSessionTimeFieldNumber;
const int session_info::kCloseSessionTimeFieldNumber;
const int session_info::kCustomerIdFieldNumber;
const int session_info::kCustomerTypeFieldNumber;
const int session_info::kCustomerNicknameFieldNumber;
const int session_info::kCustomerAvatarFieldNumber;
const int session_info::kCustomerserviceIdFieldNumber;
const int session_info::kCustomerserviceTypeFieldNumber;
const int session_info::kCustomerserviceNicknameFieldNumber;
const int session_info::kCustomerserviceAvatarFieldNumber;
const int session_info::kCustomerLoginClientTypeFieldNumber;
const int session_info::kCustomerAddressFieldNumber;
const int session_info::kCustomerTerminalSourceFieldNumber;
const int session_info::kCustomerPageSourceFieldNumber;
const int session_info::kQuestionStageFieldNumber;
const int session_info::kConsultTypeFieldNumber;
const int session_info::kMsgListFieldNumber;
const int session_info::kSessionRemarkFieldNumber;
const int session_info::kEvaluateStageFieldNumber;
const int session_info::kEvaluateRemarkFieldNumber;
const int session_info::kQualityControlStageFieldNumber;
const int session_info::kQualityControlTimeFieldNumber;
const int session_info::kQualityControlUseridFieldNumber;
const int session_info::kQualityControlNicknameFieldNumber;
const int session_info::kQualityControlCommentFieldNumber;
const int session_info::kReponseTimeoutCountFieldNumber;
const int session_info::kSessionTimeoutCountFieldNumber;
const int session_info::kSessionStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

session_info::session_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_session_info.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.session_info)
}
session_info::session_info(const session_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  customer_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_nickname().size() > 0) {
    customer_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_nickname_);
  }
  customer_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_avatar().size() > 0) {
    customer_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_avatar_);
  }
  customerservice_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customerservice_nickname().size() > 0) {
    customerservice_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customerservice_nickname_);
  }
  customerservice_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customerservice_avatar().size() > 0) {
    customerservice_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customerservice_avatar_);
  }
  customer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_address().size() > 0) {
    customer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_address_);
  }
  customer_terminal_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_terminal_source().size() > 0) {
    customer_terminal_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_terminal_source_);
  }
  customer_page_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_page_source().size() > 0) {
    customer_page_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_page_source_);
  }
  session_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_remark().size() > 0) {
    session_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_remark_);
  }
  evaluate_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.evaluate_remark().size() > 0) {
    evaluate_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.evaluate_remark_);
  }
  quality_control_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quality_control_nickname().size() > 0) {
    quality_control_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_control_nickname_);
  }
  quality_control_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quality_control_comment().size() > 0) {
    quality_control_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_control_comment_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_stage_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(session_stage_));
  // @@protoc_insertion_point(copy_constructor:common.session_info)
}

void session_info::SharedCtor() {
  customer_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customerservice_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customerservice_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_terminal_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_page_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evaluate_remark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_control_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_control_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_stage_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(session_stage_));
}

session_info::~session_info() {
  // @@protoc_insertion_point(destructor:common.session_info)
  SharedDtor();
}

void session_info::SharedDtor() {
  customer_nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customerservice_nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customerservice_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_terminal_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_page_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_remark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evaluate_remark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_control_nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_control_comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void session_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* session_info::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const session_info& session_info::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_session_info.base);
  return *internal_default_instance();
}


void session_info::Clear() {
// @@protoc_insertion_point(message_clear_start:common.session_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  customer_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customerservice_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customerservice_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_terminal_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_page_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evaluate_remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_control_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_control_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_stage_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(session_stage_));
  _internal_metadata_.Clear();
}

bool session_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.session_info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 req_session_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_session_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 enter_session_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enter_session_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 close_session_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_session_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 customer_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &customer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 customer_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &customer_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes customer_nickname = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_customer_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes customer_avatar = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_customer_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 customerservice_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &customerservice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 customerservice_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &customerservice_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes customerservice_nickname = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_customerservice_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes customerservice_avatar = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_customerservice_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 customer_login_client_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &customer_login_client_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes customer_address = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_customer_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes customer_terminal_source = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_customer_terminal_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes customer_page_source = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_customer_page_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 question_stage = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 consult_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consult_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.single_msg_push msg_list = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes session_remark = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 evaluate_stage = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evaluate_stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes evaluate_remark = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_evaluate_remark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quality_control_stage = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_control_stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quality_control_time = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_control_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quality_control_userid = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_control_userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes quality_control_nickname = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quality_control_nickname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes quality_control_comment = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quality_control_comment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reponse_timeout_count = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reponse_timeout_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_timeout_count = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_timeout_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_stage = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_stage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.session_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.session_info)
  return false;
#undef DO_
}

void session_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.session_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session_id(), output);
  }

  // uint32 session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_type(), output);
  }

  // uint32 req_session_time = 3;
  if (this->req_session_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->req_session_time(), output);
  }

  // uint32 enter_session_time = 4;
  if (this->enter_session_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enter_session_time(), output);
  }

  // uint32 close_session_time = 5;
  if (this->close_session_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->close_session_time(), output);
  }

  // uint32 customer_id = 6;
  if (this->customer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->customer_id(), output);
  }

  // uint32 customer_type = 7;
  if (this->customer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->customer_type(), output);
  }

  // bytes customer_nickname = 8;
  if (this->customer_nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->customer_nickname(), output);
  }

  // bytes customer_avatar = 9;
  if (this->customer_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->customer_avatar(), output);
  }

  // uint32 customerservice_id = 10;
  if (this->customerservice_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->customerservice_id(), output);
  }

  // uint32 customerservice_type = 11;
  if (this->customerservice_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->customerservice_type(), output);
  }

  // bytes customerservice_nickname = 12;
  if (this->customerservice_nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->customerservice_nickname(), output);
  }

  // bytes customerservice_avatar = 13;
  if (this->customerservice_avatar().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->customerservice_avatar(), output);
  }

  // uint32 customer_login_client_type = 14;
  if (this->customer_login_client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->customer_login_client_type(), output);
  }

  // bytes customer_address = 15;
  if (this->customer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->customer_address(), output);
  }

  // bytes customer_terminal_source = 16;
  if (this->customer_terminal_source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->customer_terminal_source(), output);
  }

  // bytes customer_page_source = 17;
  if (this->customer_page_source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->customer_page_source(), output);
  }

  // uint32 question_stage = 18;
  if (this->question_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->question_stage(), output);
  }

  // uint32 consult_type = 19;
  if (this->consult_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->consult_type(), output);
  }

  // repeated .common.single_msg_push msg_list = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->msg_list(static_cast<int>(i)),
      output);
  }

  // bytes session_remark = 21;
  if (this->session_remark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->session_remark(), output);
  }

  // uint32 evaluate_stage = 22;
  if (this->evaluate_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->evaluate_stage(), output);
  }

  // bytes evaluate_remark = 23;
  if (this->evaluate_remark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->evaluate_remark(), output);
  }

  // uint32 quality_control_stage = 24;
  if (this->quality_control_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->quality_control_stage(), output);
  }

  // uint32 quality_control_time = 25;
  if (this->quality_control_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->quality_control_time(), output);
  }

  // uint32 quality_control_userid = 26;
  if (this->quality_control_userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->quality_control_userid(), output);
  }

  // bytes quality_control_nickname = 27;
  if (this->quality_control_nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      27, this->quality_control_nickname(), output);
  }

  // bytes quality_control_comment = 28;
  if (this->quality_control_comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      28, this->quality_control_comment(), output);
  }

  // uint32 reponse_timeout_count = 29;
  if (this->reponse_timeout_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->reponse_timeout_count(), output);
  }

  // uint32 session_timeout_count = 30;
  if (this->session_timeout_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->session_timeout_count(), output);
  }

  // uint32 session_stage = 31;
  if (this->session_stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->session_stage(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.session_info)
}

::google::protobuf::uint8* session_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.session_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->session_id(), target);
  }

  // uint32 session_type = 2;
  if (this->session_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_type(), target);
  }

  // uint32 req_session_time = 3;
  if (this->req_session_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->req_session_time(), target);
  }

  // uint32 enter_session_time = 4;
  if (this->enter_session_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enter_session_time(), target);
  }

  // uint32 close_session_time = 5;
  if (this->close_session_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->close_session_time(), target);
  }

  // uint32 customer_id = 6;
  if (this->customer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->customer_id(), target);
  }

  // uint32 customer_type = 7;
  if (this->customer_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->customer_type(), target);
  }

  // bytes customer_nickname = 8;
  if (this->customer_nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->customer_nickname(), target);
  }

  // bytes customer_avatar = 9;
  if (this->customer_avatar().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->customer_avatar(), target);
  }

  // uint32 customerservice_id = 10;
  if (this->customerservice_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->customerservice_id(), target);
  }

  // uint32 customerservice_type = 11;
  if (this->customerservice_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->customerservice_type(), target);
  }

  // bytes customerservice_nickname = 12;
  if (this->customerservice_nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->customerservice_nickname(), target);
  }

  // bytes customerservice_avatar = 13;
  if (this->customerservice_avatar().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->customerservice_avatar(), target);
  }

  // uint32 customer_login_client_type = 14;
  if (this->customer_login_client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->customer_login_client_type(), target);
  }

  // bytes customer_address = 15;
  if (this->customer_address().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->customer_address(), target);
  }

  // bytes customer_terminal_source = 16;
  if (this->customer_terminal_source().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->customer_terminal_source(), target);
  }

  // bytes customer_page_source = 17;
  if (this->customer_page_source().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->customer_page_source(), target);
  }

  // uint32 question_stage = 18;
  if (this->question_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->question_stage(), target);
  }

  // uint32 consult_type = 19;
  if (this->consult_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->consult_type(), target);
  }

  // repeated .common.single_msg_push msg_list = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->msg_list(static_cast<int>(i)), deterministic, target);
  }

  // bytes session_remark = 21;
  if (this->session_remark().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->session_remark(), target);
  }

  // uint32 evaluate_stage = 22;
  if (this->evaluate_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->evaluate_stage(), target);
  }

  // bytes evaluate_remark = 23;
  if (this->evaluate_remark().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->evaluate_remark(), target);
  }

  // uint32 quality_control_stage = 24;
  if (this->quality_control_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->quality_control_stage(), target);
  }

  // uint32 quality_control_time = 25;
  if (this->quality_control_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->quality_control_time(), target);
  }

  // uint32 quality_control_userid = 26;
  if (this->quality_control_userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->quality_control_userid(), target);
  }

  // bytes quality_control_nickname = 27;
  if (this->quality_control_nickname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->quality_control_nickname(), target);
  }

  // bytes quality_control_comment = 28;
  if (this->quality_control_comment().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        28, this->quality_control_comment(), target);
  }

  // uint32 reponse_timeout_count = 29;
  if (this->reponse_timeout_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->reponse_timeout_count(), target);
  }

  // uint32 session_timeout_count = 30;
  if (this->session_timeout_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->session_timeout_count(), target);
  }

  // uint32 session_stage = 31;
  if (this->session_stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->session_stage(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.session_info)
  return target;
}

size_t session_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.session_info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .common.single_msg_push msg_list = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->msg_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->msg_list(static_cast<int>(i)));
    }
  }

  // bytes customer_nickname = 8;
  if (this->customer_nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->customer_nickname());
  }

  // bytes customer_avatar = 9;
  if (this->customer_avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->customer_avatar());
  }

  // bytes customerservice_nickname = 12;
  if (this->customerservice_nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->customerservice_nickname());
  }

  // bytes customerservice_avatar = 13;
  if (this->customerservice_avatar().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->customerservice_avatar());
  }

  // bytes customer_address = 15;
  if (this->customer_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->customer_address());
  }

  // bytes customer_terminal_source = 16;
  if (this->customer_terminal_source().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->customer_terminal_source());
  }

  // bytes customer_page_source = 17;
  if (this->customer_page_source().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->customer_page_source());
  }

  // bytes session_remark = 21;
  if (this->session_remark().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->session_remark());
  }

  // bytes evaluate_remark = 23;
  if (this->evaluate_remark().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->evaluate_remark());
  }

  // bytes quality_control_nickname = 27;
  if (this->quality_control_nickname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality_control_nickname());
  }

  // bytes quality_control_comment = 28;
  if (this->quality_control_comment().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality_control_comment());
  }

  // uint64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session_id());
  }

  // uint32 session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_type());
  }

  // uint32 req_session_time = 3;
  if (this->req_session_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->req_session_time());
  }

  // uint32 enter_session_time = 4;
  if (this->enter_session_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enter_session_time());
  }

  // uint32 close_session_time = 5;
  if (this->close_session_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->close_session_time());
  }

  // uint32 customer_id = 6;
  if (this->customer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->customer_id());
  }

  // uint32 customer_type = 7;
  if (this->customer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->customer_type());
  }

  // uint32 customerservice_id = 10;
  if (this->customerservice_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->customerservice_id());
  }

  // uint32 customerservice_type = 11;
  if (this->customerservice_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->customerservice_type());
  }

  // uint32 customer_login_client_type = 14;
  if (this->customer_login_client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->customer_login_client_type());
  }

  // uint32 question_stage = 18;
  if (this->question_stage() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->question_stage());
  }

  // uint32 consult_type = 19;
  if (this->consult_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->consult_type());
  }

  // uint32 evaluate_stage = 22;
  if (this->evaluate_stage() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->evaluate_stage());
  }

  // uint32 quality_control_stage = 24;
  if (this->quality_control_stage() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quality_control_stage());
  }

  // uint32 quality_control_time = 25;
  if (this->quality_control_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quality_control_time());
  }

  // uint32 quality_control_userid = 26;
  if (this->quality_control_userid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quality_control_userid());
  }

  // uint32 reponse_timeout_count = 29;
  if (this->reponse_timeout_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reponse_timeout_count());
  }

  // uint32 session_timeout_count = 30;
  if (this->session_timeout_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_timeout_count());
  }

  // uint32 session_stage = 31;
  if (this->session_stage() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_stage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void session_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.session_info)
  GOOGLE_DCHECK_NE(&from, this);
  const session_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const session_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.session_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.session_info)
    MergeFrom(*source);
  }
}

void session_info::MergeFrom(const session_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.session_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (from.customer_nickname().size() > 0) {

    customer_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_nickname_);
  }
  if (from.customer_avatar().size() > 0) {

    customer_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_avatar_);
  }
  if (from.customerservice_nickname().size() > 0) {

    customerservice_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customerservice_nickname_);
  }
  if (from.customerservice_avatar().size() > 0) {

    customerservice_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customerservice_avatar_);
  }
  if (from.customer_address().size() > 0) {

    customer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_address_);
  }
  if (from.customer_terminal_source().size() > 0) {

    customer_terminal_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_terminal_source_);
  }
  if (from.customer_page_source().size() > 0) {

    customer_page_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_page_source_);
  }
  if (from.session_remark().size() > 0) {

    session_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_remark_);
  }
  if (from.evaluate_remark().size() > 0) {

    evaluate_remark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.evaluate_remark_);
  }
  if (from.quality_control_nickname().size() > 0) {

    quality_control_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_control_nickname_);
  }
  if (from.quality_control_comment().size() > 0) {

    quality_control_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_control_comment_);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.req_session_time() != 0) {
    set_req_session_time(from.req_session_time());
  }
  if (from.enter_session_time() != 0) {
    set_enter_session_time(from.enter_session_time());
  }
  if (from.close_session_time() != 0) {
    set_close_session_time(from.close_session_time());
  }
  if (from.customer_id() != 0) {
    set_customer_id(from.customer_id());
  }
  if (from.customer_type() != 0) {
    set_customer_type(from.customer_type());
  }
  if (from.customerservice_id() != 0) {
    set_customerservice_id(from.customerservice_id());
  }
  if (from.customerservice_type() != 0) {
    set_customerservice_type(from.customerservice_type());
  }
  if (from.customer_login_client_type() != 0) {
    set_customer_login_client_type(from.customer_login_client_type());
  }
  if (from.question_stage() != 0) {
    set_question_stage(from.question_stage());
  }
  if (from.consult_type() != 0) {
    set_consult_type(from.consult_type());
  }
  if (from.evaluate_stage() != 0) {
    set_evaluate_stage(from.evaluate_stage());
  }
  if (from.quality_control_stage() != 0) {
    set_quality_control_stage(from.quality_control_stage());
  }
  if (from.quality_control_time() != 0) {
    set_quality_control_time(from.quality_control_time());
  }
  if (from.quality_control_userid() != 0) {
    set_quality_control_userid(from.quality_control_userid());
  }
  if (from.reponse_timeout_count() != 0) {
    set_reponse_timeout_count(from.reponse_timeout_count());
  }
  if (from.session_timeout_count() != 0) {
    set_session_timeout_count(from.session_timeout_count());
  }
  if (from.session_stage() != 0) {
    set_session_stage(from.session_stage());
  }
}

void session_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.session_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void session_info::CopyFrom(const session_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.session_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool session_info::IsInitialized() const {
  return true;
}

void session_info::Swap(session_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void session_info::InternalSwap(session_info* other) {
  using std::swap;
  CastToBase(&msg_list_)->InternalSwap(CastToBase(&other->msg_list_));
  customer_nickname_.Swap(&other->customer_nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_avatar_.Swap(&other->customer_avatar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customerservice_nickname_.Swap(&other->customerservice_nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customerservice_avatar_.Swap(&other->customerservice_avatar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_address_.Swap(&other->customer_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_terminal_source_.Swap(&other->customer_terminal_source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_page_source_.Swap(&other->customer_page_source_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_remark_.Swap(&other->session_remark_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  evaluate_remark_.Swap(&other->evaluate_remark_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  quality_control_nickname_.Swap(&other->quality_control_nickname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  quality_control_comment_.Swap(&other->quality_control_comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_id_, other->session_id_);
  swap(session_type_, other->session_type_);
  swap(req_session_time_, other->req_session_time_);
  swap(enter_session_time_, other->enter_session_time_);
  swap(close_session_time_, other->close_session_time_);
  swap(customer_id_, other->customer_id_);
  swap(customer_type_, other->customer_type_);
  swap(customerservice_id_, other->customerservice_id_);
  swap(customerservice_type_, other->customerservice_type_);
  swap(customer_login_client_type_, other->customer_login_client_type_);
  swap(question_stage_, other->question_stage_);
  swap(consult_type_, other->consult_type_);
  swap(evaluate_stage_, other->evaluate_stage_);
  swap(quality_control_stage_, other->quality_control_stage_);
  swap(quality_control_time_, other->quality_control_time_);
  swap(quality_control_userid_, other->quality_control_userid_);
  swap(reponse_timeout_count_, other->reponse_timeout_count_);
  swap(session_timeout_count_, other->session_timeout_count_);
  swap(session_stage_, other->session_stage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata session_info::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void quality_control_option::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int quality_control_option::kOptionIdFieldNumber;
const int quality_control_option::kOptionNameFieldNumber;
const int quality_control_option::kJudgeScoreFieldNumber;
const int quality_control_option::kOptionScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

quality_control_option::quality_control_option()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_quality_control_option.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.quality_control_option)
}
quality_control_option::quality_control_option(const quality_control_option& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  option_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.option_name().size() > 0) {
    option_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_name_);
  }
  ::memcpy(&option_id_, &from.option_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&option_score_) -
    reinterpret_cast<char*>(&option_id_)) + sizeof(option_score_));
  // @@protoc_insertion_point(copy_constructor:common.quality_control_option)
}

void quality_control_option::SharedCtor() {
  option_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&option_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_score_) -
      reinterpret_cast<char*>(&option_id_)) + sizeof(option_score_));
}

quality_control_option::~quality_control_option() {
  // @@protoc_insertion_point(destructor:common.quality_control_option)
  SharedDtor();
}

void quality_control_option::SharedDtor() {
  option_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void quality_control_option::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* quality_control_option::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const quality_control_option& quality_control_option::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_quality_control_option.base);
  return *internal_default_instance();
}


void quality_control_option::Clear() {
// @@protoc_insertion_point(message_clear_start:common.quality_control_option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  option_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&option_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_score_) -
      reinterpret_cast<char*>(&option_id_)) + sizeof(option_score_));
  _internal_metadata_.Clear();
}

bool quality_control_option::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.quality_control_option)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 option_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &option_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes option_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_option_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float judge_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &judge_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float option_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.quality_control_option)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.quality_control_option)
  return false;
#undef DO_
}

void quality_control_option::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.quality_control_option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 option_id = 1;
  if (this->option_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->option_id(), output);
  }

  // bytes option_name = 2;
  if (this->option_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->option_name(), output);
  }

  // float judge_score = 3;
  if (this->judge_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->judge_score(), output);
  }

  // float option_score = 4;
  if (this->option_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->option_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.quality_control_option)
}

::google::protobuf::uint8* quality_control_option::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.quality_control_option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 option_id = 1;
  if (this->option_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->option_id(), target);
  }

  // bytes option_name = 2;
  if (this->option_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->option_name(), target);
  }

  // float judge_score = 3;
  if (this->judge_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->judge_score(), target);
  }

  // float option_score = 4;
  if (this->option_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->option_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.quality_control_option)
  return target;
}

size_t quality_control_option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.quality_control_option)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes option_name = 2;
  if (this->option_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->option_name());
  }

  // uint64 option_id = 1;
  if (this->option_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->option_id());
  }

  // float judge_score = 3;
  if (this->judge_score() != 0) {
    total_size += 1 + 4;
  }

  // float option_score = 4;
  if (this->option_score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void quality_control_option::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.quality_control_option)
  GOOGLE_DCHECK_NE(&from, this);
  const quality_control_option* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const quality_control_option>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.quality_control_option)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.quality_control_option)
    MergeFrom(*source);
  }
}

void quality_control_option::MergeFrom(const quality_control_option& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.quality_control_option)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.option_name().size() > 0) {

    option_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_name_);
  }
  if (from.option_id() != 0) {
    set_option_id(from.option_id());
  }
  if (from.judge_score() != 0) {
    set_judge_score(from.judge_score());
  }
  if (from.option_score() != 0) {
    set_option_score(from.option_score());
  }
}

void quality_control_option::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.quality_control_option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quality_control_option::CopyFrom(const quality_control_option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.quality_control_option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quality_control_option::IsInitialized() const {
  return true;
}

void quality_control_option::Swap(quality_control_option* other) {
  if (other == this) return;
  InternalSwap(other);
}
void quality_control_option::InternalSwap(quality_control_option* other) {
  using std::swap;
  option_name_.Swap(&other->option_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(option_id_, other->option_id_);
  swap(judge_score_, other->judge_score_);
  swap(option_score_, other->option_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata quality_control_option::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void taboo_option::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taboo_option::kOptionIdFieldNumber;
const int taboo_option::kOptionNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taboo_option::taboo_option()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_taboo_option.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.taboo_option)
}
taboo_option::taboo_option(const taboo_option& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  option_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.option_name().size() > 0) {
    option_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_name_);
  }
  option_id_ = from.option_id_;
  // @@protoc_insertion_point(copy_constructor:common.taboo_option)
}

void taboo_option::SharedCtor() {
  option_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  option_id_ = GOOGLE_ULONGLONG(0);
}

taboo_option::~taboo_option() {
  // @@protoc_insertion_point(destructor:common.taboo_option)
  SharedDtor();
}

void taboo_option::SharedDtor() {
  option_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void taboo_option::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* taboo_option::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const taboo_option& taboo_option::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_taboo_option.base);
  return *internal_default_instance();
}


void taboo_option::Clear() {
// @@protoc_insertion_point(message_clear_start:common.taboo_option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  option_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  option_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool taboo_option::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.taboo_option)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 option_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &option_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes option_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_option_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.taboo_option)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.taboo_option)
  return false;
#undef DO_
}

void taboo_option::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.taboo_option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 option_id = 1;
  if (this->option_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->option_id(), output);
  }

  // bytes option_name = 2;
  if (this->option_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->option_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:common.taboo_option)
}

::google::protobuf::uint8* taboo_option::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:common.taboo_option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 option_id = 1;
  if (this->option_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->option_id(), target);
  }

  // bytes option_name = 2;
  if (this->option_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->option_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.taboo_option)
  return target;
}

size_t taboo_option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.taboo_option)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes option_name = 2;
  if (this->option_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->option_name());
  }

  // uint64 option_id = 1;
  if (this->option_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->option_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void taboo_option::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.taboo_option)
  GOOGLE_DCHECK_NE(&from, this);
  const taboo_option* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taboo_option>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.taboo_option)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.taboo_option)
    MergeFrom(*source);
  }
}

void taboo_option::MergeFrom(const taboo_option& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.taboo_option)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.option_name().size() > 0) {

    option_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_name_);
  }
  if (from.option_id() != 0) {
    set_option_id(from.option_id());
  }
}

void taboo_option::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.taboo_option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taboo_option::CopyFrom(const taboo_option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.taboo_option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taboo_option::IsInitialized() const {
  return true;
}

void taboo_option::Swap(taboo_option* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taboo_option::InternalSwap(taboo_option* other) {
  using std::swap;
  option_name_.Swap(&other->option_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(option_id_, other->option_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata taboo_option::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::TEXT_CONTENT* Arena::CreateMaybeMessage< ::common::TEXT_CONTENT >(Arena* arena) {
  return Arena::CreateInternal< ::common::TEXT_CONTENT >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::PICTURE_CONTENT* Arena::CreateMaybeMessage< ::common::PICTURE_CONTENT >(Arena* arena) {
  return Arena::CreateInternal< ::common::PICTURE_CONTENT >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::VOICE_CONTENT* Arena::CreateMaybeMessage< ::common::VOICE_CONTENT >(Arena* arena) {
  return Arena::CreateInternal< ::common::VOICE_CONTENT >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::msg_content* Arena::CreateMaybeMessage< ::common::msg_content >(Arena* arena) {
  return Arena::CreateInternal< ::common::msg_content >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::errorinfo* Arena::CreateMaybeMessage< ::common::errorinfo >(Arena* arena) {
  return Arena::CreateInternal< ::common::errorinfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::user_info* Arena::CreateMaybeMessage< ::common::user_info >(Arena* arena) {
  return Arena::CreateInternal< ::common::user_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::single_msg_push* Arena::CreateMaybeMessage< ::common::single_msg_push >(Arena* arena) {
  return Arena::CreateInternal< ::common::single_msg_push >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::session_info* Arena::CreateMaybeMessage< ::common::session_info >(Arena* arena) {
  return Arena::CreateInternal< ::common::session_info >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::quality_control_option* Arena::CreateMaybeMessage< ::common::quality_control_option >(Arena* arena) {
  return Arena::CreateInternal< ::common::quality_control_option >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::common::taboo_option* Arena::CreateMaybeMessage< ::common::taboo_option >(Arena* arena) {
  return Arena::CreateInternal< ::common::taboo_option >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
