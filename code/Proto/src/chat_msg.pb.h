// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_msg.proto

#ifndef PROTOBUF_INCLUDED_chat_5fmsg_2eproto
#define PROTOBUF_INCLUDED_chat_5fmsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chat_5fmsg_2eproto 

namespace protobuf_chat_5fmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[19];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chat_5fmsg_2eproto
namespace chat_msg {
class group_notify;
class group_notifyDefaultTypeInternal;
extern group_notifyDefaultTypeInternal _group_notify_default_instance_;
class msg_group_recv;
class msg_group_recvDefaultTypeInternal;
extern msg_group_recvDefaultTypeInternal _msg_group_recv_default_instance_;
class msg_group_recv_ack;
class msg_group_recv_ackDefaultTypeInternal;
extern msg_group_recv_ackDefaultTypeInternal _msg_group_recv_ack_default_instance_;
class msg_group_send;
class msg_group_sendDefaultTypeInternal;
extern msg_group_sendDefaultTypeInternal _msg_group_send_default_instance_;
class msg_group_send_ack;
class msg_group_send_ackDefaultTypeInternal;
extern msg_group_send_ackDefaultTypeInternal _msg_group_send_ack_default_instance_;
class msg_p2p_ack;
class msg_p2p_ackDefaultTypeInternal;
extern msg_p2p_ackDefaultTypeInternal _msg_p2p_ack_default_instance_;
class msg_p2p_recv;
class msg_p2p_recvDefaultTypeInternal;
extern msg_p2p_recvDefaultTypeInternal _msg_p2p_recv_default_instance_;
class msg_p2p_send;
class msg_p2p_sendDefaultTypeInternal;
extern msg_p2p_sendDefaultTypeInternal _msg_p2p_send_default_instance_;
class offline_msg_group_ack;
class offline_msg_group_ackDefaultTypeInternal;
extern offline_msg_group_ackDefaultTypeInternal _offline_msg_group_ack_default_instance_;
class offline_msg_group_req;
class offline_msg_group_reqDefaultTypeInternal;
extern offline_msg_group_reqDefaultTypeInternal _offline_msg_group_req_default_instance_;
class offline_msg_group_rsp;
class offline_msg_group_rspDefaultTypeInternal;
extern offline_msg_group_rspDefaultTypeInternal _offline_msg_group_rsp_default_instance_;
class offline_msg_group_rsp_ack;
class offline_msg_group_rsp_ackDefaultTypeInternal;
extern offline_msg_group_rsp_ackDefaultTypeInternal _offline_msg_group_rsp_ack_default_instance_;
class offline_msg_p2p_req;
class offline_msg_p2p_reqDefaultTypeInternal;
extern offline_msg_p2p_reqDefaultTypeInternal _offline_msg_p2p_req_default_instance_;
class offline_msg_p2p_req_ack;
class offline_msg_p2p_req_ackDefaultTypeInternal;
extern offline_msg_p2p_req_ackDefaultTypeInternal _offline_msg_p2p_req_ack_default_instance_;
class offline_msg_p2p_rsp;
class offline_msg_p2p_rspDefaultTypeInternal;
extern offline_msg_p2p_rspDefaultTypeInternal _offline_msg_p2p_rsp_default_instance_;
class offline_msg_p2p_rsp_ack;
class offline_msg_p2p_rsp_ackDefaultTypeInternal;
extern offline_msg_p2p_rsp_ackDefaultTypeInternal _offline_msg_p2p_rsp_ack_default_instance_;
class personal_notify;
class personal_notifyDefaultTypeInternal;
extern personal_notifyDefaultTypeInternal _personal_notify_default_instance_;
class service_control;
class service_controlDefaultTypeInternal;
extern service_controlDefaultTypeInternal _service_control_default_instance_;
class service_control_ack;
class service_control_ackDefaultTypeInternal;
extern service_control_ackDefaultTypeInternal _service_control_ack_default_instance_;
}  // namespace chat_msg
namespace google {
namespace protobuf {
template<> ::chat_msg::group_notify* Arena::CreateMaybeMessage<::chat_msg::group_notify>(Arena*);
template<> ::chat_msg::msg_group_recv* Arena::CreateMaybeMessage<::chat_msg::msg_group_recv>(Arena*);
template<> ::chat_msg::msg_group_recv_ack* Arena::CreateMaybeMessage<::chat_msg::msg_group_recv_ack>(Arena*);
template<> ::chat_msg::msg_group_send* Arena::CreateMaybeMessage<::chat_msg::msg_group_send>(Arena*);
template<> ::chat_msg::msg_group_send_ack* Arena::CreateMaybeMessage<::chat_msg::msg_group_send_ack>(Arena*);
template<> ::chat_msg::msg_p2p_ack* Arena::CreateMaybeMessage<::chat_msg::msg_p2p_ack>(Arena*);
template<> ::chat_msg::msg_p2p_recv* Arena::CreateMaybeMessage<::chat_msg::msg_p2p_recv>(Arena*);
template<> ::chat_msg::msg_p2p_send* Arena::CreateMaybeMessage<::chat_msg::msg_p2p_send>(Arena*);
template<> ::chat_msg::offline_msg_group_ack* Arena::CreateMaybeMessage<::chat_msg::offline_msg_group_ack>(Arena*);
template<> ::chat_msg::offline_msg_group_req* Arena::CreateMaybeMessage<::chat_msg::offline_msg_group_req>(Arena*);
template<> ::chat_msg::offline_msg_group_rsp* Arena::CreateMaybeMessage<::chat_msg::offline_msg_group_rsp>(Arena*);
template<> ::chat_msg::offline_msg_group_rsp_ack* Arena::CreateMaybeMessage<::chat_msg::offline_msg_group_rsp_ack>(Arena*);
template<> ::chat_msg::offline_msg_p2p_req* Arena::CreateMaybeMessage<::chat_msg::offline_msg_p2p_req>(Arena*);
template<> ::chat_msg::offline_msg_p2p_req_ack* Arena::CreateMaybeMessage<::chat_msg::offline_msg_p2p_req_ack>(Arena*);
template<> ::chat_msg::offline_msg_p2p_rsp* Arena::CreateMaybeMessage<::chat_msg::offline_msg_p2p_rsp>(Arena*);
template<> ::chat_msg::offline_msg_p2p_rsp_ack* Arena::CreateMaybeMessage<::chat_msg::offline_msg_p2p_rsp_ack>(Arena*);
template<> ::chat_msg::personal_notify* Arena::CreateMaybeMessage<::chat_msg::personal_notify>(Arena*);
template<> ::chat_msg::service_control* Arena::CreateMaybeMessage<::chat_msg::service_control>(Arena*);
template<> ::chat_msg::service_control_ack* Arena::CreateMaybeMessage<::chat_msg::service_control_ack>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chat_msg {

// ===================================================================

class msg_p2p_send : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.msg_p2p_send) */ {
 public:
  msg_p2p_send();
  virtual ~msg_p2p_send();

  msg_p2p_send(const msg_p2p_send& from);

  inline msg_p2p_send& operator=(const msg_p2p_send& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_p2p_send(msg_p2p_send&& from) noexcept
    : msg_p2p_send() {
    *this = ::std::move(from);
  }

  inline msg_p2p_send& operator=(msg_p2p_send&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_p2p_send& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_p2p_send* internal_default_instance() {
    return reinterpret_cast<const msg_p2p_send*>(
               &_msg_p2p_send_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(msg_p2p_send* other);
  friend void swap(msg_p2p_send& a, msg_p2p_send& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_p2p_send* New() const final {
    return CreateMaybeMessage<msg_p2p_send>(NULL);
  }

  msg_p2p_send* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_p2p_send>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_p2p_send& from);
  void MergeFrom(const msg_p2p_send& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_p2p_send* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.msg_content msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  private:
  const ::common::msg_content& _internal_msg() const;
  public:
  const ::common::msg_content& msg() const;
  ::common::msg_content* release_msg();
  ::common::msg_content* mutable_msg();
  void set_allocated_msg(::common::msg_content* msg);

  // required uint32 recv_id = 1;
  bool has_recv_id() const;
  void clear_recv_id();
  static const int kRecvIdFieldNumber = 1;
  ::google::protobuf::uint32 recv_id() const;
  void set_recv_id(::google::protobuf::uint32 value);

  // required uint32 msg_type = 2;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  ::google::protobuf::uint32 msg_type() const;
  void set_msg_type(::google::protobuf::uint32 value);

  // optional uint32 receiver_type = 4;
  bool has_receiver_type() const;
  void clear_receiver_type();
  static const int kReceiverTypeFieldNumber = 4;
  ::google::protobuf::uint32 receiver_type() const;
  void set_receiver_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.msg_p2p_send)
 private:
  void set_has_recv_id();
  void clear_has_recv_id();
  void set_has_msg_type();
  void clear_has_msg_type();
  void set_has_msg();
  void clear_has_msg();
  void set_has_receiver_type();
  void clear_has_receiver_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::msg_content* msg_;
  ::google::protobuf::uint32 recv_id_;
  ::google::protobuf::uint32 msg_type_;
  ::google::protobuf::uint32 receiver_type_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_p2p_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.msg_p2p_ack) */ {
 public:
  msg_p2p_ack();
  virtual ~msg_p2p_ack();

  msg_p2p_ack(const msg_p2p_ack& from);

  inline msg_p2p_ack& operator=(const msg_p2p_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_p2p_ack(msg_p2p_ack&& from) noexcept
    : msg_p2p_ack() {
    *this = ::std::move(from);
  }

  inline msg_p2p_ack& operator=(msg_p2p_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_p2p_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_p2p_ack* internal_default_instance() {
    return reinterpret_cast<const msg_p2p_ack*>(
               &_msg_p2p_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(msg_p2p_ack* other);
  friend void swap(msg_p2p_ack& a, msg_p2p_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_p2p_ack* New() const final {
    return CreateMaybeMessage<msg_p2p_ack>(NULL);
  }

  msg_p2p_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_p2p_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_p2p_ack& from);
  void MergeFrom(const msg_p2p_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_p2p_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // optional .common.msg_content msg = 4;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  private:
  const ::common::msg_content& _internal_msg() const;
  public:
  const ::common::msg_content& msg() const;
  ::common::msg_content* release_msg();
  ::common::msg_content* mutable_msg();
  void set_allocated_msg(::common::msg_content* msg);

  // optional uint64 msg_id = 2;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // optional uint64 send_time = 3;
  bool has_send_time() const;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 3;
  ::google::protobuf::uint64 send_time() const;
  void set_send_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat_msg.msg_p2p_ack)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_send_time();
  void clear_has_send_time();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::errorinfo* error_;
  ::common::msg_content* msg_;
  ::google::protobuf::uint64 msg_id_;
  ::google::protobuf::uint64 send_time_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_p2p_recv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.msg_p2p_recv) */ {
 public:
  msg_p2p_recv();
  virtual ~msg_p2p_recv();

  msg_p2p_recv(const msg_p2p_recv& from);

  inline msg_p2p_recv& operator=(const msg_p2p_recv& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_p2p_recv(msg_p2p_recv&& from) noexcept
    : msg_p2p_recv() {
    *this = ::std::move(from);
  }

  inline msg_p2p_recv& operator=(msg_p2p_recv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_p2p_recv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_p2p_recv* internal_default_instance() {
    return reinterpret_cast<const msg_p2p_recv*>(
               &_msg_p2p_recv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(msg_p2p_recv* other);
  friend void swap(msg_p2p_recv& a, msg_p2p_recv& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_p2p_recv* New() const final {
    return CreateMaybeMessage<msg_p2p_recv>(NULL);
  }

  msg_p2p_recv* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_p2p_recv>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_p2p_recv& from);
  void MergeFrom(const msg_p2p_recv& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_p2p_recv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes send_nickname = 5;
  bool has_send_nickname() const;
  void clear_send_nickname();
  static const int kSendNicknameFieldNumber = 5;
  const ::std::string& send_nickname() const;
  void set_send_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_send_nickname(::std::string&& value);
  #endif
  void set_send_nickname(const char* value);
  void set_send_nickname(const void* value, size_t size);
  ::std::string* mutable_send_nickname();
  ::std::string* release_send_nickname();
  void set_allocated_send_nickname(::std::string* send_nickname);

  // optional bytes send_avatar = 6;
  bool has_send_avatar() const;
  void clear_send_avatar();
  static const int kSendAvatarFieldNumber = 6;
  const ::std::string& send_avatar() const;
  void set_send_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_send_avatar(::std::string&& value);
  #endif
  void set_send_avatar(const char* value);
  void set_send_avatar(const void* value, size_t size);
  ::std::string* mutable_send_avatar();
  ::std::string* release_send_avatar();
  void set_allocated_send_avatar(::std::string* send_avatar);

  // required .common.msg_content msg = 8;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 8;
  private:
  const ::common::msg_content& _internal_msg() const;
  public:
  const ::common::msg_content& msg() const;
  ::common::msg_content* release_msg();
  ::common::msg_content* mutable_msg();
  void set_allocated_msg(::common::msg_content* msg);

  // required uint32 send_id = 1;
  bool has_send_id() const;
  void clear_send_id();
  static const int kSendIdFieldNumber = 1;
  ::google::protobuf::uint32 send_id() const;
  void set_send_id(::google::protobuf::uint32 value);

  // required uint32 user_type = 2;
  bool has_user_type() const;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  ::google::protobuf::uint32 user_type() const;
  void set_user_type(::google::protobuf::uint32 value);

  // required uint64 msg_id = 3;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // required uint64 send_time = 4;
  bool has_send_time() const;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 4;
  ::google::protobuf::uint64 send_time() const;
  void set_send_time(::google::protobuf::uint64 value);

  // required uint32 msg_type = 7;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 7;
  ::google::protobuf::uint32 msg_type() const;
  void set_msg_type(::google::protobuf::uint32 value);

  // optional uint32 receiver_type = 9;
  bool has_receiver_type() const;
  void clear_receiver_type();
  static const int kReceiverTypeFieldNumber = 9;
  ::google::protobuf::uint32 receiver_type() const;
  void set_receiver_type(::google::protobuf::uint32 value);

  // optional uint32 receiver_id = 10;
  bool has_receiver_id() const;
  void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 10;
  ::google::protobuf::uint32 receiver_id() const;
  void set_receiver_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.msg_p2p_recv)
 private:
  void set_has_send_id();
  void clear_has_send_id();
  void set_has_user_type();
  void clear_has_user_type();
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_send_time();
  void clear_has_send_time();
  void set_has_send_nickname();
  void clear_has_send_nickname();
  void set_has_send_avatar();
  void clear_has_send_avatar();
  void set_has_msg_type();
  void clear_has_msg_type();
  void set_has_msg();
  void clear_has_msg();
  void set_has_receiver_type();
  void clear_has_receiver_type();
  void set_has_receiver_id();
  void clear_has_receiver_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr send_nickname_;
  ::google::protobuf::internal::ArenaStringPtr send_avatar_;
  ::common::msg_content* msg_;
  ::google::protobuf::uint32 send_id_;
  ::google::protobuf::uint32 user_type_;
  ::google::protobuf::uint64 msg_id_;
  ::google::protobuf::uint64 send_time_;
  ::google::protobuf::uint32 msg_type_;
  ::google::protobuf::uint32 receiver_type_;
  ::google::protobuf::uint32 receiver_id_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_group_send : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.msg_group_send) */ {
 public:
  msg_group_send();
  virtual ~msg_group_send();

  msg_group_send(const msg_group_send& from);

  inline msg_group_send& operator=(const msg_group_send& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_group_send(msg_group_send&& from) noexcept
    : msg_group_send() {
    *this = ::std::move(from);
  }

  inline msg_group_send& operator=(msg_group_send&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_group_send& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_group_send* internal_default_instance() {
    return reinterpret_cast<const msg_group_send*>(
               &_msg_group_send_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(msg_group_send* other);
  friend void swap(msg_group_send& a, msg_group_send& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_group_send* New() const final {
    return CreateMaybeMessage<msg_group_send>(NULL);
  }

  msg_group_send* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_group_send>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_group_send& from);
  void MergeFrom(const msg_group_send& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_group_send* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.msg_content msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  private:
  const ::common::msg_content& _internal_msg() const;
  public:
  const ::common::msg_content& msg() const;
  ::common::msg_content* release_msg();
  ::common::msg_content* mutable_msg();
  void set_allocated_msg(::common::msg_content* msg);

  // required uint32 group_id = 1;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // required uint32 msg_type = 2;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  ::google::protobuf::uint32 msg_type() const;
  void set_msg_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.msg_group_send)
 private:
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_msg_type();
  void clear_has_msg_type();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::msg_content* msg_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 msg_type_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_group_send_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.msg_group_send_ack) */ {
 public:
  msg_group_send_ack();
  virtual ~msg_group_send_ack();

  msg_group_send_ack(const msg_group_send_ack& from);

  inline msg_group_send_ack& operator=(const msg_group_send_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_group_send_ack(msg_group_send_ack&& from) noexcept
    : msg_group_send_ack() {
    *this = ::std::move(from);
  }

  inline msg_group_send_ack& operator=(msg_group_send_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_group_send_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_group_send_ack* internal_default_instance() {
    return reinterpret_cast<const msg_group_send_ack*>(
               &_msg_group_send_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(msg_group_send_ack* other);
  friend void swap(msg_group_send_ack& a, msg_group_send_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_group_send_ack* New() const final {
    return CreateMaybeMessage<msg_group_send_ack>(NULL);
  }

  msg_group_send_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_group_send_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_group_send_ack& from);
  void MergeFrom(const msg_group_send_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_group_send_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // optional .common.msg_content msg = 4;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  private:
  const ::common::msg_content& _internal_msg() const;
  public:
  const ::common::msg_content& msg() const;
  ::common::msg_content* release_msg();
  ::common::msg_content* mutable_msg();
  void set_allocated_msg(::common::msg_content* msg);

  // optional uint64 msg_id = 2;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // optional uint64 send_time = 3;
  bool has_send_time() const;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 3;
  ::google::protobuf::uint64 send_time() const;
  void set_send_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat_msg.msg_group_send_ack)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_send_time();
  void clear_has_send_time();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::errorinfo* error_;
  ::common::msg_content* msg_;
  ::google::protobuf::uint64 msg_id_;
  ::google::protobuf::uint64 send_time_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_group_recv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.msg_group_recv) */ {
 public:
  msg_group_recv();
  virtual ~msg_group_recv();

  msg_group_recv(const msg_group_recv& from);

  inline msg_group_recv& operator=(const msg_group_recv& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_group_recv(msg_group_recv&& from) noexcept
    : msg_group_recv() {
    *this = ::std::move(from);
  }

  inline msg_group_recv& operator=(msg_group_recv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_group_recv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_group_recv* internal_default_instance() {
    return reinterpret_cast<const msg_group_recv*>(
               &_msg_group_recv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(msg_group_recv* other);
  friend void swap(msg_group_recv& a, msg_group_recv& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_group_recv* New() const final {
    return CreateMaybeMessage<msg_group_recv>(NULL);
  }

  msg_group_recv* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_group_recv>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_group_recv& from);
  void MergeFrom(const msg_group_recv& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_group_recv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.msg_content msg = 7;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 7;
  private:
  const ::common::msg_content& _internal_msg() const;
  public:
  const ::common::msg_content& msg() const;
  ::common::msg_content* release_msg();
  ::common::msg_content* mutable_msg();
  void set_allocated_msg(::common::msg_content* msg);

  // required uint32 group_id = 1;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // required uint32 group_type = 2;
  bool has_group_type() const;
  void clear_group_type();
  static const int kGroupTypeFieldNumber = 2;
  ::google::protobuf::uint32 group_type() const;
  void set_group_type(::google::protobuf::uint32 value);

  // required uint64 msg_id = 4;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // required uint32 send_id = 3;
  bool has_send_id() const;
  void clear_send_id();
  static const int kSendIdFieldNumber = 3;
  ::google::protobuf::uint32 send_id() const;
  void set_send_id(::google::protobuf::uint32 value);

  // required uint32 msg_type = 6;
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 6;
  ::google::protobuf::uint32 msg_type() const;
  void set_msg_type(::google::protobuf::uint32 value);

  // required uint64 send_time = 5;
  bool has_send_time() const;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 5;
  ::google::protobuf::uint64 send_time() const;
  void set_send_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat_msg.msg_group_recv)
 private:
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_group_type();
  void clear_has_group_type();
  void set_has_send_id();
  void clear_has_send_id();
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_send_time();
  void clear_has_send_time();
  void set_has_msg_type();
  void clear_has_msg_type();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::msg_content* msg_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 group_type_;
  ::google::protobuf::uint64 msg_id_;
  ::google::protobuf::uint32 send_id_;
  ::google::protobuf::uint32 msg_type_;
  ::google::protobuf::uint64 send_time_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class msg_group_recv_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.msg_group_recv_ack) */ {
 public:
  msg_group_recv_ack();
  virtual ~msg_group_recv_ack();

  msg_group_recv_ack(const msg_group_recv_ack& from);

  inline msg_group_recv_ack& operator=(const msg_group_recv_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_group_recv_ack(msg_group_recv_ack&& from) noexcept
    : msg_group_recv_ack() {
    *this = ::std::move(from);
  }

  inline msg_group_recv_ack& operator=(msg_group_recv_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg_group_recv_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_group_recv_ack* internal_default_instance() {
    return reinterpret_cast<const msg_group_recv_ack*>(
               &_msg_group_recv_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(msg_group_recv_ack* other);
  friend void swap(msg_group_recv_ack& a, msg_group_recv_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_group_recv_ack* New() const final {
    return CreateMaybeMessage<msg_group_recv_ack>(NULL);
  }

  msg_group_recv_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_group_recv_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_group_recv_ack& from);
  void MergeFrom(const msg_group_recv_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_group_recv_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // optional uint64 msg_id = 2;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // optional uint32 group_id = 3;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.msg_group_recv_ack)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_group_id();
  void clear_has_group_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint64 msg_id_;
  ::google::protobuf::uint32 group_id_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_msg_p2p_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.offline_msg_p2p_req) */ {
 public:
  offline_msg_p2p_req();
  virtual ~offline_msg_p2p_req();

  offline_msg_p2p_req(const offline_msg_p2p_req& from);

  inline offline_msg_p2p_req& operator=(const offline_msg_p2p_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_msg_p2p_req(offline_msg_p2p_req&& from) noexcept
    : offline_msg_p2p_req() {
    *this = ::std::move(from);
  }

  inline offline_msg_p2p_req& operator=(offline_msg_p2p_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_msg_p2p_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_msg_p2p_req* internal_default_instance() {
    return reinterpret_cast<const offline_msg_p2p_req*>(
               &_offline_msg_p2p_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(offline_msg_p2p_req* other);
  friend void swap(offline_msg_p2p_req& a, offline_msg_p2p_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_msg_p2p_req* New() const final {
    return CreateMaybeMessage<offline_msg_p2p_req>(NULL);
  }

  offline_msg_p2p_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_msg_p2p_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_msg_p2p_req& from);
  void MergeFrom(const offline_msg_p2p_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_msg_p2p_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg_tag = 4;
  bool has_msg_tag() const;
  void clear_msg_tag();
  static const int kMsgTagFieldNumber = 4;
  const ::std::string& msg_tag() const;
  void set_msg_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_tag(::std::string&& value);
  #endif
  void set_msg_tag(const char* value);
  void set_msg_tag(const char* value, size_t size);
  ::std::string* mutable_msg_tag();
  ::std::string* release_msg_tag();
  void set_allocated_msg_tag(::std::string* msg_tag);

  // optional uint32 msg_count = 1;
  bool has_msg_count() const;
  void clear_msg_count();
  static const int kMsgCountFieldNumber = 1;
  ::google::protobuf::uint32 msg_count() const;
  void set_msg_count(::google::protobuf::uint32 value);

  // optional uint32 send_id = 2;
  bool has_send_id() const;
  void clear_send_id();
  static const int kSendIdFieldNumber = 2;
  ::google::protobuf::uint32 send_id() const;
  void set_send_id(::google::protobuf::uint32 value);

  // optional uint64 msg_id = 3;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat_msg.offline_msg_p2p_req)
 private:
  void set_has_msg_count();
  void clear_has_msg_count();
  void set_has_send_id();
  void clear_has_send_id();
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_msg_tag();
  void clear_has_msg_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_tag_;
  ::google::protobuf::uint32 msg_count_;
  ::google::protobuf::uint32 send_id_;
  ::google::protobuf::uint64 msg_id_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_msg_p2p_req_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.offline_msg_p2p_req_ack) */ {
 public:
  offline_msg_p2p_req_ack();
  virtual ~offline_msg_p2p_req_ack();

  offline_msg_p2p_req_ack(const offline_msg_p2p_req_ack& from);

  inline offline_msg_p2p_req_ack& operator=(const offline_msg_p2p_req_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_msg_p2p_req_ack(offline_msg_p2p_req_ack&& from) noexcept
    : offline_msg_p2p_req_ack() {
    *this = ::std::move(from);
  }

  inline offline_msg_p2p_req_ack& operator=(offline_msg_p2p_req_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_msg_p2p_req_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_msg_p2p_req_ack* internal_default_instance() {
    return reinterpret_cast<const offline_msg_p2p_req_ack*>(
               &_offline_msg_p2p_req_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(offline_msg_p2p_req_ack* other);
  friend void swap(offline_msg_p2p_req_ack& a, offline_msg_p2p_req_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_msg_p2p_req_ack* New() const final {
    return CreateMaybeMessage<offline_msg_p2p_req_ack>(NULL);
  }

  offline_msg_p2p_req_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_msg_p2p_req_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_msg_p2p_req_ack& from);
  void MergeFrom(const offline_msg_p2p_req_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_msg_p2p_req_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // optional uint64 msg_id = 3;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // optional uint32 send_id = 2;
  bool has_send_id() const;
  void clear_send_id();
  static const int kSendIdFieldNumber = 2;
  ::google::protobuf::uint32 send_id() const;
  void set_send_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.offline_msg_p2p_req_ack)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_send_id();
  void clear_has_send_id();
  void set_has_msg_id();
  void clear_has_msg_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint64 msg_id_;
  ::google::protobuf::uint32 send_id_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_msg_p2p_rsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.offline_msg_p2p_rsp) */ {
 public:
  offline_msg_p2p_rsp();
  virtual ~offline_msg_p2p_rsp();

  offline_msg_p2p_rsp(const offline_msg_p2p_rsp& from);

  inline offline_msg_p2p_rsp& operator=(const offline_msg_p2p_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_msg_p2p_rsp(offline_msg_p2p_rsp&& from) noexcept
    : offline_msg_p2p_rsp() {
    *this = ::std::move(from);
  }

  inline offline_msg_p2p_rsp& operator=(offline_msg_p2p_rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_msg_p2p_rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_msg_p2p_rsp* internal_default_instance() {
    return reinterpret_cast<const offline_msg_p2p_rsp*>(
               &_offline_msg_p2p_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(offline_msg_p2p_rsp* other);
  friend void swap(offline_msg_p2p_rsp& a, offline_msg_p2p_rsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_msg_p2p_rsp* New() const final {
    return CreateMaybeMessage<offline_msg_p2p_rsp>(NULL);
  }

  offline_msg_p2p_rsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_msg_p2p_rsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_msg_p2p_rsp& from);
  void MergeFrom(const offline_msg_p2p_rsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_msg_p2p_rsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat_msg.msg_p2p_recv msg_list = 1;
  int msg_list_size() const;
  void clear_msg_list();
  static const int kMsgListFieldNumber = 1;
  ::chat_msg::msg_p2p_recv* mutable_msg_list(int index);
  ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_p2p_recv >*
      mutable_msg_list();
  const ::chat_msg::msg_p2p_recv& msg_list(int index) const;
  ::chat_msg::msg_p2p_recv* add_msg_list();
  const ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_p2p_recv >&
      msg_list() const;

  // optional string msg_tag = 3;
  bool has_msg_tag() const;
  void clear_msg_tag();
  static const int kMsgTagFieldNumber = 3;
  const ::std::string& msg_tag() const;
  void set_msg_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_tag(::std::string&& value);
  #endif
  void set_msg_tag(const char* value);
  void set_msg_tag(const char* value, size_t size);
  ::std::string* mutable_msg_tag();
  ::std::string* release_msg_tag();
  void set_allocated_msg_tag(::std::string* msg_tag);

  // optional uint32 total = 2;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 2;
  ::google::protobuf::uint32 total() const;
  void set_total(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.offline_msg_p2p_rsp)
 private:
  void set_has_total();
  void clear_has_total();
  void set_has_msg_tag();
  void clear_has_msg_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_p2p_recv > msg_list_;
  ::google::protobuf::internal::ArenaStringPtr msg_tag_;
  ::google::protobuf::uint32 total_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_msg_p2p_rsp_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.offline_msg_p2p_rsp_ack) */ {
 public:
  offline_msg_p2p_rsp_ack();
  virtual ~offline_msg_p2p_rsp_ack();

  offline_msg_p2p_rsp_ack(const offline_msg_p2p_rsp_ack& from);

  inline offline_msg_p2p_rsp_ack& operator=(const offline_msg_p2p_rsp_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_msg_p2p_rsp_ack(offline_msg_p2p_rsp_ack&& from) noexcept
    : offline_msg_p2p_rsp_ack() {
    *this = ::std::move(from);
  }

  inline offline_msg_p2p_rsp_ack& operator=(offline_msg_p2p_rsp_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_msg_p2p_rsp_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_msg_p2p_rsp_ack* internal_default_instance() {
    return reinterpret_cast<const offline_msg_p2p_rsp_ack*>(
               &_offline_msg_p2p_rsp_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(offline_msg_p2p_rsp_ack* other);
  friend void swap(offline_msg_p2p_rsp_ack& a, offline_msg_p2p_rsp_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_msg_p2p_rsp_ack* New() const final {
    return CreateMaybeMessage<offline_msg_p2p_rsp_ack>(NULL);
  }

  offline_msg_p2p_rsp_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_msg_p2p_rsp_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_msg_p2p_rsp_ack& from);
  void MergeFrom(const offline_msg_p2p_rsp_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_msg_p2p_rsp_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 msg_id = 2;
  int msg_id_size() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint64 msg_id(int index) const;
  void set_msg_id(int index, ::google::protobuf::uint64 value);
  void add_msg_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      msg_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_msg_id();

  // required .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:chat_msg.offline_msg_p2p_rsp_ack)
 private:
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > msg_id_;
  ::common::errorinfo* error_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_msg_group_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.offline_msg_group_req) */ {
 public:
  offline_msg_group_req();
  virtual ~offline_msg_group_req();

  offline_msg_group_req(const offline_msg_group_req& from);

  inline offline_msg_group_req& operator=(const offline_msg_group_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_msg_group_req(offline_msg_group_req&& from) noexcept
    : offline_msg_group_req() {
    *this = ::std::move(from);
  }

  inline offline_msg_group_req& operator=(offline_msg_group_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_msg_group_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_msg_group_req* internal_default_instance() {
    return reinterpret_cast<const offline_msg_group_req*>(
               &_offline_msg_group_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(offline_msg_group_req* other);
  friend void swap(offline_msg_group_req& a, offline_msg_group_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_msg_group_req* New() const final {
    return CreateMaybeMessage<offline_msg_group_req>(NULL);
  }

  offline_msg_group_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_msg_group_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_msg_group_req& from);
  void MergeFrom(const offline_msg_group_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_msg_group_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg_tag = 4;
  bool has_msg_tag() const;
  void clear_msg_tag();
  static const int kMsgTagFieldNumber = 4;
  const ::std::string& msg_tag() const;
  void set_msg_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_tag(::std::string&& value);
  #endif
  void set_msg_tag(const char* value);
  void set_msg_tag(const char* value, size_t size);
  ::std::string* mutable_msg_tag();
  ::std::string* release_msg_tag();
  void set_allocated_msg_tag(::std::string* msg_tag);

  // required uint32 msg_count = 1;
  bool has_msg_count() const;
  void clear_msg_count();
  static const int kMsgCountFieldNumber = 1;
  ::google::protobuf::uint32 msg_count() const;
  void set_msg_count(::google::protobuf::uint32 value);

  // optional uint32 group_id = 2;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // optional uint64 msg_id = 3;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat_msg.offline_msg_group_req)
 private:
  void set_has_msg_count();
  void clear_has_msg_count();
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_msg_tag();
  void clear_has_msg_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_tag_;
  ::google::protobuf::uint32 msg_count_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint64 msg_id_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_msg_group_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.offline_msg_group_ack) */ {
 public:
  offline_msg_group_ack();
  virtual ~offline_msg_group_ack();

  offline_msg_group_ack(const offline_msg_group_ack& from);

  inline offline_msg_group_ack& operator=(const offline_msg_group_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_msg_group_ack(offline_msg_group_ack&& from) noexcept
    : offline_msg_group_ack() {
    *this = ::std::move(from);
  }

  inline offline_msg_group_ack& operator=(offline_msg_group_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_msg_group_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_msg_group_ack* internal_default_instance() {
    return reinterpret_cast<const offline_msg_group_ack*>(
               &_offline_msg_group_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(offline_msg_group_ack* other);
  friend void swap(offline_msg_group_ack& a, offline_msg_group_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_msg_group_ack* New() const final {
    return CreateMaybeMessage<offline_msg_group_ack>(NULL);
  }

  offline_msg_group_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_msg_group_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_msg_group_ack& from);
  void MergeFrom(const offline_msg_group_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_msg_group_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // optional uint64 msg_id = 3;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // optional uint32 group_id = 2;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.offline_msg_group_ack)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_msg_id();
  void clear_has_msg_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint64 msg_id_;
  ::google::protobuf::uint32 group_id_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_msg_group_rsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.offline_msg_group_rsp) */ {
 public:
  offline_msg_group_rsp();
  virtual ~offline_msg_group_rsp();

  offline_msg_group_rsp(const offline_msg_group_rsp& from);

  inline offline_msg_group_rsp& operator=(const offline_msg_group_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_msg_group_rsp(offline_msg_group_rsp&& from) noexcept
    : offline_msg_group_rsp() {
    *this = ::std::move(from);
  }

  inline offline_msg_group_rsp& operator=(offline_msg_group_rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_msg_group_rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_msg_group_rsp* internal_default_instance() {
    return reinterpret_cast<const offline_msg_group_rsp*>(
               &_offline_msg_group_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(offline_msg_group_rsp* other);
  friend void swap(offline_msg_group_rsp& a, offline_msg_group_rsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_msg_group_rsp* New() const final {
    return CreateMaybeMessage<offline_msg_group_rsp>(NULL);
  }

  offline_msg_group_rsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_msg_group_rsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_msg_group_rsp& from);
  void MergeFrom(const offline_msg_group_rsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_msg_group_rsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat_msg.msg_group_recv msg_list = 1;
  int msg_list_size() const;
  void clear_msg_list();
  static const int kMsgListFieldNumber = 1;
  ::chat_msg::msg_group_recv* mutable_msg_list(int index);
  ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_group_recv >*
      mutable_msg_list();
  const ::chat_msg::msg_group_recv& msg_list(int index) const;
  ::chat_msg::msg_group_recv* add_msg_list();
  const ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_group_recv >&
      msg_list() const;

  // optional string msg_tag = 4;
  bool has_msg_tag() const;
  void clear_msg_tag();
  static const int kMsgTagFieldNumber = 4;
  const ::std::string& msg_tag() const;
  void set_msg_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_tag(::std::string&& value);
  #endif
  void set_msg_tag(const char* value);
  void set_msg_tag(const char* value, size_t size);
  ::std::string* mutable_msg_tag();
  ::std::string* release_msg_tag();
  void set_allocated_msg_tag(::std::string* msg_tag);

  // optional uint32 group_id = 2;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // optional uint32 total = 3;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 3;
  ::google::protobuf::uint32 total() const;
  void set_total(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.offline_msg_group_rsp)
 private:
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_total();
  void clear_has_total();
  void set_has_msg_tag();
  void clear_has_msg_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_group_recv > msg_list_;
  ::google::protobuf::internal::ArenaStringPtr msg_tag_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 total_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offline_msg_group_rsp_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.offline_msg_group_rsp_ack) */ {
 public:
  offline_msg_group_rsp_ack();
  virtual ~offline_msg_group_rsp_ack();

  offline_msg_group_rsp_ack(const offline_msg_group_rsp_ack& from);

  inline offline_msg_group_rsp_ack& operator=(const offline_msg_group_rsp_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offline_msg_group_rsp_ack(offline_msg_group_rsp_ack&& from) noexcept
    : offline_msg_group_rsp_ack() {
    *this = ::std::move(from);
  }

  inline offline_msg_group_rsp_ack& operator=(offline_msg_group_rsp_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offline_msg_group_rsp_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offline_msg_group_rsp_ack* internal_default_instance() {
    return reinterpret_cast<const offline_msg_group_rsp_ack*>(
               &_offline_msg_group_rsp_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(offline_msg_group_rsp_ack* other);
  friend void swap(offline_msg_group_rsp_ack& a, offline_msg_group_rsp_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offline_msg_group_rsp_ack* New() const final {
    return CreateMaybeMessage<offline_msg_group_rsp_ack>(NULL);
  }

  offline_msg_group_rsp_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offline_msg_group_rsp_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offline_msg_group_rsp_ack& from);
  void MergeFrom(const offline_msg_group_rsp_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offline_msg_group_rsp_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 msg_id = 2;
  int msg_id_size() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint64 msg_id(int index) const;
  void set_msg_id(int index, ::google::protobuf::uint64 value);
  void add_msg_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      msg_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_msg_id();

  // required .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // optional uint32 group_id = 3;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.offline_msg_group_rsp_ack)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_group_id();
  void clear_has_group_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > msg_id_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint32 group_id_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class service_control : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.service_control) */ {
 public:
  service_control();
  virtual ~service_control();

  service_control(const service_control& from);

  inline service_control& operator=(const service_control& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  service_control(service_control&& from) noexcept
    : service_control() {
    *this = ::std::move(from);
  }

  inline service_control& operator=(service_control&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const service_control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const service_control* internal_default_instance() {
    return reinterpret_cast<const service_control*>(
               &_service_control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(service_control* other);
  friend void swap(service_control& a, service_control& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline service_control* New() const final {
    return CreateMaybeMessage<service_control>(NULL);
  }

  service_control* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<service_control>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const service_control& from);
  void MergeFrom(const service_control& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(service_control* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .common.errorinfo error = 5;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 5;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // optional uint32 send_id = 1;
  bool has_send_id() const;
  void clear_send_id();
  static const int kSendIdFieldNumber = 1;
  ::google::protobuf::uint32 send_id() const;
  void set_send_id(::google::protobuf::uint32 value);

  // optional uint32 recv_id = 2;
  bool has_recv_id() const;
  void clear_recv_id();
  static const int kRecvIdFieldNumber = 2;
  ::google::protobuf::uint32 recv_id() const;
  void set_recv_id(::google::protobuf::uint32 value);

  // optional uint32 c_id = 4;
  bool has_c_id() const;
  void clear_c_id();
  static const int kCIdFieldNumber = 4;
  ::google::protobuf::uint32 c_id() const;
  void set_c_id(::google::protobuf::uint32 value);

  // optional uint32 transfer_object = 6;
  bool has_transfer_object() const;
  void clear_transfer_object();
  static const int kTransferObjectFieldNumber = 6;
  ::google::protobuf::uint32 transfer_object() const;
  void set_transfer_object(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.service_control)
 private:
  void set_has_send_id();
  void clear_has_send_id();
  void set_has_recv_id();
  void clear_has_recv_id();
  void set_has_msg();
  void clear_has_msg();
  void set_has_c_id();
  void clear_has_c_id();
  void set_has_error();
  void clear_has_error();
  void set_has_transfer_object();
  void clear_has_transfer_object();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint32 send_id_;
  ::google::protobuf::uint32 recv_id_;
  ::google::protobuf::uint32 c_id_;
  ::google::protobuf::uint32 transfer_object_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class service_control_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.service_control_ack) */ {
 public:
  service_control_ack();
  virtual ~service_control_ack();

  service_control_ack(const service_control_ack& from);

  inline service_control_ack& operator=(const service_control_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  service_control_ack(service_control_ack&& from) noexcept
    : service_control_ack() {
    *this = ::std::move(from);
  }

  inline service_control_ack& operator=(service_control_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const service_control_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const service_control_ack* internal_default_instance() {
    return reinterpret_cast<const service_control_ack*>(
               &_service_control_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(service_control_ack* other);
  friend void swap(service_control_ack& a, service_control_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline service_control_ack* New() const final {
    return CreateMaybeMessage<service_control_ack>(NULL);
  }

  service_control_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<service_control_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const service_control_ack& from);
  void MergeFrom(const service_control_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(service_control_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // optional uint64 msg_serial = 2;
  bool has_msg_serial() const;
  void clear_msg_serial();
  static const int kMsgSerialFieldNumber = 2;
  ::google::protobuf::uint64 msg_serial() const;
  void set_msg_serial(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat_msg.service_control_ack)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_msg_serial();
  void clear_has_msg_serial();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint64 msg_serial_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class personal_notify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.personal_notify) */ {
 public:
  personal_notify();
  virtual ~personal_notify();

  personal_notify(const personal_notify& from);

  inline personal_notify& operator=(const personal_notify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  personal_notify(personal_notify&& from) noexcept
    : personal_notify() {
    *this = ::std::move(from);
  }

  inline personal_notify& operator=(personal_notify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const personal_notify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const personal_notify* internal_default_instance() {
    return reinterpret_cast<const personal_notify*>(
               &_personal_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(personal_notify* other);
  friend void swap(personal_notify& a, personal_notify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline personal_notify* New() const final {
    return CreateMaybeMessage<personal_notify>(NULL);
  }

  personal_notify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<personal_notify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const personal_notify& from);
  void MergeFrom(const personal_notify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(personal_notify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 imid = 1;
  bool has_imid() const;
  void clear_imid();
  static const int kImidFieldNumber = 1;
  ::google::protobuf::uint32 imid() const;
  void set_imid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.personal_notify)
 private:
  void set_has_imid();
  void clear_has_imid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 imid_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class group_notify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat_msg.group_notify) */ {
 public:
  group_notify();
  virtual ~group_notify();

  group_notify(const group_notify& from);

  inline group_notify& operator=(const group_notify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  group_notify(group_notify&& from) noexcept
    : group_notify() {
    *this = ::std::move(from);
  }

  inline group_notify& operator=(group_notify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const group_notify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const group_notify* internal_default_instance() {
    return reinterpret_cast<const group_notify*>(
               &_group_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(group_notify* other);
  friend void swap(group_notify& a, group_notify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline group_notify* New() const final {
    return CreateMaybeMessage<group_notify>(NULL);
  }

  group_notify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<group_notify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const group_notify& from);
  void MergeFrom(const group_notify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(group_notify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 imid = 1;
  bool has_imid() const;
  void clear_imid();
  static const int kImidFieldNumber = 1;
  ::google::protobuf::uint32 imid() const;
  void set_imid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat_msg.group_notify)
 private:
  void set_has_imid();
  void clear_has_imid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 imid_;
  friend struct ::protobuf_chat_5fmsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// msg_p2p_send

// required uint32 recv_id = 1;
inline bool msg_p2p_send::has_recv_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_p2p_send::set_has_recv_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_p2p_send::clear_has_recv_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_p2p_send::clear_recv_id() {
  recv_id_ = 0u;
  clear_has_recv_id();
}
inline ::google::protobuf::uint32 msg_p2p_send::recv_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_send.recv_id)
  return recv_id_;
}
inline void msg_p2p_send::set_recv_id(::google::protobuf::uint32 value) {
  set_has_recv_id();
  recv_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_send.recv_id)
}

// required uint32 msg_type = 2;
inline bool msg_p2p_send::has_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_p2p_send::set_has_msg_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_p2p_send::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_p2p_send::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
inline ::google::protobuf::uint32 msg_p2p_send::msg_type() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_send.msg_type)
  return msg_type_;
}
inline void msg_p2p_send::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_send.msg_type)
}

// required .common.msg_content msg = 3;
inline bool msg_p2p_send::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_p2p_send::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_p2p_send::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::msg_content& msg_p2p_send::_internal_msg() const {
  return *msg_;
}
inline const ::common::msg_content& msg_p2p_send::msg() const {
  const ::common::msg_content* p = msg_;
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_send.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg_content*>(
      &::common::_msg_content_default_instance_);
}
inline ::common::msg_content* msg_p2p_send::release_msg() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_p2p_send.msg)
  clear_has_msg();
  ::common::msg_content* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline ::common::msg_content* msg_p2p_send::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    auto* p = CreateMaybeMessage<::common::msg_content>(GetArenaNoVirtual());
    msg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_p2p_send.msg)
  return msg_;
}
inline void msg_p2p_send::set_allocated_msg(::common::msg_content* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msg_);
  }
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_p2p_send.msg)
}

// optional uint32 receiver_type = 4;
inline bool msg_p2p_send::has_receiver_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_p2p_send::set_has_receiver_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_p2p_send::clear_has_receiver_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_p2p_send::clear_receiver_type() {
  receiver_type_ = 0u;
  clear_has_receiver_type();
}
inline ::google::protobuf::uint32 msg_p2p_send::receiver_type() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_send.receiver_type)
  return receiver_type_;
}
inline void msg_p2p_send::set_receiver_type(::google::protobuf::uint32 value) {
  set_has_receiver_type();
  receiver_type_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_send.receiver_type)
}

// -------------------------------------------------------------------

// msg_p2p_ack

// required .common.errorinfo error = 1;
inline bool msg_p2p_ack::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_p2p_ack::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_p2p_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::errorinfo& msg_p2p_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& msg_p2p_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* msg_p2p_ack::release_error() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_p2p_ack.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* msg_p2p_ack::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_p2p_ack.error)
  return error_;
}
inline void msg_p2p_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_p2p_ack.error)
}

// optional uint64 msg_id = 2;
inline bool msg_p2p_ack::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_p2p_ack::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_p2p_ack::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_p2p_ack::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 msg_p2p_ack::msg_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_ack.msg_id)
  return msg_id_;
}
inline void msg_p2p_ack::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_ack.msg_id)
}

// optional uint64 send_time = 3;
inline bool msg_p2p_ack::has_send_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_p2p_ack::set_has_send_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_p2p_ack::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_p2p_ack::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::uint64 msg_p2p_ack::send_time() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_ack.send_time)
  return send_time_;
}
inline void msg_p2p_ack::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_ack.send_time)
}

// optional .common.msg_content msg = 4;
inline bool msg_p2p_ack::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_p2p_ack::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_p2p_ack::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::common::msg_content& msg_p2p_ack::_internal_msg() const {
  return *msg_;
}
inline const ::common::msg_content& msg_p2p_ack::msg() const {
  const ::common::msg_content* p = msg_;
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_ack.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg_content*>(
      &::common::_msg_content_default_instance_);
}
inline ::common::msg_content* msg_p2p_ack::release_msg() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_p2p_ack.msg)
  clear_has_msg();
  ::common::msg_content* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline ::common::msg_content* msg_p2p_ack::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    auto* p = CreateMaybeMessage<::common::msg_content>(GetArenaNoVirtual());
    msg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_p2p_ack.msg)
  return msg_;
}
inline void msg_p2p_ack::set_allocated_msg(::common::msg_content* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msg_);
  }
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_p2p_ack.msg)
}

// -------------------------------------------------------------------

// msg_p2p_recv

// required uint32 send_id = 1;
inline bool msg_p2p_recv::has_send_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_p2p_recv::set_has_send_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_p2p_recv::clear_has_send_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_p2p_recv::clear_send_id() {
  send_id_ = 0u;
  clear_has_send_id();
}
inline ::google::protobuf::uint32 msg_p2p_recv::send_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.send_id)
  return send_id_;
}
inline void msg_p2p_recv::set_send_id(::google::protobuf::uint32 value) {
  set_has_send_id();
  send_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_recv.send_id)
}

// required uint32 user_type = 2;
inline bool msg_p2p_recv::has_user_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_p2p_recv::set_has_user_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_p2p_recv::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_p2p_recv::clear_user_type() {
  user_type_ = 0u;
  clear_has_user_type();
}
inline ::google::protobuf::uint32 msg_p2p_recv::user_type() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.user_type)
  return user_type_;
}
inline void msg_p2p_recv::set_user_type(::google::protobuf::uint32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_recv.user_type)
}

// required uint64 msg_id = 3;
inline bool msg_p2p_recv::has_msg_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_p2p_recv::set_has_msg_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_p2p_recv::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_p2p_recv::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 msg_p2p_recv::msg_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.msg_id)
  return msg_id_;
}
inline void msg_p2p_recv::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_recv.msg_id)
}

// required uint64 send_time = 4;
inline bool msg_p2p_recv::has_send_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_p2p_recv::set_has_send_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_p2p_recv::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_p2p_recv::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::uint64 msg_p2p_recv::send_time() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.send_time)
  return send_time_;
}
inline void msg_p2p_recv::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_recv.send_time)
}

// optional bytes send_nickname = 5;
inline bool msg_p2p_recv::has_send_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_p2p_recv::set_has_send_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_p2p_recv::clear_has_send_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg_p2p_recv::clear_send_nickname() {
  send_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_send_nickname();
}
inline const ::std::string& msg_p2p_recv::send_nickname() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.send_nickname)
  return send_nickname_.GetNoArena();
}
inline void msg_p2p_recv::set_send_nickname(const ::std::string& value) {
  set_has_send_nickname();
  send_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_recv.send_nickname)
}
#if LANG_CXX11
inline void msg_p2p_recv::set_send_nickname(::std::string&& value) {
  set_has_send_nickname();
  send_nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_msg.msg_p2p_recv.send_nickname)
}
#endif
inline void msg_p2p_recv::set_send_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_send_nickname();
  send_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_msg.msg_p2p_recv.send_nickname)
}
inline void msg_p2p_recv::set_send_nickname(const void* value, size_t size) {
  set_has_send_nickname();
  send_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_msg.msg_p2p_recv.send_nickname)
}
inline ::std::string* msg_p2p_recv::mutable_send_nickname() {
  set_has_send_nickname();
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_p2p_recv.send_nickname)
  return send_nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* msg_p2p_recv::release_send_nickname() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_p2p_recv.send_nickname)
  if (!has_send_nickname()) {
    return NULL;
  }
  clear_has_send_nickname();
  return send_nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void msg_p2p_recv::set_allocated_send_nickname(::std::string* send_nickname) {
  if (send_nickname != NULL) {
    set_has_send_nickname();
  } else {
    clear_has_send_nickname();
  }
  send_nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_nickname);
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_p2p_recv.send_nickname)
}

// optional bytes send_avatar = 6;
inline bool msg_p2p_recv::has_send_avatar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_p2p_recv::set_has_send_avatar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_p2p_recv::clear_has_send_avatar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_p2p_recv::clear_send_avatar() {
  send_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_send_avatar();
}
inline const ::std::string& msg_p2p_recv::send_avatar() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.send_avatar)
  return send_avatar_.GetNoArena();
}
inline void msg_p2p_recv::set_send_avatar(const ::std::string& value) {
  set_has_send_avatar();
  send_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_recv.send_avatar)
}
#if LANG_CXX11
inline void msg_p2p_recv::set_send_avatar(::std::string&& value) {
  set_has_send_avatar();
  send_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_msg.msg_p2p_recv.send_avatar)
}
#endif
inline void msg_p2p_recv::set_send_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_send_avatar();
  send_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_msg.msg_p2p_recv.send_avatar)
}
inline void msg_p2p_recv::set_send_avatar(const void* value, size_t size) {
  set_has_send_avatar();
  send_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_msg.msg_p2p_recv.send_avatar)
}
inline ::std::string* msg_p2p_recv::mutable_send_avatar() {
  set_has_send_avatar();
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_p2p_recv.send_avatar)
  return send_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* msg_p2p_recv::release_send_avatar() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_p2p_recv.send_avatar)
  if (!has_send_avatar()) {
    return NULL;
  }
  clear_has_send_avatar();
  return send_avatar_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void msg_p2p_recv::set_allocated_send_avatar(::std::string* send_avatar) {
  if (send_avatar != NULL) {
    set_has_send_avatar();
  } else {
    clear_has_send_avatar();
  }
  send_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_avatar);
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_p2p_recv.send_avatar)
}

// required uint32 msg_type = 7;
inline bool msg_p2p_recv::has_msg_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void msg_p2p_recv::set_has_msg_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void msg_p2p_recv::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void msg_p2p_recv::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
inline ::google::protobuf::uint32 msg_p2p_recv::msg_type() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.msg_type)
  return msg_type_;
}
inline void msg_p2p_recv::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_recv.msg_type)
}

// required .common.msg_content msg = 8;
inline bool msg_p2p_recv::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_p2p_recv::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_p2p_recv::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::common::msg_content& msg_p2p_recv::_internal_msg() const {
  return *msg_;
}
inline const ::common::msg_content& msg_p2p_recv::msg() const {
  const ::common::msg_content* p = msg_;
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg_content*>(
      &::common::_msg_content_default_instance_);
}
inline ::common::msg_content* msg_p2p_recv::release_msg() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_p2p_recv.msg)
  clear_has_msg();
  ::common::msg_content* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline ::common::msg_content* msg_p2p_recv::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    auto* p = CreateMaybeMessage<::common::msg_content>(GetArenaNoVirtual());
    msg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_p2p_recv.msg)
  return msg_;
}
inline void msg_p2p_recv::set_allocated_msg(::common::msg_content* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msg_);
  }
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_p2p_recv.msg)
}

// optional uint32 receiver_type = 9;
inline bool msg_p2p_recv::has_receiver_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void msg_p2p_recv::set_has_receiver_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void msg_p2p_recv::clear_has_receiver_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void msg_p2p_recv::clear_receiver_type() {
  receiver_type_ = 0u;
  clear_has_receiver_type();
}
inline ::google::protobuf::uint32 msg_p2p_recv::receiver_type() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.receiver_type)
  return receiver_type_;
}
inline void msg_p2p_recv::set_receiver_type(::google::protobuf::uint32 value) {
  set_has_receiver_type();
  receiver_type_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_recv.receiver_type)
}

// optional uint32 receiver_id = 10;
inline bool msg_p2p_recv::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void msg_p2p_recv::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void msg_p2p_recv::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void msg_p2p_recv::clear_receiver_id() {
  receiver_id_ = 0u;
  clear_has_receiver_id();
}
inline ::google::protobuf::uint32 msg_p2p_recv::receiver_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_p2p_recv.receiver_id)
  return receiver_id_;
}
inline void msg_p2p_recv::set_receiver_id(::google::protobuf::uint32 value) {
  set_has_receiver_id();
  receiver_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_p2p_recv.receiver_id)
}

// -------------------------------------------------------------------

// msg_group_send

// required uint32 group_id = 1;
inline bool msg_group_send::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_group_send::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_group_send::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_group_send::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 msg_group_send::group_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_send.group_id)
  return group_id_;
}
inline void msg_group_send::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_send.group_id)
}

// required uint32 msg_type = 2;
inline bool msg_group_send::has_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_group_send::set_has_msg_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_group_send::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_group_send::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
inline ::google::protobuf::uint32 msg_group_send::msg_type() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_send.msg_type)
  return msg_type_;
}
inline void msg_group_send::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_send.msg_type)
}

// required .common.msg_content msg = 3;
inline bool msg_group_send::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_group_send::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_group_send::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::msg_content& msg_group_send::_internal_msg() const {
  return *msg_;
}
inline const ::common::msg_content& msg_group_send::msg() const {
  const ::common::msg_content* p = msg_;
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_send.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg_content*>(
      &::common::_msg_content_default_instance_);
}
inline ::common::msg_content* msg_group_send::release_msg() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_group_send.msg)
  clear_has_msg();
  ::common::msg_content* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline ::common::msg_content* msg_group_send::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    auto* p = CreateMaybeMessage<::common::msg_content>(GetArenaNoVirtual());
    msg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_group_send.msg)
  return msg_;
}
inline void msg_group_send::set_allocated_msg(::common::msg_content* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msg_);
  }
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_group_send.msg)
}

// -------------------------------------------------------------------

// msg_group_send_ack

// required .common.errorinfo error = 1;
inline bool msg_group_send_ack::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_group_send_ack::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_group_send_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::errorinfo& msg_group_send_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& msg_group_send_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_send_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* msg_group_send_ack::release_error() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_group_send_ack.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* msg_group_send_ack::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_group_send_ack.error)
  return error_;
}
inline void msg_group_send_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_group_send_ack.error)
}

// optional uint64 msg_id = 2;
inline bool msg_group_send_ack::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_group_send_ack::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_group_send_ack::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_group_send_ack::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 msg_group_send_ack::msg_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_send_ack.msg_id)
  return msg_id_;
}
inline void msg_group_send_ack::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_send_ack.msg_id)
}

// optional uint64 send_time = 3;
inline bool msg_group_send_ack::has_send_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_group_send_ack::set_has_send_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_group_send_ack::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_group_send_ack::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::uint64 msg_group_send_ack::send_time() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_send_ack.send_time)
  return send_time_;
}
inline void msg_group_send_ack::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_send_ack.send_time)
}

// optional .common.msg_content msg = 4;
inline bool msg_group_send_ack::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_group_send_ack::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_group_send_ack::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::common::msg_content& msg_group_send_ack::_internal_msg() const {
  return *msg_;
}
inline const ::common::msg_content& msg_group_send_ack::msg() const {
  const ::common::msg_content* p = msg_;
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_send_ack.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg_content*>(
      &::common::_msg_content_default_instance_);
}
inline ::common::msg_content* msg_group_send_ack::release_msg() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_group_send_ack.msg)
  clear_has_msg();
  ::common::msg_content* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline ::common::msg_content* msg_group_send_ack::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    auto* p = CreateMaybeMessage<::common::msg_content>(GetArenaNoVirtual());
    msg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_group_send_ack.msg)
  return msg_;
}
inline void msg_group_send_ack::set_allocated_msg(::common::msg_content* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msg_);
  }
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_group_send_ack.msg)
}

// -------------------------------------------------------------------

// msg_group_recv

// required uint32 group_id = 1;
inline bool msg_group_recv::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_group_recv::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_group_recv::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_group_recv::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 msg_group_recv::group_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv.group_id)
  return group_id_;
}
inline void msg_group_recv::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_recv.group_id)
}

// required uint32 group_type = 2;
inline bool msg_group_recv::has_group_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_group_recv::set_has_group_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_group_recv::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_group_recv::clear_group_type() {
  group_type_ = 0u;
  clear_has_group_type();
}
inline ::google::protobuf::uint32 msg_group_recv::group_type() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv.group_type)
  return group_type_;
}
inline void msg_group_recv::set_group_type(::google::protobuf::uint32 value) {
  set_has_group_type();
  group_type_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_recv.group_type)
}

// required uint32 send_id = 3;
inline bool msg_group_recv::has_send_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msg_group_recv::set_has_send_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msg_group_recv::clear_has_send_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msg_group_recv::clear_send_id() {
  send_id_ = 0u;
  clear_has_send_id();
}
inline ::google::protobuf::uint32 msg_group_recv::send_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv.send_id)
  return send_id_;
}
inline void msg_group_recv::set_send_id(::google::protobuf::uint32 value) {
  set_has_send_id();
  send_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_recv.send_id)
}

// required uint64 msg_id = 4;
inline bool msg_group_recv::has_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg_group_recv::set_has_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg_group_recv::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg_group_recv::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 msg_group_recv::msg_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv.msg_id)
  return msg_id_;
}
inline void msg_group_recv::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_recv.msg_id)
}

// required uint64 send_time = 5;
inline bool msg_group_recv::has_send_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void msg_group_recv::set_has_send_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void msg_group_recv::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void msg_group_recv::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::uint64 msg_group_recv::send_time() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv.send_time)
  return send_time_;
}
inline void msg_group_recv::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_recv.send_time)
}

// required uint32 msg_type = 6;
inline bool msg_group_recv::has_msg_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void msg_group_recv::set_has_msg_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void msg_group_recv::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void msg_group_recv::clear_msg_type() {
  msg_type_ = 0u;
  clear_has_msg_type();
}
inline ::google::protobuf::uint32 msg_group_recv::msg_type() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv.msg_type)
  return msg_type_;
}
inline void msg_group_recv::set_msg_type(::google::protobuf::uint32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_recv.msg_type)
}

// required .common.msg_content msg = 7;
inline bool msg_group_recv::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_group_recv::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_group_recv::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::msg_content& msg_group_recv::_internal_msg() const {
  return *msg_;
}
inline const ::common::msg_content& msg_group_recv::msg() const {
  const ::common::msg_content* p = msg_;
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv.msg)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg_content*>(
      &::common::_msg_content_default_instance_);
}
inline ::common::msg_content* msg_group_recv::release_msg() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_group_recv.msg)
  clear_has_msg();
  ::common::msg_content* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline ::common::msg_content* msg_group_recv::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    auto* p = CreateMaybeMessage<::common::msg_content>(GetArenaNoVirtual());
    msg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_group_recv.msg)
  return msg_;
}
inline void msg_group_recv::set_allocated_msg(::common::msg_content* msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(msg_);
  }
  if (msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_group_recv.msg)
}

// -------------------------------------------------------------------

// msg_group_recv_ack

// required .common.errorinfo error = 1;
inline bool msg_group_recv_ack::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg_group_recv_ack::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg_group_recv_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::errorinfo& msg_group_recv_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& msg_group_recv_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* msg_group_recv_ack::release_error() {
  // @@protoc_insertion_point(field_release:chat_msg.msg_group_recv_ack.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* msg_group_recv_ack::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.msg_group_recv_ack.error)
  return error_;
}
inline void msg_group_recv_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.msg_group_recv_ack.error)
}

// optional uint64 msg_id = 2;
inline bool msg_group_recv_ack::has_msg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg_group_recv_ack::set_has_msg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg_group_recv_ack::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg_group_recv_ack::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 msg_group_recv_ack::msg_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv_ack.msg_id)
  return msg_id_;
}
inline void msg_group_recv_ack::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_recv_ack.msg_id)
}

// optional uint32 group_id = 3;
inline bool msg_group_recv_ack::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg_group_recv_ack::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg_group_recv_ack::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg_group_recv_ack::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 msg_group_recv_ack::group_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.msg_group_recv_ack.group_id)
  return group_id_;
}
inline void msg_group_recv_ack::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.msg_group_recv_ack.group_id)
}

// -------------------------------------------------------------------

// offline_msg_p2p_req

// optional uint32 msg_count = 1;
inline bool offline_msg_p2p_req::has_msg_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_msg_p2p_req::set_has_msg_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_msg_p2p_req::clear_has_msg_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_msg_p2p_req::clear_msg_count() {
  msg_count_ = 0u;
  clear_has_msg_count();
}
inline ::google::protobuf::uint32 offline_msg_p2p_req::msg_count() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_req.msg_count)
  return msg_count_;
}
inline void offline_msg_p2p_req::set_msg_count(::google::protobuf::uint32 value) {
  set_has_msg_count();
  msg_count_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_p2p_req.msg_count)
}

// optional uint32 send_id = 2;
inline bool offline_msg_p2p_req::has_send_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offline_msg_p2p_req::set_has_send_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offline_msg_p2p_req::clear_has_send_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offline_msg_p2p_req::clear_send_id() {
  send_id_ = 0u;
  clear_has_send_id();
}
inline ::google::protobuf::uint32 offline_msg_p2p_req::send_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_req.send_id)
  return send_id_;
}
inline void offline_msg_p2p_req::set_send_id(::google::protobuf::uint32 value) {
  set_has_send_id();
  send_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_p2p_req.send_id)
}

// optional uint64 msg_id = 3;
inline bool offline_msg_p2p_req::has_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offline_msg_p2p_req::set_has_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offline_msg_p2p_req::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offline_msg_p2p_req::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 offline_msg_p2p_req::msg_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_req.msg_id)
  return msg_id_;
}
inline void offline_msg_p2p_req::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_p2p_req.msg_id)
}

// optional string msg_tag = 4;
inline bool offline_msg_p2p_req::has_msg_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_msg_p2p_req::set_has_msg_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_msg_p2p_req::clear_has_msg_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline_msg_p2p_req::clear_msg_tag() {
  msg_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_tag();
}
inline const ::std::string& offline_msg_p2p_req::msg_tag() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_req.msg_tag)
  return msg_tag_.GetNoArena();
}
inline void offline_msg_p2p_req::set_msg_tag(const ::std::string& value) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_p2p_req.msg_tag)
}
#if LANG_CXX11
inline void offline_msg_p2p_req::set_msg_tag(::std::string&& value) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_msg.offline_msg_p2p_req.msg_tag)
}
#endif
inline void offline_msg_p2p_req::set_msg_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_msg.offline_msg_p2p_req.msg_tag)
}
inline void offline_msg_p2p_req::set_msg_tag(const char* value, size_t size) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_msg.offline_msg_p2p_req.msg_tag)
}
inline ::std::string* offline_msg_p2p_req::mutable_msg_tag() {
  set_has_msg_tag();
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_p2p_req.msg_tag)
  return msg_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* offline_msg_p2p_req::release_msg_tag() {
  // @@protoc_insertion_point(field_release:chat_msg.offline_msg_p2p_req.msg_tag)
  if (!has_msg_tag()) {
    return NULL;
  }
  clear_has_msg_tag();
  return msg_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void offline_msg_p2p_req::set_allocated_msg_tag(::std::string* msg_tag) {
  if (msg_tag != NULL) {
    set_has_msg_tag();
  } else {
    clear_has_msg_tag();
  }
  msg_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_tag);
  // @@protoc_insertion_point(field_set_allocated:chat_msg.offline_msg_p2p_req.msg_tag)
}

// -------------------------------------------------------------------

// offline_msg_p2p_req_ack

// required .common.errorinfo error = 1;
inline bool offline_msg_p2p_req_ack::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_msg_p2p_req_ack::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_msg_p2p_req_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::errorinfo& offline_msg_p2p_req_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& offline_msg_p2p_req_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_req_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* offline_msg_p2p_req_ack::release_error() {
  // @@protoc_insertion_point(field_release:chat_msg.offline_msg_p2p_req_ack.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* offline_msg_p2p_req_ack::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_p2p_req_ack.error)
  return error_;
}
inline void offline_msg_p2p_req_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.offline_msg_p2p_req_ack.error)
}

// optional uint32 send_id = 2;
inline bool offline_msg_p2p_req_ack::has_send_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offline_msg_p2p_req_ack::set_has_send_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offline_msg_p2p_req_ack::clear_has_send_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offline_msg_p2p_req_ack::clear_send_id() {
  send_id_ = 0u;
  clear_has_send_id();
}
inline ::google::protobuf::uint32 offline_msg_p2p_req_ack::send_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_req_ack.send_id)
  return send_id_;
}
inline void offline_msg_p2p_req_ack::set_send_id(::google::protobuf::uint32 value) {
  set_has_send_id();
  send_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_p2p_req_ack.send_id)
}

// optional uint64 msg_id = 3;
inline bool offline_msg_p2p_req_ack::has_msg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_msg_p2p_req_ack::set_has_msg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_msg_p2p_req_ack::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_msg_p2p_req_ack::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 offline_msg_p2p_req_ack::msg_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_req_ack.msg_id)
  return msg_id_;
}
inline void offline_msg_p2p_req_ack::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_p2p_req_ack.msg_id)
}

// -------------------------------------------------------------------

// offline_msg_p2p_rsp

// repeated .chat_msg.msg_p2p_recv msg_list = 1;
inline int offline_msg_p2p_rsp::msg_list_size() const {
  return msg_list_.size();
}
inline void offline_msg_p2p_rsp::clear_msg_list() {
  msg_list_.Clear();
}
inline ::chat_msg::msg_p2p_recv* offline_msg_p2p_rsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_p2p_rsp.msg_list)
  return msg_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_p2p_recv >*
offline_msg_p2p_rsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:chat_msg.offline_msg_p2p_rsp.msg_list)
  return &msg_list_;
}
inline const ::chat_msg::msg_p2p_recv& offline_msg_p2p_rsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_rsp.msg_list)
  return msg_list_.Get(index);
}
inline ::chat_msg::msg_p2p_recv* offline_msg_p2p_rsp::add_msg_list() {
  // @@protoc_insertion_point(field_add:chat_msg.offline_msg_p2p_rsp.msg_list)
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_p2p_recv >&
offline_msg_p2p_rsp::msg_list() const {
  // @@protoc_insertion_point(field_list:chat_msg.offline_msg_p2p_rsp.msg_list)
  return msg_list_;
}

// optional uint32 total = 2;
inline bool offline_msg_p2p_rsp::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_msg_p2p_rsp::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_msg_p2p_rsp::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_msg_p2p_rsp::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 offline_msg_p2p_rsp::total() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_rsp.total)
  return total_;
}
inline void offline_msg_p2p_rsp::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_p2p_rsp.total)
}

// optional string msg_tag = 3;
inline bool offline_msg_p2p_rsp::has_msg_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_msg_p2p_rsp::set_has_msg_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_msg_p2p_rsp::clear_has_msg_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline_msg_p2p_rsp::clear_msg_tag() {
  msg_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_tag();
}
inline const ::std::string& offline_msg_p2p_rsp::msg_tag() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_rsp.msg_tag)
  return msg_tag_.GetNoArena();
}
inline void offline_msg_p2p_rsp::set_msg_tag(const ::std::string& value) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_p2p_rsp.msg_tag)
}
#if LANG_CXX11
inline void offline_msg_p2p_rsp::set_msg_tag(::std::string&& value) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_msg.offline_msg_p2p_rsp.msg_tag)
}
#endif
inline void offline_msg_p2p_rsp::set_msg_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_msg.offline_msg_p2p_rsp.msg_tag)
}
inline void offline_msg_p2p_rsp::set_msg_tag(const char* value, size_t size) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_msg.offline_msg_p2p_rsp.msg_tag)
}
inline ::std::string* offline_msg_p2p_rsp::mutable_msg_tag() {
  set_has_msg_tag();
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_p2p_rsp.msg_tag)
  return msg_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* offline_msg_p2p_rsp::release_msg_tag() {
  // @@protoc_insertion_point(field_release:chat_msg.offline_msg_p2p_rsp.msg_tag)
  if (!has_msg_tag()) {
    return NULL;
  }
  clear_has_msg_tag();
  return msg_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void offline_msg_p2p_rsp::set_allocated_msg_tag(::std::string* msg_tag) {
  if (msg_tag != NULL) {
    set_has_msg_tag();
  } else {
    clear_has_msg_tag();
  }
  msg_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_tag);
  // @@protoc_insertion_point(field_set_allocated:chat_msg.offline_msg_p2p_rsp.msg_tag)
}

// -------------------------------------------------------------------

// offline_msg_p2p_rsp_ack

// required .common.errorinfo error = 1;
inline bool offline_msg_p2p_rsp_ack::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_msg_p2p_rsp_ack::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_msg_p2p_rsp_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::errorinfo& offline_msg_p2p_rsp_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& offline_msg_p2p_rsp_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_rsp_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* offline_msg_p2p_rsp_ack::release_error() {
  // @@protoc_insertion_point(field_release:chat_msg.offline_msg_p2p_rsp_ack.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* offline_msg_p2p_rsp_ack::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_p2p_rsp_ack.error)
  return error_;
}
inline void offline_msg_p2p_rsp_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.offline_msg_p2p_rsp_ack.error)
}

// repeated uint64 msg_id = 2;
inline int offline_msg_p2p_rsp_ack::msg_id_size() const {
  return msg_id_.size();
}
inline void offline_msg_p2p_rsp_ack::clear_msg_id() {
  msg_id_.Clear();
}
inline ::google::protobuf::uint64 offline_msg_p2p_rsp_ack::msg_id(int index) const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_p2p_rsp_ack.msg_id)
  return msg_id_.Get(index);
}
inline void offline_msg_p2p_rsp_ack::set_msg_id(int index, ::google::protobuf::uint64 value) {
  msg_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_p2p_rsp_ack.msg_id)
}
inline void offline_msg_p2p_rsp_ack::add_msg_id(::google::protobuf::uint64 value) {
  msg_id_.Add(value);
  // @@protoc_insertion_point(field_add:chat_msg.offline_msg_p2p_rsp_ack.msg_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
offline_msg_p2p_rsp_ack::msg_id() const {
  // @@protoc_insertion_point(field_list:chat_msg.offline_msg_p2p_rsp_ack.msg_id)
  return msg_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
offline_msg_p2p_rsp_ack::mutable_msg_id() {
  // @@protoc_insertion_point(field_mutable_list:chat_msg.offline_msg_p2p_rsp_ack.msg_id)
  return &msg_id_;
}

// -------------------------------------------------------------------

// offline_msg_group_req

// required uint32 msg_count = 1;
inline bool offline_msg_group_req::has_msg_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_msg_group_req::set_has_msg_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_msg_group_req::clear_has_msg_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_msg_group_req::clear_msg_count() {
  msg_count_ = 0u;
  clear_has_msg_count();
}
inline ::google::protobuf::uint32 offline_msg_group_req::msg_count() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_req.msg_count)
  return msg_count_;
}
inline void offline_msg_group_req::set_msg_count(::google::protobuf::uint32 value) {
  set_has_msg_count();
  msg_count_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_req.msg_count)
}

// optional uint32 group_id = 2;
inline bool offline_msg_group_req::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offline_msg_group_req::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offline_msg_group_req::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offline_msg_group_req::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 offline_msg_group_req::group_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_req.group_id)
  return group_id_;
}
inline void offline_msg_group_req::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_req.group_id)
}

// optional uint64 msg_id = 3;
inline bool offline_msg_group_req::has_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offline_msg_group_req::set_has_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offline_msg_group_req::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offline_msg_group_req::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 offline_msg_group_req::msg_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_req.msg_id)
  return msg_id_;
}
inline void offline_msg_group_req::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_req.msg_id)
}

// optional string msg_tag = 4;
inline bool offline_msg_group_req::has_msg_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_msg_group_req::set_has_msg_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_msg_group_req::clear_has_msg_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline_msg_group_req::clear_msg_tag() {
  msg_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_tag();
}
inline const ::std::string& offline_msg_group_req::msg_tag() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_req.msg_tag)
  return msg_tag_.GetNoArena();
}
inline void offline_msg_group_req::set_msg_tag(const ::std::string& value) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_req.msg_tag)
}
#if LANG_CXX11
inline void offline_msg_group_req::set_msg_tag(::std::string&& value) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_msg.offline_msg_group_req.msg_tag)
}
#endif
inline void offline_msg_group_req::set_msg_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_msg.offline_msg_group_req.msg_tag)
}
inline void offline_msg_group_req::set_msg_tag(const char* value, size_t size) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_msg.offline_msg_group_req.msg_tag)
}
inline ::std::string* offline_msg_group_req::mutable_msg_tag() {
  set_has_msg_tag();
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_group_req.msg_tag)
  return msg_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* offline_msg_group_req::release_msg_tag() {
  // @@protoc_insertion_point(field_release:chat_msg.offline_msg_group_req.msg_tag)
  if (!has_msg_tag()) {
    return NULL;
  }
  clear_has_msg_tag();
  return msg_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void offline_msg_group_req::set_allocated_msg_tag(::std::string* msg_tag) {
  if (msg_tag != NULL) {
    set_has_msg_tag();
  } else {
    clear_has_msg_tag();
  }
  msg_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_tag);
  // @@protoc_insertion_point(field_set_allocated:chat_msg.offline_msg_group_req.msg_tag)
}

// -------------------------------------------------------------------

// offline_msg_group_ack

// required .common.errorinfo error = 1;
inline bool offline_msg_group_ack::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_msg_group_ack::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_msg_group_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::errorinfo& offline_msg_group_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& offline_msg_group_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* offline_msg_group_ack::release_error() {
  // @@protoc_insertion_point(field_release:chat_msg.offline_msg_group_ack.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* offline_msg_group_ack::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_group_ack.error)
  return error_;
}
inline void offline_msg_group_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.offline_msg_group_ack.error)
}

// optional uint32 group_id = 2;
inline bool offline_msg_group_ack::has_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offline_msg_group_ack::set_has_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offline_msg_group_ack::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offline_msg_group_ack::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 offline_msg_group_ack::group_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_ack.group_id)
  return group_id_;
}
inline void offline_msg_group_ack::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_ack.group_id)
}

// optional uint64 msg_id = 3;
inline bool offline_msg_group_ack::has_msg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_msg_group_ack::set_has_msg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_msg_group_ack::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_msg_group_ack::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::google::protobuf::uint64 offline_msg_group_ack::msg_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_ack.msg_id)
  return msg_id_;
}
inline void offline_msg_group_ack::set_msg_id(::google::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_ack.msg_id)
}

// -------------------------------------------------------------------

// offline_msg_group_rsp

// repeated .chat_msg.msg_group_recv msg_list = 1;
inline int offline_msg_group_rsp::msg_list_size() const {
  return msg_list_.size();
}
inline void offline_msg_group_rsp::clear_msg_list() {
  msg_list_.Clear();
}
inline ::chat_msg::msg_group_recv* offline_msg_group_rsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_group_rsp.msg_list)
  return msg_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_group_recv >*
offline_msg_group_rsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:chat_msg.offline_msg_group_rsp.msg_list)
  return &msg_list_;
}
inline const ::chat_msg::msg_group_recv& offline_msg_group_rsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_rsp.msg_list)
  return msg_list_.Get(index);
}
inline ::chat_msg::msg_group_recv* offline_msg_group_rsp::add_msg_list() {
  // @@protoc_insertion_point(field_add:chat_msg.offline_msg_group_rsp.msg_list)
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chat_msg::msg_group_recv >&
offline_msg_group_rsp::msg_list() const {
  // @@protoc_insertion_point(field_list:chat_msg.offline_msg_group_rsp.msg_list)
  return msg_list_;
}

// optional uint32 group_id = 2;
inline bool offline_msg_group_rsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_msg_group_rsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_msg_group_rsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_msg_group_rsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 offline_msg_group_rsp::group_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_rsp.group_id)
  return group_id_;
}
inline void offline_msg_group_rsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_rsp.group_id)
}

// optional uint32 total = 3;
inline bool offline_msg_group_rsp::has_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offline_msg_group_rsp::set_has_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offline_msg_group_rsp::clear_has_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offline_msg_group_rsp::clear_total() {
  total_ = 0u;
  clear_has_total();
}
inline ::google::protobuf::uint32 offline_msg_group_rsp::total() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_rsp.total)
  return total_;
}
inline void offline_msg_group_rsp::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_rsp.total)
}

// optional string msg_tag = 4;
inline bool offline_msg_group_rsp::has_msg_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_msg_group_rsp::set_has_msg_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_msg_group_rsp::clear_has_msg_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offline_msg_group_rsp::clear_msg_tag() {
  msg_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_tag();
}
inline const ::std::string& offline_msg_group_rsp::msg_tag() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_rsp.msg_tag)
  return msg_tag_.GetNoArena();
}
inline void offline_msg_group_rsp::set_msg_tag(const ::std::string& value) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_rsp.msg_tag)
}
#if LANG_CXX11
inline void offline_msg_group_rsp::set_msg_tag(::std::string&& value) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_msg.offline_msg_group_rsp.msg_tag)
}
#endif
inline void offline_msg_group_rsp::set_msg_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_msg.offline_msg_group_rsp.msg_tag)
}
inline void offline_msg_group_rsp::set_msg_tag(const char* value, size_t size) {
  set_has_msg_tag();
  msg_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_msg.offline_msg_group_rsp.msg_tag)
}
inline ::std::string* offline_msg_group_rsp::mutable_msg_tag() {
  set_has_msg_tag();
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_group_rsp.msg_tag)
  return msg_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* offline_msg_group_rsp::release_msg_tag() {
  // @@protoc_insertion_point(field_release:chat_msg.offline_msg_group_rsp.msg_tag)
  if (!has_msg_tag()) {
    return NULL;
  }
  clear_has_msg_tag();
  return msg_tag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void offline_msg_group_rsp::set_allocated_msg_tag(::std::string* msg_tag) {
  if (msg_tag != NULL) {
    set_has_msg_tag();
  } else {
    clear_has_msg_tag();
  }
  msg_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_tag);
  // @@protoc_insertion_point(field_set_allocated:chat_msg.offline_msg_group_rsp.msg_tag)
}

// -------------------------------------------------------------------

// offline_msg_group_rsp_ack

// required .common.errorinfo error = 1;
inline bool offline_msg_group_rsp_ack::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offline_msg_group_rsp_ack::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offline_msg_group_rsp_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::errorinfo& offline_msg_group_rsp_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& offline_msg_group_rsp_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_rsp_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* offline_msg_group_rsp_ack::release_error() {
  // @@protoc_insertion_point(field_release:chat_msg.offline_msg_group_rsp_ack.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* offline_msg_group_rsp_ack::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.offline_msg_group_rsp_ack.error)
  return error_;
}
inline void offline_msg_group_rsp_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.offline_msg_group_rsp_ack.error)
}

// repeated uint64 msg_id = 2;
inline int offline_msg_group_rsp_ack::msg_id_size() const {
  return msg_id_.size();
}
inline void offline_msg_group_rsp_ack::clear_msg_id() {
  msg_id_.Clear();
}
inline ::google::protobuf::uint64 offline_msg_group_rsp_ack::msg_id(int index) const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_rsp_ack.msg_id)
  return msg_id_.Get(index);
}
inline void offline_msg_group_rsp_ack::set_msg_id(int index, ::google::protobuf::uint64 value) {
  msg_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_rsp_ack.msg_id)
}
inline void offline_msg_group_rsp_ack::add_msg_id(::google::protobuf::uint64 value) {
  msg_id_.Add(value);
  // @@protoc_insertion_point(field_add:chat_msg.offline_msg_group_rsp_ack.msg_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
offline_msg_group_rsp_ack::msg_id() const {
  // @@protoc_insertion_point(field_list:chat_msg.offline_msg_group_rsp_ack.msg_id)
  return msg_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
offline_msg_group_rsp_ack::mutable_msg_id() {
  // @@protoc_insertion_point(field_mutable_list:chat_msg.offline_msg_group_rsp_ack.msg_id)
  return &msg_id_;
}

// optional uint32 group_id = 3;
inline bool offline_msg_group_rsp_ack::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offline_msg_group_rsp_ack::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offline_msg_group_rsp_ack::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offline_msg_group_rsp_ack::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 offline_msg_group_rsp_ack::group_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.offline_msg_group_rsp_ack.group_id)
  return group_id_;
}
inline void offline_msg_group_rsp_ack::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.offline_msg_group_rsp_ack.group_id)
}

// -------------------------------------------------------------------

// service_control

// optional uint32 send_id = 1;
inline bool service_control::has_send_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void service_control::set_has_send_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void service_control::clear_has_send_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void service_control::clear_send_id() {
  send_id_ = 0u;
  clear_has_send_id();
}
inline ::google::protobuf::uint32 service_control::send_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.service_control.send_id)
  return send_id_;
}
inline void service_control::set_send_id(::google::protobuf::uint32 value) {
  set_has_send_id();
  send_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.service_control.send_id)
}

// optional uint32 recv_id = 2;
inline bool service_control::has_recv_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void service_control::set_has_recv_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void service_control::clear_has_recv_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void service_control::clear_recv_id() {
  recv_id_ = 0u;
  clear_has_recv_id();
}
inline ::google::protobuf::uint32 service_control::recv_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.service_control.recv_id)
  return recv_id_;
}
inline void service_control::set_recv_id(::google::protobuf::uint32 value) {
  set_has_recv_id();
  recv_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.service_control.recv_id)
}

// optional bytes msg = 3;
inline bool service_control::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void service_control::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void service_control::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void service_control::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& service_control::msg() const {
  // @@protoc_insertion_point(field_get:chat_msg.service_control.msg)
  return msg_.GetNoArena();
}
inline void service_control::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat_msg.service_control.msg)
}
#if LANG_CXX11
inline void service_control::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat_msg.service_control.msg)
}
#endif
inline void service_control::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat_msg.service_control.msg)
}
inline void service_control::set_msg(const void* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat_msg.service_control.msg)
}
inline ::std::string* service_control::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:chat_msg.service_control.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* service_control::release_msg() {
  // @@protoc_insertion_point(field_release:chat_msg.service_control.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void service_control::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat_msg.service_control.msg)
}

// optional uint32 c_id = 4;
inline bool service_control::has_c_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void service_control::set_has_c_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void service_control::clear_has_c_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void service_control::clear_c_id() {
  c_id_ = 0u;
  clear_has_c_id();
}
inline ::google::protobuf::uint32 service_control::c_id() const {
  // @@protoc_insertion_point(field_get:chat_msg.service_control.c_id)
  return c_id_;
}
inline void service_control::set_c_id(::google::protobuf::uint32 value) {
  set_has_c_id();
  c_id_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.service_control.c_id)
}

// optional .common.errorinfo error = 5;
inline bool service_control::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void service_control::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void service_control::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::common::errorinfo& service_control::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& service_control::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:chat_msg.service_control.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* service_control::release_error() {
  // @@protoc_insertion_point(field_release:chat_msg.service_control.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* service_control::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.service_control.error)
  return error_;
}
inline void service_control::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.service_control.error)
}

// optional uint32 transfer_object = 6;
inline bool service_control::has_transfer_object() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void service_control::set_has_transfer_object() {
  _has_bits_[0] |= 0x00000020u;
}
inline void service_control::clear_has_transfer_object() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void service_control::clear_transfer_object() {
  transfer_object_ = 0u;
  clear_has_transfer_object();
}
inline ::google::protobuf::uint32 service_control::transfer_object() const {
  // @@protoc_insertion_point(field_get:chat_msg.service_control.transfer_object)
  return transfer_object_;
}
inline void service_control::set_transfer_object(::google::protobuf::uint32 value) {
  set_has_transfer_object();
  transfer_object_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.service_control.transfer_object)
}

// -------------------------------------------------------------------

// service_control_ack

// required .common.errorinfo error = 1;
inline bool service_control_ack::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void service_control_ack::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void service_control_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::errorinfo& service_control_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& service_control_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:chat_msg.service_control_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* service_control_ack::release_error() {
  // @@protoc_insertion_point(field_release:chat_msg.service_control_ack.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* service_control_ack::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chat_msg.service_control_ack.error)
  return error_;
}
inline void service_control_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:chat_msg.service_control_ack.error)
}

// optional uint64 msg_serial = 2;
inline bool service_control_ack::has_msg_serial() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void service_control_ack::set_has_msg_serial() {
  _has_bits_[0] |= 0x00000002u;
}
inline void service_control_ack::clear_has_msg_serial() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void service_control_ack::clear_msg_serial() {
  msg_serial_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_serial();
}
inline ::google::protobuf::uint64 service_control_ack::msg_serial() const {
  // @@protoc_insertion_point(field_get:chat_msg.service_control_ack.msg_serial)
  return msg_serial_;
}
inline void service_control_ack::set_msg_serial(::google::protobuf::uint64 value) {
  set_has_msg_serial();
  msg_serial_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.service_control_ack.msg_serial)
}

// -------------------------------------------------------------------

// personal_notify

// optional uint32 imid = 1;
inline bool personal_notify::has_imid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void personal_notify::set_has_imid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void personal_notify::clear_has_imid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void personal_notify::clear_imid() {
  imid_ = 0u;
  clear_has_imid();
}
inline ::google::protobuf::uint32 personal_notify::imid() const {
  // @@protoc_insertion_point(field_get:chat_msg.personal_notify.imid)
  return imid_;
}
inline void personal_notify::set_imid(::google::protobuf::uint32 value) {
  set_has_imid();
  imid_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.personal_notify.imid)
}

// -------------------------------------------------------------------

// group_notify

// optional uint32 imid = 1;
inline bool group_notify::has_imid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void group_notify::set_has_imid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void group_notify::clear_has_imid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void group_notify::clear_imid() {
  imid_ = 0u;
  clear_has_imid();
}
inline ::google::protobuf::uint32 group_notify::imid() const {
  // @@protoc_insertion_point(field_get:chat_msg.group_notify.imid)
  return imid_;
}
inline void group_notify::set_imid(::google::protobuf::uint32 value) {
  set_has_imid();
  imid_ = value;
  // @@protoc_insertion_point(field_set:chat_msg.group_notify.imid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chat_5fmsg_2eproto
