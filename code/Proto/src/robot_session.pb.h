// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_session.proto

#ifndef PROTOBUF_INCLUDED_robot_5fsession_2eproto
#define PROTOBUF_INCLUDED_robot_5fsession_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fsession_2eproto 

namespace protobuf_robot_5fsession_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_robot_5fsession_2eproto
namespace robot_session {
class edit_pre_question;
class edit_pre_questionDefaultTypeInternal;
extern edit_pre_questionDefaultTypeInternal _edit_pre_question_default_instance_;
class edit_robot_pre_questions_ack;
class edit_robot_pre_questions_ackDefaultTypeInternal;
extern edit_robot_pre_questions_ackDefaultTypeInternal _edit_robot_pre_questions_ack_default_instance_;
class edit_robot_pre_questions_req;
class edit_robot_pre_questions_reqDefaultTypeInternal;
extern edit_robot_pre_questions_reqDefaultTypeInternal _edit_robot_pre_questions_req_default_instance_;
class enter_robot_session_ack;
class enter_robot_session_ackDefaultTypeInternal;
extern enter_robot_session_ackDefaultTypeInternal _enter_robot_session_ack_default_instance_;
class enter_robot_session_req;
class enter_robot_session_reqDefaultTypeInternal;
extern enter_robot_session_reqDefaultTypeInternal _enter_robot_session_req_default_instance_;
class get_robot_pre_question_list_ack;
class get_robot_pre_question_list_ackDefaultTypeInternal;
extern get_robot_pre_question_list_ackDefaultTypeInternal _get_robot_pre_question_list_ack_default_instance_;
class get_robot_pre_question_list_req;
class get_robot_pre_question_list_reqDefaultTypeInternal;
extern get_robot_pre_question_list_reqDefaultTypeInternal _get_robot_pre_question_list_req_default_instance_;
class inquery_robot_pre_question_ack;
class inquery_robot_pre_question_ackDefaultTypeInternal;
extern inquery_robot_pre_question_ackDefaultTypeInternal _inquery_robot_pre_question_ack_default_instance_;
class inquery_robot_pre_question_req;
class inquery_robot_pre_question_reqDefaultTypeInternal;
extern inquery_robot_pre_question_reqDefaultTypeInternal _inquery_robot_pre_question_req_default_instance_;
class pre_question;
class pre_questionDefaultTypeInternal;
extern pre_questionDefaultTypeInternal _pre_question_default_instance_;
class robot_single_msg_ack;
class robot_single_msg_ackDefaultTypeInternal;
extern robot_single_msg_ackDefaultTypeInternal _robot_single_msg_ack_default_instance_;
class robot_single_msg_req;
class robot_single_msg_reqDefaultTypeInternal;
extern robot_single_msg_reqDefaultTypeInternal _robot_single_msg_req_default_instance_;
}  // namespace robot_session
namespace google {
namespace protobuf {
template<> ::robot_session::edit_pre_question* Arena::CreateMaybeMessage<::robot_session::edit_pre_question>(Arena*);
template<> ::robot_session::edit_robot_pre_questions_ack* Arena::CreateMaybeMessage<::robot_session::edit_robot_pre_questions_ack>(Arena*);
template<> ::robot_session::edit_robot_pre_questions_req* Arena::CreateMaybeMessage<::robot_session::edit_robot_pre_questions_req>(Arena*);
template<> ::robot_session::enter_robot_session_ack* Arena::CreateMaybeMessage<::robot_session::enter_robot_session_ack>(Arena*);
template<> ::robot_session::enter_robot_session_req* Arena::CreateMaybeMessage<::robot_session::enter_robot_session_req>(Arena*);
template<> ::robot_session::get_robot_pre_question_list_ack* Arena::CreateMaybeMessage<::robot_session::get_robot_pre_question_list_ack>(Arena*);
template<> ::robot_session::get_robot_pre_question_list_req* Arena::CreateMaybeMessage<::robot_session::get_robot_pre_question_list_req>(Arena*);
template<> ::robot_session::inquery_robot_pre_question_ack* Arena::CreateMaybeMessage<::robot_session::inquery_robot_pre_question_ack>(Arena*);
template<> ::robot_session::inquery_robot_pre_question_req* Arena::CreateMaybeMessage<::robot_session::inquery_robot_pre_question_req>(Arena*);
template<> ::robot_session::pre_question* Arena::CreateMaybeMessage<::robot_session::pre_question>(Arena*);
template<> ::robot_session::robot_single_msg_ack* Arena::CreateMaybeMessage<::robot_session::robot_single_msg_ack>(Arena*);
template<> ::robot_session::robot_single_msg_req* Arena::CreateMaybeMessage<::robot_session::robot_single_msg_req>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace robot_session {

// ===================================================================

class pre_question : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.pre_question) */ {
 public:
  pre_question();
  virtual ~pre_question();

  pre_question(const pre_question& from);

  inline pre_question& operator=(const pre_question& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pre_question(pre_question&& from) noexcept
    : pre_question() {
    *this = ::std::move(from);
  }

  inline pre_question& operator=(pre_question&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pre_question& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pre_question* internal_default_instance() {
    return reinterpret_cast<const pre_question*>(
               &_pre_question_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(pre_question* other);
  friend void swap(pre_question& a, pre_question& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pre_question* New() const final {
    return CreateMaybeMessage<pre_question>(NULL);
  }

  pre_question* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pre_question>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pre_question& from);
  void MergeFrom(const pre_question& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pre_question* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes question = 2;
  void clear_question();
  static const int kQuestionFieldNumber = 2;
  const ::std::string& question() const;
  void set_question(const ::std::string& value);
  #if LANG_CXX11
  void set_question(::std::string&& value);
  #endif
  void set_question(const char* value);
  void set_question(const void* value, size_t size);
  ::std::string* mutable_question();
  ::std::string* release_question();
  void set_allocated_question(::std::string* question);

  // bytes answer = 4;
  void clear_answer();
  static const int kAnswerFieldNumber = 4;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const void* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // uint64 question_id = 1;
  void clear_question_id();
  static const int kQuestionIdFieldNumber = 1;
  ::google::protobuf::uint64 question_id() const;
  void set_question_id(::google::protobuf::uint64 value);

  // uint32 question_type = 3;
  void clear_question_type();
  static const int kQuestionTypeFieldNumber = 3;
  ::google::protobuf::uint32 question_type() const;
  void set_question_type(::google::protobuf::uint32 value);

  // uint32 answer_template = 5;
  void clear_answer_template();
  static const int kAnswerTemplateFieldNumber = 5;
  ::google::protobuf::uint32 answer_template() const;
  void set_answer_template(::google::protobuf::uint32 value);

  // uint32 create_date = 6;
  void clear_create_date();
  static const int kCreateDateFieldNumber = 6;
  ::google::protobuf::uint32 create_date() const;
  void set_create_date(::google::protobuf::uint32 value);

  // uint32 update_date = 7;
  void clear_update_date();
  static const int kUpdateDateFieldNumber = 7;
  ::google::protobuf::uint32 update_date() const;
  void set_update_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robot_session.pre_question)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr question_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::google::protobuf::uint64 question_id_;
  ::google::protobuf::uint32 question_type_;
  ::google::protobuf::uint32 answer_template_;
  ::google::protobuf::uint32 create_date_;
  ::google::protobuf::uint32 update_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class enter_robot_session_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.enter_robot_session_req) */ {
 public:
  enter_robot_session_req();
  virtual ~enter_robot_session_req();

  enter_robot_session_req(const enter_robot_session_req& from);

  inline enter_robot_session_req& operator=(const enter_robot_session_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  enter_robot_session_req(enter_robot_session_req&& from) noexcept
    : enter_robot_session_req() {
    *this = ::std::move(from);
  }

  inline enter_robot_session_req& operator=(enter_robot_session_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_robot_session_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const enter_robot_session_req* internal_default_instance() {
    return reinterpret_cast<const enter_robot_session_req*>(
               &_enter_robot_session_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(enter_robot_session_req* other);
  friend void swap(enter_robot_session_req& a, enter_robot_session_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline enter_robot_session_req* New() const final {
    return CreateMaybeMessage<enter_robot_session_req>(NULL);
  }

  enter_robot_session_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<enter_robot_session_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const enter_robot_session_req& from);
  void MergeFrom(const enter_robot_session_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(enter_robot_session_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:robot_session.enter_robot_session_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class enter_robot_session_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.enter_robot_session_ack) */ {
 public:
  enter_robot_session_ack();
  virtual ~enter_robot_session_ack();

  enter_robot_session_ack(const enter_robot_session_ack& from);

  inline enter_robot_session_ack& operator=(const enter_robot_session_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  enter_robot_session_ack(enter_robot_session_ack&& from) noexcept
    : enter_robot_session_ack() {
    *this = ::std::move(from);
  }

  inline enter_robot_session_ack& operator=(enter_robot_session_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_robot_session_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const enter_robot_session_ack* internal_default_instance() {
    return reinterpret_cast<const enter_robot_session_ack*>(
               &_enter_robot_session_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(enter_robot_session_ack* other);
  friend void swap(enter_robot_session_ack& a, enter_robot_session_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline enter_robot_session_ack* New() const final {
    return CreateMaybeMessage<enter_robot_session_ack>(NULL);
  }

  enter_robot_session_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<enter_robot_session_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const enter_robot_session_ack& from);
  void MergeFrom(const enter_robot_session_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(enter_robot_session_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robot_session.pre_question pre_questions = 7;
  int pre_questions_size() const;
  void clear_pre_questions();
  static const int kPreQuestionsFieldNumber = 7;
  ::robot_session::pre_question* mutable_pre_questions(int index);
  ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question >*
      mutable_pre_questions();
  const ::robot_session::pre_question& pre_questions(int index) const;
  ::robot_session::pre_question* add_pre_questions();
  const ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question >&
      pre_questions() const;

  // bytes robot_name = 3;
  void clear_robot_name();
  static const int kRobotNameFieldNumber = 3;
  const ::std::string& robot_name() const;
  void set_robot_name(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_name(::std::string&& value);
  #endif
  void set_robot_name(const char* value);
  void set_robot_name(const void* value, size_t size);
  ::std::string* mutable_robot_name();
  ::std::string* release_robot_name();
  void set_allocated_robot_name(::std::string* robot_name);

  // bytes robot_welcome = 6;
  void clear_robot_welcome();
  static const int kRobotWelcomeFieldNumber = 6;
  const ::std::string& robot_welcome() const;
  void set_robot_welcome(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_welcome(::std::string&& value);
  #endif
  void set_robot_welcome(const char* value);
  void set_robot_welcome(const void* value, size_t size);
  ::std::string* mutable_robot_welcome();
  ::std::string* release_robot_welcome();
  void set_allocated_robot_welcome(::std::string* robot_welcome);

  // .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // uint32 userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  ::google::protobuf::uint32 userid() const;
  void set_userid(::google::protobuf::uint32 value);

  // uint32 enter_session_time = 4;
  void clear_enter_session_time();
  static const int kEnterSessionTimeFieldNumber = 4;
  ::google::protobuf::uint32 enter_session_time() const;
  void set_enter_session_time(::google::protobuf::uint32 value);

  // uint64 session_id = 5;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 5;
  ::google::protobuf::uint64 session_id() const;
  void set_session_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:robot_session.enter_robot_session_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question > pre_questions_;
  ::google::protobuf::internal::ArenaStringPtr robot_name_;
  ::google::protobuf::internal::ArenaStringPtr robot_welcome_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 enter_session_time_;
  ::google::protobuf::uint64 session_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class robot_single_msg_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.robot_single_msg_req) */ {
 public:
  robot_single_msg_req();
  virtual ~robot_single_msg_req();

  robot_single_msg_req(const robot_single_msg_req& from);

  inline robot_single_msg_req& operator=(const robot_single_msg_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  robot_single_msg_req(robot_single_msg_req&& from) noexcept
    : robot_single_msg_req() {
    *this = ::std::move(from);
  }

  inline robot_single_msg_req& operator=(robot_single_msg_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const robot_single_msg_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const robot_single_msg_req* internal_default_instance() {
    return reinterpret_cast<const robot_single_msg_req*>(
               &_robot_single_msg_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(robot_single_msg_req* other);
  friend void swap(robot_single_msg_req& a, robot_single_msg_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline robot_single_msg_req* New() const final {
    return CreateMaybeMessage<robot_single_msg_req>(NULL);
  }

  robot_single_msg_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<robot_single_msg_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const robot_single_msg_req& from);
  void MergeFrom(const robot_single_msg_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(robot_single_msg_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // uint32 msg_type = 1;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::google::protobuf::uint32 msg_type() const;
  void set_msg_type(::google::protobuf::uint32 value);

  // uint32 send_time = 4;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 4;
  ::google::protobuf::uint32 send_time() const;
  void set_send_time(::google::protobuf::uint32 value);

  // uint64 msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:robot_session.robot_single_msg_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint32 msg_type_;
  ::google::protobuf::uint32 send_time_;
  ::google::protobuf::uint64 msg_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class robot_single_msg_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.robot_single_msg_ack) */ {
 public:
  robot_single_msg_ack();
  virtual ~robot_single_msg_ack();

  robot_single_msg_ack(const robot_single_msg_ack& from);

  inline robot_single_msg_ack& operator=(const robot_single_msg_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  robot_single_msg_ack(robot_single_msg_ack&& from) noexcept
    : robot_single_msg_ack() {
    *this = ::std::move(from);
  }

  inline robot_single_msg_ack& operator=(robot_single_msg_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const robot_single_msg_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const robot_single_msg_ack* internal_default_instance() {
    return reinterpret_cast<const robot_single_msg_ack*>(
               &_robot_single_msg_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(robot_single_msg_ack* other);
  friend void swap(robot_single_msg_ack& a, robot_single_msg_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline robot_single_msg_ack* New() const final {
    return CreateMaybeMessage<robot_single_msg_ack>(NULL);
  }

  robot_single_msg_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<robot_single_msg_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const robot_single_msg_ack& from);
  void MergeFrom(const robot_single_msg_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(robot_single_msg_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 5;
  void clear_msg();
  static const int kMsgFieldNumber = 5;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // uint64 msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint64 msg_id() const;
  void set_msg_id(::google::protobuf::uint64 value);

  // uint32 send_time = 3;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 3;
  ::google::protobuf::uint32 send_time() const;
  void set_send_time(::google::protobuf::uint32 value);

  // uint32 msg_type = 4;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 4;
  ::google::protobuf::uint32 msg_type() const;
  void set_msg_type(::google::protobuf::uint32 value);

  // uint32 msg_template = 6;
  void clear_msg_template();
  static const int kMsgTemplateFieldNumber = 6;
  ::google::protobuf::uint32 msg_template() const;
  void set_msg_template(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robot_session.robot_single_msg_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint64 msg_id_;
  ::google::protobuf::uint32 send_time_;
  ::google::protobuf::uint32 msg_type_;
  ::google::protobuf::uint32 msg_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class get_robot_pre_question_list_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.get_robot_pre_question_list_req) */ {
 public:
  get_robot_pre_question_list_req();
  virtual ~get_robot_pre_question_list_req();

  get_robot_pre_question_list_req(const get_robot_pre_question_list_req& from);

  inline get_robot_pre_question_list_req& operator=(const get_robot_pre_question_list_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  get_robot_pre_question_list_req(get_robot_pre_question_list_req&& from) noexcept
    : get_robot_pre_question_list_req() {
    *this = ::std::move(from);
  }

  inline get_robot_pre_question_list_req& operator=(get_robot_pre_question_list_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const get_robot_pre_question_list_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_robot_pre_question_list_req* internal_default_instance() {
    return reinterpret_cast<const get_robot_pre_question_list_req*>(
               &_get_robot_pre_question_list_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(get_robot_pre_question_list_req* other);
  friend void swap(get_robot_pre_question_list_req& a, get_robot_pre_question_list_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline get_robot_pre_question_list_req* New() const final {
    return CreateMaybeMessage<get_robot_pre_question_list_req>(NULL);
  }

  get_robot_pre_question_list_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<get_robot_pre_question_list_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const get_robot_pre_question_list_req& from);
  void MergeFrom(const get_robot_pre_question_list_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_robot_pre_question_list_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes search_words = 3;
  void clear_search_words();
  static const int kSearchWordsFieldNumber = 3;
  const ::std::string& search_words() const;
  void set_search_words(const ::std::string& value);
  #if LANG_CXX11
  void set_search_words(::std::string&& value);
  #endif
  void set_search_words(const char* value);
  void set_search_words(const void* value, size_t size);
  ::std::string* mutable_search_words();
  ::std::string* release_search_words();
  void set_allocated_search_words(::std::string* search_words);

  // uint32 question_type = 1;
  void clear_question_type();
  static const int kQuestionTypeFieldNumber = 1;
  ::google::protobuf::uint32 question_type() const;
  void set_question_type(::google::protobuf::uint32 value);

  // uint32 answer_template = 2;
  void clear_answer_template();
  static const int kAnswerTemplateFieldNumber = 2;
  ::google::protobuf::uint32 answer_template() const;
  void set_answer_template(::google::protobuf::uint32 value);

  // uint32 page = 4;
  void clear_page();
  static const int kPageFieldNumber = 4;
  ::google::protobuf::uint32 page() const;
  void set_page(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robot_session.get_robot_pre_question_list_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr search_words_;
  ::google::protobuf::uint32 question_type_;
  ::google::protobuf::uint32 answer_template_;
  ::google::protobuf::uint32 page_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class get_robot_pre_question_list_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.get_robot_pre_question_list_ack) */ {
 public:
  get_robot_pre_question_list_ack();
  virtual ~get_robot_pre_question_list_ack();

  get_robot_pre_question_list_ack(const get_robot_pre_question_list_ack& from);

  inline get_robot_pre_question_list_ack& operator=(const get_robot_pre_question_list_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  get_robot_pre_question_list_ack(get_robot_pre_question_list_ack&& from) noexcept
    : get_robot_pre_question_list_ack() {
    *this = ::std::move(from);
  }

  inline get_robot_pre_question_list_ack& operator=(get_robot_pre_question_list_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const get_robot_pre_question_list_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const get_robot_pre_question_list_ack* internal_default_instance() {
    return reinterpret_cast<const get_robot_pre_question_list_ack*>(
               &_get_robot_pre_question_list_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(get_robot_pre_question_list_ack* other);
  friend void swap(get_robot_pre_question_list_ack& a, get_robot_pre_question_list_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline get_robot_pre_question_list_ack* New() const final {
    return CreateMaybeMessage<get_robot_pre_question_list_ack>(NULL);
  }

  get_robot_pre_question_list_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<get_robot_pre_question_list_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const get_robot_pre_question_list_ack& from);
  void MergeFrom(const get_robot_pre_question_list_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_robot_pre_question_list_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robot_session.pre_question pre_questions = 2;
  int pre_questions_size() const;
  void clear_pre_questions();
  static const int kPreQuestionsFieldNumber = 2;
  ::robot_session::pre_question* mutable_pre_questions(int index);
  ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question >*
      mutable_pre_questions();
  const ::robot_session::pre_question& pre_questions(int index) const;
  ::robot_session::pre_question* add_pre_questions();
  const ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question >&
      pre_questions() const;

  // .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // uint32 total_num = 3;
  void clear_total_num();
  static const int kTotalNumFieldNumber = 3;
  ::google::protobuf::uint32 total_num() const;
  void set_total_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robot_session.get_robot_pre_question_list_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question > pre_questions_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint32 total_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class inquery_robot_pre_question_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.inquery_robot_pre_question_req) */ {
 public:
  inquery_robot_pre_question_req();
  virtual ~inquery_robot_pre_question_req();

  inquery_robot_pre_question_req(const inquery_robot_pre_question_req& from);

  inline inquery_robot_pre_question_req& operator=(const inquery_robot_pre_question_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  inquery_robot_pre_question_req(inquery_robot_pre_question_req&& from) noexcept
    : inquery_robot_pre_question_req() {
    *this = ::std::move(from);
  }

  inline inquery_robot_pre_question_req& operator=(inquery_robot_pre_question_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const inquery_robot_pre_question_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const inquery_robot_pre_question_req* internal_default_instance() {
    return reinterpret_cast<const inquery_robot_pre_question_req*>(
               &_inquery_robot_pre_question_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(inquery_robot_pre_question_req* other);
  friend void swap(inquery_robot_pre_question_req& a, inquery_robot_pre_question_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline inquery_robot_pre_question_req* New() const final {
    return CreateMaybeMessage<inquery_robot_pre_question_req>(NULL);
  }

  inquery_robot_pre_question_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<inquery_robot_pre_question_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const inquery_robot_pre_question_req& from);
  void MergeFrom(const inquery_robot_pre_question_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(inquery_robot_pre_question_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 question_id = 1;
  void clear_question_id();
  static const int kQuestionIdFieldNumber = 1;
  ::google::protobuf::uint64 question_id() const;
  void set_question_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:robot_session.inquery_robot_pre_question_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 question_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class inquery_robot_pre_question_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.inquery_robot_pre_question_ack) */ {
 public:
  inquery_robot_pre_question_ack();
  virtual ~inquery_robot_pre_question_ack();

  inquery_robot_pre_question_ack(const inquery_robot_pre_question_ack& from);

  inline inquery_robot_pre_question_ack& operator=(const inquery_robot_pre_question_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  inquery_robot_pre_question_ack(inquery_robot_pre_question_ack&& from) noexcept
    : inquery_robot_pre_question_ack() {
    *this = ::std::move(from);
  }

  inline inquery_robot_pre_question_ack& operator=(inquery_robot_pre_question_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const inquery_robot_pre_question_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const inquery_robot_pre_question_ack* internal_default_instance() {
    return reinterpret_cast<const inquery_robot_pre_question_ack*>(
               &_inquery_robot_pre_question_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(inquery_robot_pre_question_ack* other);
  friend void swap(inquery_robot_pre_question_ack& a, inquery_robot_pre_question_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline inquery_robot_pre_question_ack* New() const final {
    return CreateMaybeMessage<inquery_robot_pre_question_ack>(NULL);
  }

  inquery_robot_pre_question_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<inquery_robot_pre_question_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const inquery_robot_pre_question_ack& from);
  void MergeFrom(const inquery_robot_pre_question_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(inquery_robot_pre_question_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes answer = 2;
  void clear_answer();
  static const int kAnswerFieldNumber = 2;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const void* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // uint32 answer_template = 3;
  void clear_answer_template();
  static const int kAnswerTemplateFieldNumber = 3;
  ::google::protobuf::uint32 answer_template() const;
  void set_answer_template(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robot_session.inquery_robot_pre_question_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint32 answer_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class edit_pre_question : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.edit_pre_question) */ {
 public:
  edit_pre_question();
  virtual ~edit_pre_question();

  edit_pre_question(const edit_pre_question& from);

  inline edit_pre_question& operator=(const edit_pre_question& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  edit_pre_question(edit_pre_question&& from) noexcept
    : edit_pre_question() {
    *this = ::std::move(from);
  }

  inline edit_pre_question& operator=(edit_pre_question&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const edit_pre_question& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const edit_pre_question* internal_default_instance() {
    return reinterpret_cast<const edit_pre_question*>(
               &_edit_pre_question_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(edit_pre_question* other);
  friend void swap(edit_pre_question& a, edit_pre_question& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline edit_pre_question* New() const final {
    return CreateMaybeMessage<edit_pre_question>(NULL);
  }

  edit_pre_question* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<edit_pre_question>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const edit_pre_question& from);
  void MergeFrom(const edit_pre_question& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(edit_pre_question* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes question = 2;
  void clear_question();
  static const int kQuestionFieldNumber = 2;
  const ::std::string& question() const;
  void set_question(const ::std::string& value);
  #if LANG_CXX11
  void set_question(::std::string&& value);
  #endif
  void set_question(const char* value);
  void set_question(const void* value, size_t size);
  ::std::string* mutable_question();
  ::std::string* release_question();
  void set_allocated_question(::std::string* question);

  // bytes answer = 3;
  void clear_answer();
  static const int kAnswerFieldNumber = 3;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const void* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // uint64 question_id = 1;
  void clear_question_id();
  static const int kQuestionIdFieldNumber = 1;
  ::google::protobuf::uint64 question_id() const;
  void set_question_id(::google::protobuf::uint64 value);

  // uint32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // uint32 answer_template = 5;
  void clear_answer_template();
  static const int kAnswerTemplateFieldNumber = 5;
  ::google::protobuf::uint32 answer_template() const;
  void set_answer_template(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robot_session.edit_pre_question)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr question_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::google::protobuf::uint64 question_id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 answer_template_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class edit_robot_pre_questions_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.edit_robot_pre_questions_req) */ {
 public:
  edit_robot_pre_questions_req();
  virtual ~edit_robot_pre_questions_req();

  edit_robot_pre_questions_req(const edit_robot_pre_questions_req& from);

  inline edit_robot_pre_questions_req& operator=(const edit_robot_pre_questions_req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  edit_robot_pre_questions_req(edit_robot_pre_questions_req&& from) noexcept
    : edit_robot_pre_questions_req() {
    *this = ::std::move(from);
  }

  inline edit_robot_pre_questions_req& operator=(edit_robot_pre_questions_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const edit_robot_pre_questions_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const edit_robot_pre_questions_req* internal_default_instance() {
    return reinterpret_cast<const edit_robot_pre_questions_req*>(
               &_edit_robot_pre_questions_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(edit_robot_pre_questions_req* other);
  friend void swap(edit_robot_pre_questions_req& a, edit_robot_pre_questions_req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline edit_robot_pre_questions_req* New() const final {
    return CreateMaybeMessage<edit_robot_pre_questions_req>(NULL);
  }

  edit_robot_pre_questions_req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<edit_robot_pre_questions_req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const edit_robot_pre_questions_req& from);
  void MergeFrom(const edit_robot_pre_questions_req& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(edit_robot_pre_questions_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robot_session.edit_pre_question edit_pre_questions = 1;
  int edit_pre_questions_size() const;
  void clear_edit_pre_questions();
  static const int kEditPreQuestionsFieldNumber = 1;
  ::robot_session::edit_pre_question* mutable_edit_pre_questions(int index);
  ::google::protobuf::RepeatedPtrField< ::robot_session::edit_pre_question >*
      mutable_edit_pre_questions();
  const ::robot_session::edit_pre_question& edit_pre_questions(int index) const;
  ::robot_session::edit_pre_question* add_edit_pre_questions();
  const ::google::protobuf::RepeatedPtrField< ::robot_session::edit_pre_question >&
      edit_pre_questions() const;

  // uint32 update_type = 2;
  void clear_update_type();
  static const int kUpdateTypeFieldNumber = 2;
  ::google::protobuf::uint32 update_type() const;
  void set_update_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robot_session.edit_robot_pre_questions_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::robot_session::edit_pre_question > edit_pre_questions_;
  ::google::protobuf::uint32 update_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class edit_robot_pre_questions_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robot_session.edit_robot_pre_questions_ack) */ {
 public:
  edit_robot_pre_questions_ack();
  virtual ~edit_robot_pre_questions_ack();

  edit_robot_pre_questions_ack(const edit_robot_pre_questions_ack& from);

  inline edit_robot_pre_questions_ack& operator=(const edit_robot_pre_questions_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  edit_robot_pre_questions_ack(edit_robot_pre_questions_ack&& from) noexcept
    : edit_robot_pre_questions_ack() {
    *this = ::std::move(from);
  }

  inline edit_robot_pre_questions_ack& operator=(edit_robot_pre_questions_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const edit_robot_pre_questions_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const edit_robot_pre_questions_ack* internal_default_instance() {
    return reinterpret_cast<const edit_robot_pre_questions_ack*>(
               &_edit_robot_pre_questions_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(edit_robot_pre_questions_ack* other);
  friend void swap(edit_robot_pre_questions_ack& a, edit_robot_pre_questions_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline edit_robot_pre_questions_ack* New() const final {
    return CreateMaybeMessage<edit_robot_pre_questions_ack>(NULL);
  }

  edit_robot_pre_questions_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<edit_robot_pre_questions_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const edit_robot_pre_questions_ack& from);
  void MergeFrom(const edit_robot_pre_questions_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(edit_robot_pre_questions_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // @@protoc_insertion_point(class_scope:robot_session.edit_robot_pre_questions_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::errorinfo* error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_robot_5fsession_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pre_question

// uint64 question_id = 1;
inline void pre_question::clear_question_id() {
  question_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 pre_question::question_id() const {
  // @@protoc_insertion_point(field_get:robot_session.pre_question.question_id)
  return question_id_;
}
inline void pre_question::set_question_id(::google::protobuf::uint64 value) {
  
  question_id_ = value;
  // @@protoc_insertion_point(field_set:robot_session.pre_question.question_id)
}

// bytes question = 2;
inline void pre_question::clear_question() {
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pre_question::question() const {
  // @@protoc_insertion_point(field_get:robot_session.pre_question.question)
  return question_.GetNoArena();
}
inline void pre_question::set_question(const ::std::string& value) {
  
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.pre_question.question)
}
#if LANG_CXX11
inline void pre_question::set_question(::std::string&& value) {
  
  question_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.pre_question.question)
}
#endif
inline void pre_question::set_question(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.pre_question.question)
}
inline void pre_question::set_question(const void* value, size_t size) {
  
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.pre_question.question)
}
inline ::std::string* pre_question::mutable_question() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.pre_question.question)
  return question_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pre_question::release_question() {
  // @@protoc_insertion_point(field_release:robot_session.pre_question.question)
  
  return question_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pre_question::set_allocated_question(::std::string* question) {
  if (question != NULL) {
    
  } else {
    
  }
  question_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), question);
  // @@protoc_insertion_point(field_set_allocated:robot_session.pre_question.question)
}

// uint32 question_type = 3;
inline void pre_question::clear_question_type() {
  question_type_ = 0u;
}
inline ::google::protobuf::uint32 pre_question::question_type() const {
  // @@protoc_insertion_point(field_get:robot_session.pre_question.question_type)
  return question_type_;
}
inline void pre_question::set_question_type(::google::protobuf::uint32 value) {
  
  question_type_ = value;
  // @@protoc_insertion_point(field_set:robot_session.pre_question.question_type)
}

// bytes answer = 4;
inline void pre_question::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pre_question::answer() const {
  // @@protoc_insertion_point(field_get:robot_session.pre_question.answer)
  return answer_.GetNoArena();
}
inline void pre_question::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.pre_question.answer)
}
#if LANG_CXX11
inline void pre_question::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.pre_question.answer)
}
#endif
inline void pre_question::set_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.pre_question.answer)
}
inline void pre_question::set_answer(const void* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.pre_question.answer)
}
inline ::std::string* pre_question::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.pre_question.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pre_question::release_answer() {
  // @@protoc_insertion_point(field_release:robot_session.pre_question.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pre_question::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:robot_session.pre_question.answer)
}

// uint32 answer_template = 5;
inline void pre_question::clear_answer_template() {
  answer_template_ = 0u;
}
inline ::google::protobuf::uint32 pre_question::answer_template() const {
  // @@protoc_insertion_point(field_get:robot_session.pre_question.answer_template)
  return answer_template_;
}
inline void pre_question::set_answer_template(::google::protobuf::uint32 value) {
  
  answer_template_ = value;
  // @@protoc_insertion_point(field_set:robot_session.pre_question.answer_template)
}

// uint32 create_date = 6;
inline void pre_question::clear_create_date() {
  create_date_ = 0u;
}
inline ::google::protobuf::uint32 pre_question::create_date() const {
  // @@protoc_insertion_point(field_get:robot_session.pre_question.create_date)
  return create_date_;
}
inline void pre_question::set_create_date(::google::protobuf::uint32 value) {
  
  create_date_ = value;
  // @@protoc_insertion_point(field_set:robot_session.pre_question.create_date)
}

// uint32 update_date = 7;
inline void pre_question::clear_update_date() {
  update_date_ = 0u;
}
inline ::google::protobuf::uint32 pre_question::update_date() const {
  // @@protoc_insertion_point(field_get:robot_session.pre_question.update_date)
  return update_date_;
}
inline void pre_question::set_update_date(::google::protobuf::uint32 value) {
  
  update_date_ = value;
  // @@protoc_insertion_point(field_set:robot_session.pre_question.update_date)
}

// -------------------------------------------------------------------

// enter_robot_session_req

// -------------------------------------------------------------------

// enter_robot_session_ack

// .common.errorinfo error = 1;
inline bool enter_robot_session_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::common::errorinfo& enter_robot_session_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& enter_robot_session_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:robot_session.enter_robot_session_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* enter_robot_session_ack::release_error() {
  // @@protoc_insertion_point(field_release:robot_session.enter_robot_session_ack.error)
  
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* enter_robot_session_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robot_session.enter_robot_session_ack.error)
  return error_;
}
inline void enter_robot_session_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:robot_session.enter_robot_session_ack.error)
}

// uint32 userid = 2;
inline void enter_robot_session_ack::clear_userid() {
  userid_ = 0u;
}
inline ::google::protobuf::uint32 enter_robot_session_ack::userid() const {
  // @@protoc_insertion_point(field_get:robot_session.enter_robot_session_ack.userid)
  return userid_;
}
inline void enter_robot_session_ack::set_userid(::google::protobuf::uint32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:robot_session.enter_robot_session_ack.userid)
}

// bytes robot_name = 3;
inline void enter_robot_session_ack::clear_robot_name() {
  robot_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& enter_robot_session_ack::robot_name() const {
  // @@protoc_insertion_point(field_get:robot_session.enter_robot_session_ack.robot_name)
  return robot_name_.GetNoArena();
}
inline void enter_robot_session_ack::set_robot_name(const ::std::string& value) {
  
  robot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.enter_robot_session_ack.robot_name)
}
#if LANG_CXX11
inline void enter_robot_session_ack::set_robot_name(::std::string&& value) {
  
  robot_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.enter_robot_session_ack.robot_name)
}
#endif
inline void enter_robot_session_ack::set_robot_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.enter_robot_session_ack.robot_name)
}
inline void enter_robot_session_ack::set_robot_name(const void* value, size_t size) {
  
  robot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.enter_robot_session_ack.robot_name)
}
inline ::std::string* enter_robot_session_ack::mutable_robot_name() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.enter_robot_session_ack.robot_name)
  return robot_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* enter_robot_session_ack::release_robot_name() {
  // @@protoc_insertion_point(field_release:robot_session.enter_robot_session_ack.robot_name)
  
  return robot_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void enter_robot_session_ack::set_allocated_robot_name(::std::string* robot_name) {
  if (robot_name != NULL) {
    
  } else {
    
  }
  robot_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_name);
  // @@protoc_insertion_point(field_set_allocated:robot_session.enter_robot_session_ack.robot_name)
}

// uint32 enter_session_time = 4;
inline void enter_robot_session_ack::clear_enter_session_time() {
  enter_session_time_ = 0u;
}
inline ::google::protobuf::uint32 enter_robot_session_ack::enter_session_time() const {
  // @@protoc_insertion_point(field_get:robot_session.enter_robot_session_ack.enter_session_time)
  return enter_session_time_;
}
inline void enter_robot_session_ack::set_enter_session_time(::google::protobuf::uint32 value) {
  
  enter_session_time_ = value;
  // @@protoc_insertion_point(field_set:robot_session.enter_robot_session_ack.enter_session_time)
}

// uint64 session_id = 5;
inline void enter_robot_session_ack::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 enter_robot_session_ack::session_id() const {
  // @@protoc_insertion_point(field_get:robot_session.enter_robot_session_ack.session_id)
  return session_id_;
}
inline void enter_robot_session_ack::set_session_id(::google::protobuf::uint64 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:robot_session.enter_robot_session_ack.session_id)
}

// bytes robot_welcome = 6;
inline void enter_robot_session_ack::clear_robot_welcome() {
  robot_welcome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& enter_robot_session_ack::robot_welcome() const {
  // @@protoc_insertion_point(field_get:robot_session.enter_robot_session_ack.robot_welcome)
  return robot_welcome_.GetNoArena();
}
inline void enter_robot_session_ack::set_robot_welcome(const ::std::string& value) {
  
  robot_welcome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.enter_robot_session_ack.robot_welcome)
}
#if LANG_CXX11
inline void enter_robot_session_ack::set_robot_welcome(::std::string&& value) {
  
  robot_welcome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.enter_robot_session_ack.robot_welcome)
}
#endif
inline void enter_robot_session_ack::set_robot_welcome(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_welcome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.enter_robot_session_ack.robot_welcome)
}
inline void enter_robot_session_ack::set_robot_welcome(const void* value, size_t size) {
  
  robot_welcome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.enter_robot_session_ack.robot_welcome)
}
inline ::std::string* enter_robot_session_ack::mutable_robot_welcome() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.enter_robot_session_ack.robot_welcome)
  return robot_welcome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* enter_robot_session_ack::release_robot_welcome() {
  // @@protoc_insertion_point(field_release:robot_session.enter_robot_session_ack.robot_welcome)
  
  return robot_welcome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void enter_robot_session_ack::set_allocated_robot_welcome(::std::string* robot_welcome) {
  if (robot_welcome != NULL) {
    
  } else {
    
  }
  robot_welcome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_welcome);
  // @@protoc_insertion_point(field_set_allocated:robot_session.enter_robot_session_ack.robot_welcome)
}

// repeated .robot_session.pre_question pre_questions = 7;
inline int enter_robot_session_ack::pre_questions_size() const {
  return pre_questions_.size();
}
inline void enter_robot_session_ack::clear_pre_questions() {
  pre_questions_.Clear();
}
inline ::robot_session::pre_question* enter_robot_session_ack::mutable_pre_questions(int index) {
  // @@protoc_insertion_point(field_mutable:robot_session.enter_robot_session_ack.pre_questions)
  return pre_questions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question >*
enter_robot_session_ack::mutable_pre_questions() {
  // @@protoc_insertion_point(field_mutable_list:robot_session.enter_robot_session_ack.pre_questions)
  return &pre_questions_;
}
inline const ::robot_session::pre_question& enter_robot_session_ack::pre_questions(int index) const {
  // @@protoc_insertion_point(field_get:robot_session.enter_robot_session_ack.pre_questions)
  return pre_questions_.Get(index);
}
inline ::robot_session::pre_question* enter_robot_session_ack::add_pre_questions() {
  // @@protoc_insertion_point(field_add:robot_session.enter_robot_session_ack.pre_questions)
  return pre_questions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question >&
enter_robot_session_ack::pre_questions() const {
  // @@protoc_insertion_point(field_list:robot_session.enter_robot_session_ack.pre_questions)
  return pre_questions_;
}

// -------------------------------------------------------------------

// robot_single_msg_req

// uint32 msg_type = 1;
inline void robot_single_msg_req::clear_msg_type() {
  msg_type_ = 0u;
}
inline ::google::protobuf::uint32 robot_single_msg_req::msg_type() const {
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_req.msg_type)
  return msg_type_;
}
inline void robot_single_msg_req::set_msg_type(::google::protobuf::uint32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:robot_session.robot_single_msg_req.msg_type)
}

// bytes msg = 2;
inline void robot_single_msg_req::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& robot_single_msg_req::msg() const {
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_req.msg)
  return msg_.GetNoArena();
}
inline void robot_single_msg_req::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.robot_single_msg_req.msg)
}
#if LANG_CXX11
inline void robot_single_msg_req::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.robot_single_msg_req.msg)
}
#endif
inline void robot_single_msg_req::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.robot_single_msg_req.msg)
}
inline void robot_single_msg_req::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.robot_single_msg_req.msg)
}
inline ::std::string* robot_single_msg_req::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.robot_single_msg_req.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* robot_single_msg_req::release_msg() {
  // @@protoc_insertion_point(field_release:robot_session.robot_single_msg_req.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void robot_single_msg_req::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:robot_session.robot_single_msg_req.msg)
}

// uint64 msg_id = 3;
inline void robot_single_msg_req::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 robot_single_msg_req::msg_id() const {
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_req.msg_id)
  return msg_id_;
}
inline void robot_single_msg_req::set_msg_id(::google::protobuf::uint64 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:robot_session.robot_single_msg_req.msg_id)
}

// uint32 send_time = 4;
inline void robot_single_msg_req::clear_send_time() {
  send_time_ = 0u;
}
inline ::google::protobuf::uint32 robot_single_msg_req::send_time() const {
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_req.send_time)
  return send_time_;
}
inline void robot_single_msg_req::set_send_time(::google::protobuf::uint32 value) {
  
  send_time_ = value;
  // @@protoc_insertion_point(field_set:robot_session.robot_single_msg_req.send_time)
}

// -------------------------------------------------------------------

// robot_single_msg_ack

// .common.errorinfo error = 1;
inline bool robot_single_msg_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::common::errorinfo& robot_single_msg_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& robot_single_msg_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* robot_single_msg_ack::release_error() {
  // @@protoc_insertion_point(field_release:robot_session.robot_single_msg_ack.error)
  
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* robot_single_msg_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robot_session.robot_single_msg_ack.error)
  return error_;
}
inline void robot_single_msg_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:robot_session.robot_single_msg_ack.error)
}

// uint64 msg_id = 2;
inline void robot_single_msg_ack::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 robot_single_msg_ack::msg_id() const {
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_ack.msg_id)
  return msg_id_;
}
inline void robot_single_msg_ack::set_msg_id(::google::protobuf::uint64 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:robot_session.robot_single_msg_ack.msg_id)
}

// uint32 send_time = 3;
inline void robot_single_msg_ack::clear_send_time() {
  send_time_ = 0u;
}
inline ::google::protobuf::uint32 robot_single_msg_ack::send_time() const {
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_ack.send_time)
  return send_time_;
}
inline void robot_single_msg_ack::set_send_time(::google::protobuf::uint32 value) {
  
  send_time_ = value;
  // @@protoc_insertion_point(field_set:robot_session.robot_single_msg_ack.send_time)
}

// uint32 msg_type = 4;
inline void robot_single_msg_ack::clear_msg_type() {
  msg_type_ = 0u;
}
inline ::google::protobuf::uint32 robot_single_msg_ack::msg_type() const {
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_ack.msg_type)
  return msg_type_;
}
inline void robot_single_msg_ack::set_msg_type(::google::protobuf::uint32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:robot_session.robot_single_msg_ack.msg_type)
}

// bytes msg = 5;
inline void robot_single_msg_ack::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& robot_single_msg_ack::msg() const {
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_ack.msg)
  return msg_.GetNoArena();
}
inline void robot_single_msg_ack::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.robot_single_msg_ack.msg)
}
#if LANG_CXX11
inline void robot_single_msg_ack::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.robot_single_msg_ack.msg)
}
#endif
inline void robot_single_msg_ack::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.robot_single_msg_ack.msg)
}
inline void robot_single_msg_ack::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.robot_single_msg_ack.msg)
}
inline ::std::string* robot_single_msg_ack::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.robot_single_msg_ack.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* robot_single_msg_ack::release_msg() {
  // @@protoc_insertion_point(field_release:robot_session.robot_single_msg_ack.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void robot_single_msg_ack::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:robot_session.robot_single_msg_ack.msg)
}

// uint32 msg_template = 6;
inline void robot_single_msg_ack::clear_msg_template() {
  msg_template_ = 0u;
}
inline ::google::protobuf::uint32 robot_single_msg_ack::msg_template() const {
  // @@protoc_insertion_point(field_get:robot_session.robot_single_msg_ack.msg_template)
  return msg_template_;
}
inline void robot_single_msg_ack::set_msg_template(::google::protobuf::uint32 value) {
  
  msg_template_ = value;
  // @@protoc_insertion_point(field_set:robot_session.robot_single_msg_ack.msg_template)
}

// -------------------------------------------------------------------

// get_robot_pre_question_list_req

// uint32 question_type = 1;
inline void get_robot_pre_question_list_req::clear_question_type() {
  question_type_ = 0u;
}
inline ::google::protobuf::uint32 get_robot_pre_question_list_req::question_type() const {
  // @@protoc_insertion_point(field_get:robot_session.get_robot_pre_question_list_req.question_type)
  return question_type_;
}
inline void get_robot_pre_question_list_req::set_question_type(::google::protobuf::uint32 value) {
  
  question_type_ = value;
  // @@protoc_insertion_point(field_set:robot_session.get_robot_pre_question_list_req.question_type)
}

// uint32 answer_template = 2;
inline void get_robot_pre_question_list_req::clear_answer_template() {
  answer_template_ = 0u;
}
inline ::google::protobuf::uint32 get_robot_pre_question_list_req::answer_template() const {
  // @@protoc_insertion_point(field_get:robot_session.get_robot_pre_question_list_req.answer_template)
  return answer_template_;
}
inline void get_robot_pre_question_list_req::set_answer_template(::google::protobuf::uint32 value) {
  
  answer_template_ = value;
  // @@protoc_insertion_point(field_set:robot_session.get_robot_pre_question_list_req.answer_template)
}

// bytes search_words = 3;
inline void get_robot_pre_question_list_req::clear_search_words() {
  search_words_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& get_robot_pre_question_list_req::search_words() const {
  // @@protoc_insertion_point(field_get:robot_session.get_robot_pre_question_list_req.search_words)
  return search_words_.GetNoArena();
}
inline void get_robot_pre_question_list_req::set_search_words(const ::std::string& value) {
  
  search_words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.get_robot_pre_question_list_req.search_words)
}
#if LANG_CXX11
inline void get_robot_pre_question_list_req::set_search_words(::std::string&& value) {
  
  search_words_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.get_robot_pre_question_list_req.search_words)
}
#endif
inline void get_robot_pre_question_list_req::set_search_words(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  search_words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.get_robot_pre_question_list_req.search_words)
}
inline void get_robot_pre_question_list_req::set_search_words(const void* value, size_t size) {
  
  search_words_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.get_robot_pre_question_list_req.search_words)
}
inline ::std::string* get_robot_pre_question_list_req::mutable_search_words() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.get_robot_pre_question_list_req.search_words)
  return search_words_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* get_robot_pre_question_list_req::release_search_words() {
  // @@protoc_insertion_point(field_release:robot_session.get_robot_pre_question_list_req.search_words)
  
  return search_words_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void get_robot_pre_question_list_req::set_allocated_search_words(::std::string* search_words) {
  if (search_words != NULL) {
    
  } else {
    
  }
  search_words_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_words);
  // @@protoc_insertion_point(field_set_allocated:robot_session.get_robot_pre_question_list_req.search_words)
}

// uint32 page = 4;
inline void get_robot_pre_question_list_req::clear_page() {
  page_ = 0u;
}
inline ::google::protobuf::uint32 get_robot_pre_question_list_req::page() const {
  // @@protoc_insertion_point(field_get:robot_session.get_robot_pre_question_list_req.page)
  return page_;
}
inline void get_robot_pre_question_list_req::set_page(::google::protobuf::uint32 value) {
  
  page_ = value;
  // @@protoc_insertion_point(field_set:robot_session.get_robot_pre_question_list_req.page)
}

// -------------------------------------------------------------------

// get_robot_pre_question_list_ack

// .common.errorinfo error = 1;
inline bool get_robot_pre_question_list_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::common::errorinfo& get_robot_pre_question_list_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& get_robot_pre_question_list_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:robot_session.get_robot_pre_question_list_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* get_robot_pre_question_list_ack::release_error() {
  // @@protoc_insertion_point(field_release:robot_session.get_robot_pre_question_list_ack.error)
  
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* get_robot_pre_question_list_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robot_session.get_robot_pre_question_list_ack.error)
  return error_;
}
inline void get_robot_pre_question_list_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:robot_session.get_robot_pre_question_list_ack.error)
}

// repeated .robot_session.pre_question pre_questions = 2;
inline int get_robot_pre_question_list_ack::pre_questions_size() const {
  return pre_questions_.size();
}
inline void get_robot_pre_question_list_ack::clear_pre_questions() {
  pre_questions_.Clear();
}
inline ::robot_session::pre_question* get_robot_pre_question_list_ack::mutable_pre_questions(int index) {
  // @@protoc_insertion_point(field_mutable:robot_session.get_robot_pre_question_list_ack.pre_questions)
  return pre_questions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question >*
get_robot_pre_question_list_ack::mutable_pre_questions() {
  // @@protoc_insertion_point(field_mutable_list:robot_session.get_robot_pre_question_list_ack.pre_questions)
  return &pre_questions_;
}
inline const ::robot_session::pre_question& get_robot_pre_question_list_ack::pre_questions(int index) const {
  // @@protoc_insertion_point(field_get:robot_session.get_robot_pre_question_list_ack.pre_questions)
  return pre_questions_.Get(index);
}
inline ::robot_session::pre_question* get_robot_pre_question_list_ack::add_pre_questions() {
  // @@protoc_insertion_point(field_add:robot_session.get_robot_pre_question_list_ack.pre_questions)
  return pre_questions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robot_session::pre_question >&
get_robot_pre_question_list_ack::pre_questions() const {
  // @@protoc_insertion_point(field_list:robot_session.get_robot_pre_question_list_ack.pre_questions)
  return pre_questions_;
}

// uint32 total_num = 3;
inline void get_robot_pre_question_list_ack::clear_total_num() {
  total_num_ = 0u;
}
inline ::google::protobuf::uint32 get_robot_pre_question_list_ack::total_num() const {
  // @@protoc_insertion_point(field_get:robot_session.get_robot_pre_question_list_ack.total_num)
  return total_num_;
}
inline void get_robot_pre_question_list_ack::set_total_num(::google::protobuf::uint32 value) {
  
  total_num_ = value;
  // @@protoc_insertion_point(field_set:robot_session.get_robot_pre_question_list_ack.total_num)
}

// -------------------------------------------------------------------

// inquery_robot_pre_question_req

// uint64 question_id = 1;
inline void inquery_robot_pre_question_req::clear_question_id() {
  question_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 inquery_robot_pre_question_req::question_id() const {
  // @@protoc_insertion_point(field_get:robot_session.inquery_robot_pre_question_req.question_id)
  return question_id_;
}
inline void inquery_robot_pre_question_req::set_question_id(::google::protobuf::uint64 value) {
  
  question_id_ = value;
  // @@protoc_insertion_point(field_set:robot_session.inquery_robot_pre_question_req.question_id)
}

// -------------------------------------------------------------------

// inquery_robot_pre_question_ack

// .common.errorinfo error = 1;
inline bool inquery_robot_pre_question_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::common::errorinfo& inquery_robot_pre_question_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& inquery_robot_pre_question_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:robot_session.inquery_robot_pre_question_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* inquery_robot_pre_question_ack::release_error() {
  // @@protoc_insertion_point(field_release:robot_session.inquery_robot_pre_question_ack.error)
  
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* inquery_robot_pre_question_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robot_session.inquery_robot_pre_question_ack.error)
  return error_;
}
inline void inquery_robot_pre_question_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:robot_session.inquery_robot_pre_question_ack.error)
}

// bytes answer = 2;
inline void inquery_robot_pre_question_ack::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& inquery_robot_pre_question_ack::answer() const {
  // @@protoc_insertion_point(field_get:robot_session.inquery_robot_pre_question_ack.answer)
  return answer_.GetNoArena();
}
inline void inquery_robot_pre_question_ack::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.inquery_robot_pre_question_ack.answer)
}
#if LANG_CXX11
inline void inquery_robot_pre_question_ack::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.inquery_robot_pre_question_ack.answer)
}
#endif
inline void inquery_robot_pre_question_ack::set_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.inquery_robot_pre_question_ack.answer)
}
inline void inquery_robot_pre_question_ack::set_answer(const void* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.inquery_robot_pre_question_ack.answer)
}
inline ::std::string* inquery_robot_pre_question_ack::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.inquery_robot_pre_question_ack.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* inquery_robot_pre_question_ack::release_answer() {
  // @@protoc_insertion_point(field_release:robot_session.inquery_robot_pre_question_ack.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void inquery_robot_pre_question_ack::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:robot_session.inquery_robot_pre_question_ack.answer)
}

// uint32 answer_template = 3;
inline void inquery_robot_pre_question_ack::clear_answer_template() {
  answer_template_ = 0u;
}
inline ::google::protobuf::uint32 inquery_robot_pre_question_ack::answer_template() const {
  // @@protoc_insertion_point(field_get:robot_session.inquery_robot_pre_question_ack.answer_template)
  return answer_template_;
}
inline void inquery_robot_pre_question_ack::set_answer_template(::google::protobuf::uint32 value) {
  
  answer_template_ = value;
  // @@protoc_insertion_point(field_set:robot_session.inquery_robot_pre_question_ack.answer_template)
}

// -------------------------------------------------------------------

// edit_pre_question

// uint64 question_id = 1;
inline void edit_pre_question::clear_question_id() {
  question_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 edit_pre_question::question_id() const {
  // @@protoc_insertion_point(field_get:robot_session.edit_pre_question.question_id)
  return question_id_;
}
inline void edit_pre_question::set_question_id(::google::protobuf::uint64 value) {
  
  question_id_ = value;
  // @@protoc_insertion_point(field_set:robot_session.edit_pre_question.question_id)
}

// bytes question = 2;
inline void edit_pre_question::clear_question() {
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& edit_pre_question::question() const {
  // @@protoc_insertion_point(field_get:robot_session.edit_pre_question.question)
  return question_.GetNoArena();
}
inline void edit_pre_question::set_question(const ::std::string& value) {
  
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.edit_pre_question.question)
}
#if LANG_CXX11
inline void edit_pre_question::set_question(::std::string&& value) {
  
  question_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.edit_pre_question.question)
}
#endif
inline void edit_pre_question::set_question(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.edit_pre_question.question)
}
inline void edit_pre_question::set_question(const void* value, size_t size) {
  
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.edit_pre_question.question)
}
inline ::std::string* edit_pre_question::mutable_question() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.edit_pre_question.question)
  return question_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* edit_pre_question::release_question() {
  // @@protoc_insertion_point(field_release:robot_session.edit_pre_question.question)
  
  return question_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void edit_pre_question::set_allocated_question(::std::string* question) {
  if (question != NULL) {
    
  } else {
    
  }
  question_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), question);
  // @@protoc_insertion_point(field_set_allocated:robot_session.edit_pre_question.question)
}

// bytes answer = 3;
inline void edit_pre_question::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& edit_pre_question::answer() const {
  // @@protoc_insertion_point(field_get:robot_session.edit_pre_question.answer)
  return answer_.GetNoArena();
}
inline void edit_pre_question::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_session.edit_pre_question.answer)
}
#if LANG_CXX11
inline void edit_pre_question::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:robot_session.edit_pre_question.answer)
}
#endif
inline void edit_pre_question::set_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_session.edit_pre_question.answer)
}
inline void edit_pre_question::set_answer(const void* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_session.edit_pre_question.answer)
}
inline ::std::string* edit_pre_question::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:robot_session.edit_pre_question.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* edit_pre_question::release_answer() {
  // @@protoc_insertion_point(field_release:robot_session.edit_pre_question.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void edit_pre_question::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:robot_session.edit_pre_question.answer)
}

// uint32 type = 4;
inline void edit_pre_question::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 edit_pre_question::type() const {
  // @@protoc_insertion_point(field_get:robot_session.edit_pre_question.type)
  return type_;
}
inline void edit_pre_question::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:robot_session.edit_pre_question.type)
}

// uint32 answer_template = 5;
inline void edit_pre_question::clear_answer_template() {
  answer_template_ = 0u;
}
inline ::google::protobuf::uint32 edit_pre_question::answer_template() const {
  // @@protoc_insertion_point(field_get:robot_session.edit_pre_question.answer_template)
  return answer_template_;
}
inline void edit_pre_question::set_answer_template(::google::protobuf::uint32 value) {
  
  answer_template_ = value;
  // @@protoc_insertion_point(field_set:robot_session.edit_pre_question.answer_template)
}

// -------------------------------------------------------------------

// edit_robot_pre_questions_req

// repeated .robot_session.edit_pre_question edit_pre_questions = 1;
inline int edit_robot_pre_questions_req::edit_pre_questions_size() const {
  return edit_pre_questions_.size();
}
inline void edit_robot_pre_questions_req::clear_edit_pre_questions() {
  edit_pre_questions_.Clear();
}
inline ::robot_session::edit_pre_question* edit_robot_pre_questions_req::mutable_edit_pre_questions(int index) {
  // @@protoc_insertion_point(field_mutable:robot_session.edit_robot_pre_questions_req.edit_pre_questions)
  return edit_pre_questions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robot_session::edit_pre_question >*
edit_robot_pre_questions_req::mutable_edit_pre_questions() {
  // @@protoc_insertion_point(field_mutable_list:robot_session.edit_robot_pre_questions_req.edit_pre_questions)
  return &edit_pre_questions_;
}
inline const ::robot_session::edit_pre_question& edit_robot_pre_questions_req::edit_pre_questions(int index) const {
  // @@protoc_insertion_point(field_get:robot_session.edit_robot_pre_questions_req.edit_pre_questions)
  return edit_pre_questions_.Get(index);
}
inline ::robot_session::edit_pre_question* edit_robot_pre_questions_req::add_edit_pre_questions() {
  // @@protoc_insertion_point(field_add:robot_session.edit_robot_pre_questions_req.edit_pre_questions)
  return edit_pre_questions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robot_session::edit_pre_question >&
edit_robot_pre_questions_req::edit_pre_questions() const {
  // @@protoc_insertion_point(field_list:robot_session.edit_robot_pre_questions_req.edit_pre_questions)
  return edit_pre_questions_;
}

// uint32 update_type = 2;
inline void edit_robot_pre_questions_req::clear_update_type() {
  update_type_ = 0u;
}
inline ::google::protobuf::uint32 edit_robot_pre_questions_req::update_type() const {
  // @@protoc_insertion_point(field_get:robot_session.edit_robot_pre_questions_req.update_type)
  return update_type_;
}
inline void edit_robot_pre_questions_req::set_update_type(::google::protobuf::uint32 value) {
  
  update_type_ = value;
  // @@protoc_insertion_point(field_set:robot_session.edit_robot_pre_questions_req.update_type)
}

// -------------------------------------------------------------------

// edit_robot_pre_questions_ack

// .common.errorinfo error = 1;
inline bool edit_robot_pre_questions_ack::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::common::errorinfo& edit_robot_pre_questions_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& edit_robot_pre_questions_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:robot_session.edit_robot_pre_questions_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* edit_robot_pre_questions_ack::release_error() {
  // @@protoc_insertion_point(field_release:robot_session.edit_robot_pre_questions_ack.error)
  
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* edit_robot_pre_questions_ack::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robot_session.edit_robot_pre_questions_ack.error)
  return error_;
}
inline void edit_robot_pre_questions_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:robot_session.edit_robot_pre_questions_ack.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robot_session

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_robot_5fsession_2eproto
