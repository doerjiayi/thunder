// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_internal.proto

#ifndef PROTOBUF_INCLUDED_server_5finternal_2eproto
#define PROTOBUF_INCLUDED_server_5finternal_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_server_5finternal_2eproto 

namespace protobuf_server_5finternal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_server_5finternal_2eproto
class group_notify;
class group_notifyDefaultTypeInternal;
extern group_notifyDefaultTypeInternal _group_notify_default_instance_;
class offical_specified_notify;
class offical_specified_notifyDefaultTypeInternal;
extern offical_specified_notifyDefaultTypeInternal _offical_specified_notify_default_instance_;
class offical_userset_notify;
class offical_userset_notifyDefaultTypeInternal;
extern offical_userset_notifyDefaultTypeInternal _offical_userset_notify_default_instance_;
class personal_notify;
class personal_notifyDefaultTypeInternal;
extern personal_notifyDefaultTypeInternal _personal_notify_default_instance_;
class user_register;
class user_registerDefaultTypeInternal;
extern user_registerDefaultTypeInternal _user_register_default_instance_;
class user_register_ack;
class user_register_ackDefaultTypeInternal;
extern user_register_ackDefaultTypeInternal _user_register_ack_default_instance_;
namespace google {
namespace protobuf {
template<> ::group_notify* Arena::CreateMaybeMessage<::group_notify>(Arena*);
template<> ::offical_specified_notify* Arena::CreateMaybeMessage<::offical_specified_notify>(Arena*);
template<> ::offical_userset_notify* Arena::CreateMaybeMessage<::offical_userset_notify>(Arena*);
template<> ::personal_notify* Arena::CreateMaybeMessage<::personal_notify>(Arena*);
template<> ::user_register* Arena::CreateMaybeMessage<::user_register>(Arena*);
template<> ::user_register_ack* Arena::CreateMaybeMessage<::user_register_ack>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class personal_notify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:personal_notify) */ {
 public:
  personal_notify();
  virtual ~personal_notify();

  personal_notify(const personal_notify& from);

  inline personal_notify& operator=(const personal_notify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  personal_notify(personal_notify&& from) noexcept
    : personal_notify() {
    *this = ::std::move(from);
  }

  inline personal_notify& operator=(personal_notify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const personal_notify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const personal_notify* internal_default_instance() {
    return reinterpret_cast<const personal_notify*>(
               &_personal_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(personal_notify* other);
  friend void swap(personal_notify& a, personal_notify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline personal_notify* New() const final {
    return CreateMaybeMessage<personal_notify>(NULL);
  }

  personal_notify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<personal_notify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const personal_notify& from);
  void MergeFrom(const personal_notify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(personal_notify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 imid = 1;
  bool has_imid() const;
  void clear_imid();
  static const int kImidFieldNumber = 1;
  ::google::protobuf::uint32 imid() const;
  void set_imid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:personal_notify)
 private:
  void set_has_imid();
  void clear_has_imid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 imid_;
  friend struct ::protobuf_server_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class group_notify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:group_notify) */ {
 public:
  group_notify();
  virtual ~group_notify();

  group_notify(const group_notify& from);

  inline group_notify& operator=(const group_notify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  group_notify(group_notify&& from) noexcept
    : group_notify() {
    *this = ::std::move(from);
  }

  inline group_notify& operator=(group_notify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const group_notify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const group_notify* internal_default_instance() {
    return reinterpret_cast<const group_notify*>(
               &_group_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(group_notify* other);
  friend void swap(group_notify& a, group_notify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline group_notify* New() const final {
    return CreateMaybeMessage<group_notify>(NULL);
  }

  group_notify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<group_notify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const group_notify& from);
  void MergeFrom(const group_notify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(group_notify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 imid = 1;
  bool has_imid() const;
  void clear_imid();
  static const int kImidFieldNumber = 1;
  ::google::protobuf::uint32 imid() const;
  void set_imid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:group_notify)
 private:
  void set_has_imid();
  void clear_has_imid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 imid_;
  friend struct ::protobuf_server_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offical_userset_notify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:offical_userset_notify) */ {
 public:
  offical_userset_notify();
  virtual ~offical_userset_notify();

  offical_userset_notify(const offical_userset_notify& from);

  inline offical_userset_notify& operator=(const offical_userset_notify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offical_userset_notify(offical_userset_notify&& from) noexcept
    : offical_userset_notify() {
    *this = ::std::move(from);
  }

  inline offical_userset_notify& operator=(offical_userset_notify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_userset_notify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offical_userset_notify* internal_default_instance() {
    return reinterpret_cast<const offical_userset_notify*>(
               &_offical_userset_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(offical_userset_notify* other);
  friend void swap(offical_userset_notify& a, offical_userset_notify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offical_userset_notify* New() const final {
    return CreateMaybeMessage<offical_userset_notify>(NULL);
  }

  offical_userset_notify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offical_userset_notify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offical_userset_notify& from);
  void MergeFrom(const offical_userset_notify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offical_userset_notify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 imid = 1;
  bool has_imid() const;
  void clear_imid();
  static const int kImidFieldNumber = 1;
  ::google::protobuf::uint32 imid() const;
  void set_imid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:offical_userset_notify)
 private:
  void set_has_imid();
  void clear_has_imid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 imid_;
  friend struct ::protobuf_server_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class offical_specified_notify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:offical_specified_notify) */ {
 public:
  offical_specified_notify();
  virtual ~offical_specified_notify();

  offical_specified_notify(const offical_specified_notify& from);

  inline offical_specified_notify& operator=(const offical_specified_notify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  offical_specified_notify(offical_specified_notify&& from) noexcept
    : offical_specified_notify() {
    *this = ::std::move(from);
  }

  inline offical_specified_notify& operator=(offical_specified_notify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_specified_notify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const offical_specified_notify* internal_default_instance() {
    return reinterpret_cast<const offical_specified_notify*>(
               &_offical_specified_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(offical_specified_notify* other);
  friend void swap(offical_specified_notify& a, offical_specified_notify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline offical_specified_notify* New() const final {
    return CreateMaybeMessage<offical_specified_notify>(NULL);
  }

  offical_specified_notify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<offical_specified_notify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const offical_specified_notify& from);
  void MergeFrom(const offical_specified_notify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(offical_specified_notify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 imid = 1;
  bool has_imid() const;
  void clear_imid();
  static const int kImidFieldNumber = 1;
  ::google::protobuf::uint32 imid() const;
  void set_imid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:offical_specified_notify)
 private:
  void set_has_imid();
  void clear_has_imid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 imid_;
  friend struct ::protobuf_server_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_register : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:user_register) */ {
 public:
  user_register();
  virtual ~user_register();

  user_register(const user_register& from);

  inline user_register& operator=(const user_register& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  user_register(user_register&& from) noexcept
    : user_register() {
    *this = ::std::move(from);
  }

  inline user_register& operator=(user_register&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_register& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_register* internal_default_instance() {
    return reinterpret_cast<const user_register*>(
               &_user_register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(user_register* other);
  friend void swap(user_register& a, user_register& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline user_register* New() const final {
    return CreateMaybeMessage<user_register>(NULL);
  }

  user_register* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<user_register>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const user_register& from);
  void MergeFrom(const user_register& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_register* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes guid = 2;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 2;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const void* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // optional bytes nickname = 3;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional bytes avatar = 4;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // optional string mobile = 5;
  bool has_mobile() const;
  void clear_mobile();
  static const int kMobileFieldNumber = 5;
  const ::std::string& mobile() const;
  void set_mobile(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile(::std::string&& value);
  #endif
  void set_mobile(const char* value);
  void set_mobile(const char* value, size_t size);
  ::std::string* mutable_mobile();
  ::std::string* release_mobile();
  void set_allocated_mobile(::std::string* mobile);

  // optional bytes introduction = 6;
  bool has_introduction() const;
  void clear_introduction();
  static const int kIntroductionFieldNumber = 6;
  const ::std::string& introduction() const;
  void set_introduction(const ::std::string& value);
  #if LANG_CXX11
  void set_introduction(::std::string&& value);
  #endif
  void set_introduction(const char* value);
  void set_introduction(const void* value, size_t size);
  ::std::string* mutable_introduction();
  ::std::string* release_introduction();
  void set_allocated_introduction(::std::string* introduction);

  // optional bytes company = 10;
  bool has_company() const;
  void clear_company();
  static const int kCompanyFieldNumber = 10;
  const ::std::string& company() const;
  void set_company(const ::std::string& value);
  #if LANG_CXX11
  void set_company(::std::string&& value);
  #endif
  void set_company(const char* value);
  void set_company(const void* value, size_t size);
  ::std::string* mutable_company();
  ::std::string* release_company();
  void set_allocated_company(::std::string* company);

  // optional bytes occupation = 11;
  bool has_occupation() const;
  void clear_occupation();
  static const int kOccupationFieldNumber = 11;
  const ::std::string& occupation() const;
  void set_occupation(const ::std::string& value);
  #if LANG_CXX11
  void set_occupation(::std::string&& value);
  #endif
  void set_occupation(const char* value);
  void set_occupation(const void* value, size_t size);
  ::std::string* mutable_occupation();
  ::std::string* release_occupation();
  void set_allocated_occupation(::std::string* occupation);

  // optional bytes industry = 12;
  bool has_industry() const;
  void clear_industry();
  static const int kIndustryFieldNumber = 12;
  const ::std::string& industry() const;
  void set_industry(const ::std::string& value);
  #if LANG_CXX11
  void set_industry(::std::string&& value);
  #endif
  void set_industry(const char* value);
  void set_industry(const void* value, size_t size);
  ::std::string* mutable_industry();
  ::std::string* release_industry();
  void set_allocated_industry(::std::string* industry);

  // optional bytes area = 13;
  bool has_area() const;
  void clear_area();
  static const int kAreaFieldNumber = 13;
  const ::std::string& area() const;
  void set_area(const ::std::string& value);
  #if LANG_CXX11
  void set_area(::std::string&& value);
  #endif
  void set_area(const char* value);
  void set_area(const void* value, size_t size);
  ::std::string* mutable_area();
  ::std::string* release_area();
  void set_allocated_area(::std::string* area);

  // optional bytes password = 14;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 14;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // required uint32 user_type = 1;
  bool has_user_type() const;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 1;
  ::google::protobuf::uint32 user_type() const;
  void set_user_type(::google::protobuf::uint32 value);

  // optional int32 gender = 7;
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 7;
  ::google::protobuf::int32 gender() const;
  void set_gender(::google::protobuf::int32 value);

  // optional uint64 add_identity = 8;
  bool has_add_identity() const;
  void clear_add_identity();
  static const int kAddIdentityFieldNumber = 8;
  ::google::protobuf::uint64 add_identity() const;
  void set_add_identity(::google::protobuf::uint64 value);

  // optional uint64 del_identity = 9;
  bool has_del_identity() const;
  void clear_del_identity();
  static const int kDelIdentityFieldNumber = 9;
  ::google::protobuf::uint64 del_identity() const;
  void set_del_identity(::google::protobuf::uint64 value);

  // optional uint32 imid = 15;
  bool has_imid() const;
  void clear_imid();
  static const int kImidFieldNumber = 15;
  ::google::protobuf::uint32 imid() const;
  void set_imid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_register)
 private:
  void set_has_user_type();
  void clear_has_user_type();
  void set_has_guid();
  void clear_has_guid();
  void set_has_nickname();
  void clear_has_nickname();
  void set_has_avatar();
  void clear_has_avatar();
  void set_has_mobile();
  void clear_has_mobile();
  void set_has_introduction();
  void clear_has_introduction();
  void set_has_gender();
  void clear_has_gender();
  void set_has_add_identity();
  void clear_has_add_identity();
  void set_has_del_identity();
  void clear_has_del_identity();
  void set_has_company();
  void clear_has_company();
  void set_has_occupation();
  void clear_has_occupation();
  void set_has_industry();
  void clear_has_industry();
  void set_has_area();
  void clear_has_area();
  void set_has_password();
  void clear_has_password();
  void set_has_imid();
  void clear_has_imid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::internal::ArenaStringPtr mobile_;
  ::google::protobuf::internal::ArenaStringPtr introduction_;
  ::google::protobuf::internal::ArenaStringPtr company_;
  ::google::protobuf::internal::ArenaStringPtr occupation_;
  ::google::protobuf::internal::ArenaStringPtr industry_;
  ::google::protobuf::internal::ArenaStringPtr area_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint32 user_type_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::uint64 add_identity_;
  ::google::protobuf::uint64 del_identity_;
  ::google::protobuf::uint32 imid_;
  friend struct ::protobuf_server_5finternal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_register_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:user_register_ack) */ {
 public:
  user_register_ack();
  virtual ~user_register_ack();

  user_register_ack(const user_register_ack& from);

  inline user_register_ack& operator=(const user_register_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  user_register_ack(user_register_ack&& from) noexcept
    : user_register_ack() {
    *this = ::std::move(from);
  }

  inline user_register_ack& operator=(user_register_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_register_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_register_ack* internal_default_instance() {
    return reinterpret_cast<const user_register_ack*>(
               &_user_register_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(user_register_ack* other);
  friend void swap(user_register_ack& a, user_register_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline user_register_ack* New() const final {
    return CreateMaybeMessage<user_register_ack>(NULL);
  }

  user_register_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<user_register_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const user_register_ack& from);
  void MergeFrom(const user_register_ack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_register_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.errorinfo error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::common::errorinfo& _internal_error() const;
  public:
  const ::common::errorinfo& error() const;
  ::common::errorinfo* release_error();
  ::common::errorinfo* mutable_error();
  void set_allocated_error(::common::errorinfo* error);

  // optional uint32 imid = 2;
  bool has_imid() const;
  void clear_imid();
  static const int kImidFieldNumber = 2;
  ::google::protobuf::uint32 imid() const;
  void set_imid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_register_ack)
 private:
  void set_has_error();
  void clear_has_error();
  void set_has_imid();
  void clear_has_imid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::common::errorinfo* error_;
  ::google::protobuf::uint32 imid_;
  friend struct ::protobuf_server_5finternal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// personal_notify

// required uint32 imid = 1;
inline bool personal_notify::has_imid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void personal_notify::set_has_imid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void personal_notify::clear_has_imid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void personal_notify::clear_imid() {
  imid_ = 0u;
  clear_has_imid();
}
inline ::google::protobuf::uint32 personal_notify::imid() const {
  // @@protoc_insertion_point(field_get:personal_notify.imid)
  return imid_;
}
inline void personal_notify::set_imid(::google::protobuf::uint32 value) {
  set_has_imid();
  imid_ = value;
  // @@protoc_insertion_point(field_set:personal_notify.imid)
}

// -------------------------------------------------------------------

// group_notify

// required uint32 imid = 1;
inline bool group_notify::has_imid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void group_notify::set_has_imid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void group_notify::clear_has_imid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void group_notify::clear_imid() {
  imid_ = 0u;
  clear_has_imid();
}
inline ::google::protobuf::uint32 group_notify::imid() const {
  // @@protoc_insertion_point(field_get:group_notify.imid)
  return imid_;
}
inline void group_notify::set_imid(::google::protobuf::uint32 value) {
  set_has_imid();
  imid_ = value;
  // @@protoc_insertion_point(field_set:group_notify.imid)
}

// -------------------------------------------------------------------

// offical_userset_notify

// required uint32 imid = 1;
inline bool offical_userset_notify::has_imid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_userset_notify::set_has_imid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_userset_notify::clear_has_imid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_userset_notify::clear_imid() {
  imid_ = 0u;
  clear_has_imid();
}
inline ::google::protobuf::uint32 offical_userset_notify::imid() const {
  // @@protoc_insertion_point(field_get:offical_userset_notify.imid)
  return imid_;
}
inline void offical_userset_notify::set_imid(::google::protobuf::uint32 value) {
  set_has_imid();
  imid_ = value;
  // @@protoc_insertion_point(field_set:offical_userset_notify.imid)
}

// -------------------------------------------------------------------

// offical_specified_notify

// required uint32 imid = 1;
inline bool offical_specified_notify::has_imid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_specified_notify::set_has_imid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_specified_notify::clear_has_imid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_specified_notify::clear_imid() {
  imid_ = 0u;
  clear_has_imid();
}
inline ::google::protobuf::uint32 offical_specified_notify::imid() const {
  // @@protoc_insertion_point(field_get:offical_specified_notify.imid)
  return imid_;
}
inline void offical_specified_notify::set_imid(::google::protobuf::uint32 value) {
  set_has_imid();
  imid_ = value;
  // @@protoc_insertion_point(field_set:offical_specified_notify.imid)
}

// -------------------------------------------------------------------

// user_register

// required uint32 user_type = 1;
inline bool user_register::has_user_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void user_register::set_has_user_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void user_register::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void user_register::clear_user_type() {
  user_type_ = 0u;
  clear_has_user_type();
}
inline ::google::protobuf::uint32 user_register::user_type() const {
  // @@protoc_insertion_point(field_get:user_register.user_type)
  return user_type_;
}
inline void user_register::set_user_type(::google::protobuf::uint32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:user_register.user_type)
}

// required bytes guid = 2;
inline bool user_register::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_register::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_register::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_register::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guid();
}
inline const ::std::string& user_register::guid() const {
  // @@protoc_insertion_point(field_get:user_register.guid)
  return guid_.GetNoArena();
}
inline void user_register::set_guid(const ::std::string& value) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.guid)
}
#if LANG_CXX11
inline void user_register::set_guid(::std::string&& value) {
  set_has_guid();
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.guid)
}
#endif
inline void user_register::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.guid)
}
inline void user_register::set_guid(const void* value, size_t size) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.guid)
}
inline ::std::string* user_register::mutable_guid() {
  set_has_guid();
  // @@protoc_insertion_point(field_mutable:user_register.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_guid() {
  // @@protoc_insertion_point(field_release:user_register.guid)
  if (!has_guid()) {
    return NULL;
  }
  clear_has_guid();
  return guid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    set_has_guid();
  } else {
    clear_has_guid();
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:user_register.guid)
}

// optional bytes nickname = 3;
inline bool user_register::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_register::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_register::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_register::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& user_register::nickname() const {
  // @@protoc_insertion_point(field_get:user_register.nickname)
  return nickname_.GetNoArena();
}
inline void user_register::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.nickname)
}
#if LANG_CXX11
inline void user_register::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.nickname)
}
#endif
inline void user_register::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.nickname)
}
inline void user_register::set_nickname(const void* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.nickname)
}
inline ::std::string* user_register::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:user_register.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_nickname() {
  // @@protoc_insertion_point(field_release:user_register.nickname)
  if (!has_nickname()) {
    return NULL;
  }
  clear_has_nickname();
  return nickname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:user_register.nickname)
}

// optional bytes avatar = 4;
inline bool user_register::has_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_register::set_has_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_register::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_register::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar();
}
inline const ::std::string& user_register::avatar() const {
  // @@protoc_insertion_point(field_get:user_register.avatar)
  return avatar_.GetNoArena();
}
inline void user_register::set_avatar(const ::std::string& value) {
  set_has_avatar();
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.avatar)
}
#if LANG_CXX11
inline void user_register::set_avatar(::std::string&& value) {
  set_has_avatar();
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.avatar)
}
#endif
inline void user_register::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_avatar();
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.avatar)
}
inline void user_register::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.avatar)
}
inline ::std::string* user_register::mutable_avatar() {
  set_has_avatar();
  // @@protoc_insertion_point(field_mutable:user_register.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_avatar() {
  // @@protoc_insertion_point(field_release:user_register.avatar)
  if (!has_avatar()) {
    return NULL;
  }
  clear_has_avatar();
  return avatar_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:user_register.avatar)
}

// optional string mobile = 5;
inline bool user_register::has_mobile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_register::set_has_mobile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_register::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_register::clear_mobile() {
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile();
}
inline const ::std::string& user_register::mobile() const {
  // @@protoc_insertion_point(field_get:user_register.mobile)
  return mobile_.GetNoArena();
}
inline void user_register::set_mobile(const ::std::string& value) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.mobile)
}
#if LANG_CXX11
inline void user_register::set_mobile(::std::string&& value) {
  set_has_mobile();
  mobile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.mobile)
}
#endif
inline void user_register::set_mobile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.mobile)
}
inline void user_register::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  mobile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.mobile)
}
inline ::std::string* user_register::mutable_mobile() {
  set_has_mobile();
  // @@protoc_insertion_point(field_mutable:user_register.mobile)
  return mobile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_mobile() {
  // @@protoc_insertion_point(field_release:user_register.mobile)
  if (!has_mobile()) {
    return NULL;
  }
  clear_has_mobile();
  return mobile_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_mobile(::std::string* mobile) {
  if (mobile != NULL) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  mobile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile);
  // @@protoc_insertion_point(field_set_allocated:user_register.mobile)
}

// optional bytes introduction = 6;
inline bool user_register::has_introduction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_register::set_has_introduction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_register::clear_has_introduction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_register::clear_introduction() {
  introduction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_introduction();
}
inline const ::std::string& user_register::introduction() const {
  // @@protoc_insertion_point(field_get:user_register.introduction)
  return introduction_.GetNoArena();
}
inline void user_register::set_introduction(const ::std::string& value) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.introduction)
}
#if LANG_CXX11
inline void user_register::set_introduction(::std::string&& value) {
  set_has_introduction();
  introduction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.introduction)
}
#endif
inline void user_register::set_introduction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.introduction)
}
inline void user_register::set_introduction(const void* value, size_t size) {
  set_has_introduction();
  introduction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.introduction)
}
inline ::std::string* user_register::mutable_introduction() {
  set_has_introduction();
  // @@protoc_insertion_point(field_mutable:user_register.introduction)
  return introduction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_introduction() {
  // @@protoc_insertion_point(field_release:user_register.introduction)
  if (!has_introduction()) {
    return NULL;
  }
  clear_has_introduction();
  return introduction_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_introduction(::std::string* introduction) {
  if (introduction != NULL) {
    set_has_introduction();
  } else {
    clear_has_introduction();
  }
  introduction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), introduction);
  // @@protoc_insertion_point(field_set_allocated:user_register.introduction)
}

// optional int32 gender = 7;
inline bool user_register::has_gender() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void user_register::set_has_gender() {
  _has_bits_[0] |= 0x00000800u;
}
inline void user_register::clear_has_gender() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void user_register::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 user_register::gender() const {
  // @@protoc_insertion_point(field_get:user_register.gender)
  return gender_;
}
inline void user_register::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:user_register.gender)
}

// optional uint64 add_identity = 8;
inline bool user_register::has_add_identity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void user_register::set_has_add_identity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void user_register::clear_has_add_identity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void user_register::clear_add_identity() {
  add_identity_ = GOOGLE_ULONGLONG(0);
  clear_has_add_identity();
}
inline ::google::protobuf::uint64 user_register::add_identity() const {
  // @@protoc_insertion_point(field_get:user_register.add_identity)
  return add_identity_;
}
inline void user_register::set_add_identity(::google::protobuf::uint64 value) {
  set_has_add_identity();
  add_identity_ = value;
  // @@protoc_insertion_point(field_set:user_register.add_identity)
}

// optional uint64 del_identity = 9;
inline bool user_register::has_del_identity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void user_register::set_has_del_identity() {
  _has_bits_[0] |= 0x00002000u;
}
inline void user_register::clear_has_del_identity() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void user_register::clear_del_identity() {
  del_identity_ = GOOGLE_ULONGLONG(0);
  clear_has_del_identity();
}
inline ::google::protobuf::uint64 user_register::del_identity() const {
  // @@protoc_insertion_point(field_get:user_register.del_identity)
  return del_identity_;
}
inline void user_register::set_del_identity(::google::protobuf::uint64 value) {
  set_has_del_identity();
  del_identity_ = value;
  // @@protoc_insertion_point(field_set:user_register.del_identity)
}

// optional bytes company = 10;
inline bool user_register::has_company() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_register::set_has_company() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_register::clear_has_company() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_register::clear_company() {
  company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company();
}
inline const ::std::string& user_register::company() const {
  // @@protoc_insertion_point(field_get:user_register.company)
  return company_.GetNoArena();
}
inline void user_register::set_company(const ::std::string& value) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.company)
}
#if LANG_CXX11
inline void user_register::set_company(::std::string&& value) {
  set_has_company();
  company_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.company)
}
#endif
inline void user_register::set_company(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.company)
}
inline void user_register::set_company(const void* value, size_t size) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.company)
}
inline ::std::string* user_register::mutable_company() {
  set_has_company();
  // @@protoc_insertion_point(field_mutable:user_register.company)
  return company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_company() {
  // @@protoc_insertion_point(field_release:user_register.company)
  if (!has_company()) {
    return NULL;
  }
  clear_has_company();
  return company_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_company(::std::string* company) {
  if (company != NULL) {
    set_has_company();
  } else {
    clear_has_company();
  }
  company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company);
  // @@protoc_insertion_point(field_set_allocated:user_register.company)
}

// optional bytes occupation = 11;
inline bool user_register::has_occupation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_register::set_has_occupation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_register::clear_has_occupation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_register::clear_occupation() {
  occupation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_occupation();
}
inline const ::std::string& user_register::occupation() const {
  // @@protoc_insertion_point(field_get:user_register.occupation)
  return occupation_.GetNoArena();
}
inline void user_register::set_occupation(const ::std::string& value) {
  set_has_occupation();
  occupation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.occupation)
}
#if LANG_CXX11
inline void user_register::set_occupation(::std::string&& value) {
  set_has_occupation();
  occupation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.occupation)
}
#endif
inline void user_register::set_occupation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_occupation();
  occupation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.occupation)
}
inline void user_register::set_occupation(const void* value, size_t size) {
  set_has_occupation();
  occupation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.occupation)
}
inline ::std::string* user_register::mutable_occupation() {
  set_has_occupation();
  // @@protoc_insertion_point(field_mutable:user_register.occupation)
  return occupation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_occupation() {
  // @@protoc_insertion_point(field_release:user_register.occupation)
  if (!has_occupation()) {
    return NULL;
  }
  clear_has_occupation();
  return occupation_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_occupation(::std::string* occupation) {
  if (occupation != NULL) {
    set_has_occupation();
  } else {
    clear_has_occupation();
  }
  occupation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), occupation);
  // @@protoc_insertion_point(field_set_allocated:user_register.occupation)
}

// optional bytes industry = 12;
inline bool user_register::has_industry() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_register::set_has_industry() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_register::clear_has_industry() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_register::clear_industry() {
  industry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_industry();
}
inline const ::std::string& user_register::industry() const {
  // @@protoc_insertion_point(field_get:user_register.industry)
  return industry_.GetNoArena();
}
inline void user_register::set_industry(const ::std::string& value) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.industry)
}
#if LANG_CXX11
inline void user_register::set_industry(::std::string&& value) {
  set_has_industry();
  industry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.industry)
}
#endif
inline void user_register::set_industry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.industry)
}
inline void user_register::set_industry(const void* value, size_t size) {
  set_has_industry();
  industry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.industry)
}
inline ::std::string* user_register::mutable_industry() {
  set_has_industry();
  // @@protoc_insertion_point(field_mutable:user_register.industry)
  return industry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_industry() {
  // @@protoc_insertion_point(field_release:user_register.industry)
  if (!has_industry()) {
    return NULL;
  }
  clear_has_industry();
  return industry_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_industry(::std::string* industry) {
  if (industry != NULL) {
    set_has_industry();
  } else {
    clear_has_industry();
  }
  industry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), industry);
  // @@protoc_insertion_point(field_set_allocated:user_register.industry)
}

// optional bytes area = 13;
inline bool user_register::has_area() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_register::set_has_area() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_register::clear_has_area() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_register::clear_area() {
  area_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_area();
}
inline const ::std::string& user_register::area() const {
  // @@protoc_insertion_point(field_get:user_register.area)
  return area_.GetNoArena();
}
inline void user_register::set_area(const ::std::string& value) {
  set_has_area();
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.area)
}
#if LANG_CXX11
inline void user_register::set_area(::std::string&& value) {
  set_has_area();
  area_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.area)
}
#endif
inline void user_register::set_area(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_area();
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.area)
}
inline void user_register::set_area(const void* value, size_t size) {
  set_has_area();
  area_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.area)
}
inline ::std::string* user_register::mutable_area() {
  set_has_area();
  // @@protoc_insertion_point(field_mutable:user_register.area)
  return area_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_area() {
  // @@protoc_insertion_point(field_release:user_register.area)
  if (!has_area()) {
    return NULL;
  }
  clear_has_area();
  return area_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_area(::std::string* area) {
  if (area != NULL) {
    set_has_area();
  } else {
    clear_has_area();
  }
  area_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:user_register.area)
}

// optional bytes password = 14;
inline bool user_register::has_password() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void user_register::set_has_password() {
  _has_bits_[0] |= 0x00000200u;
}
inline void user_register::clear_has_password() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void user_register::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& user_register::password() const {
  // @@protoc_insertion_point(field_get:user_register.password)
  return password_.GetNoArena();
}
inline void user_register::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:user_register.password)
}
#if LANG_CXX11
inline void user_register::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:user_register.password)
}
#endif
inline void user_register::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:user_register.password)
}
inline void user_register::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:user_register.password)
}
inline ::std::string* user_register::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:user_register.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_register::release_password() {
  // @@protoc_insertion_point(field_release:user_register.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_register::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:user_register.password)
}

// optional uint32 imid = 15;
inline bool user_register::has_imid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void user_register::set_has_imid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void user_register::clear_has_imid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void user_register::clear_imid() {
  imid_ = 0u;
  clear_has_imid();
}
inline ::google::protobuf::uint32 user_register::imid() const {
  // @@protoc_insertion_point(field_get:user_register.imid)
  return imid_;
}
inline void user_register::set_imid(::google::protobuf::uint32 value) {
  set_has_imid();
  imid_ = value;
  // @@protoc_insertion_point(field_set:user_register.imid)
}

// -------------------------------------------------------------------

// user_register_ack

// optional .common.errorinfo error = 1;
inline bool user_register_ack::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_register_ack::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_register_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::common::errorinfo& user_register_ack::_internal_error() const {
  return *error_;
}
inline const ::common::errorinfo& user_register_ack::error() const {
  const ::common::errorinfo* p = error_;
  // @@protoc_insertion_point(field_get:user_register_ack.error)
  return p != NULL ? *p : *reinterpret_cast<const ::common::errorinfo*>(
      &::common::_errorinfo_default_instance_);
}
inline ::common::errorinfo* user_register_ack::release_error() {
  // @@protoc_insertion_point(field_release:user_register_ack.error)
  clear_has_error();
  ::common::errorinfo* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::common::errorinfo* user_register_ack::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::common::errorinfo>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:user_register_ack.error)
  return error_;
}
inline void user_register_ack::set_allocated_error(::common::errorinfo* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:user_register_ack.error)
}

// optional uint32 imid = 2;
inline bool user_register_ack::has_imid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_register_ack::set_has_imid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_register_ack::clear_has_imid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_register_ack::clear_imid() {
  imid_ = 0u;
  clear_has_imid();
}
inline ::google::protobuf::uint32 user_register_ack::imid() const {
  // @@protoc_insertion_point(field_get:user_register_ack.imid)
  return imid_;
}
inline void user_register_ack::set_imid(::google::protobuf::uint32 value) {
  set_has_imid();
  imid_ = value;
  // @@protoc_insertion_point(field_set:user_register_ack.imid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_server_5finternal_2eproto
