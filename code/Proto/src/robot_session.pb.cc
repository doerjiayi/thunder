// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_session.proto

#include "robot_session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_errorinfo;
}  // namespace protobuf_common_2eproto
namespace protobuf_robot_5fsession_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_edit_pre_question;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robot_5fsession_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pre_question;
}  // namespace protobuf_robot_5fsession_2eproto
namespace robot_session {
class pre_questionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pre_question>
      _instance;
} _pre_question_default_instance_;
class enter_robot_session_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<enter_robot_session_req>
      _instance;
} _enter_robot_session_req_default_instance_;
class enter_robot_session_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<enter_robot_session_ack>
      _instance;
} _enter_robot_session_ack_default_instance_;
class robot_single_msg_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<robot_single_msg_req>
      _instance;
} _robot_single_msg_req_default_instance_;
class robot_single_msg_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<robot_single_msg_ack>
      _instance;
} _robot_single_msg_ack_default_instance_;
class get_robot_pre_question_list_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<get_robot_pre_question_list_req>
      _instance;
} _get_robot_pre_question_list_req_default_instance_;
class get_robot_pre_question_list_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<get_robot_pre_question_list_ack>
      _instance;
} _get_robot_pre_question_list_ack_default_instance_;
class inquery_robot_pre_question_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<inquery_robot_pre_question_req>
      _instance;
} _inquery_robot_pre_question_req_default_instance_;
class inquery_robot_pre_question_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<inquery_robot_pre_question_ack>
      _instance;
} _inquery_robot_pre_question_ack_default_instance_;
class edit_pre_questionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<edit_pre_question>
      _instance;
} _edit_pre_question_default_instance_;
class edit_robot_pre_questions_reqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<edit_robot_pre_questions_req>
      _instance;
} _edit_robot_pre_questions_req_default_instance_;
class edit_robot_pre_questions_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<edit_robot_pre_questions_ack>
      _instance;
} _edit_robot_pre_questions_ack_default_instance_;
}  // namespace robot_session
namespace protobuf_robot_5fsession_2eproto {
static void InitDefaultspre_question() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_pre_question_default_instance_;
    new (ptr) ::robot_session::pre_question();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::pre_question::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_pre_question =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspre_question}, {}};

static void InitDefaultsenter_robot_session_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_enter_robot_session_req_default_instance_;
    new (ptr) ::robot_session::enter_robot_session_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::enter_robot_session_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_enter_robot_session_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsenter_robot_session_req}, {}};

static void InitDefaultsenter_robot_session_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_enter_robot_session_ack_default_instance_;
    new (ptr) ::robot_session::enter_robot_session_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::enter_robot_session_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_enter_robot_session_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsenter_robot_session_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,
      &protobuf_robot_5fsession_2eproto::scc_info_pre_question.base,}};

static void InitDefaultsrobot_single_msg_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_robot_single_msg_req_default_instance_;
    new (ptr) ::robot_session::robot_single_msg_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::robot_single_msg_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_robot_single_msg_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrobot_single_msg_req}, {}};

static void InitDefaultsrobot_single_msg_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_robot_single_msg_ack_default_instance_;
    new (ptr) ::robot_session::robot_single_msg_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::robot_single_msg_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_robot_single_msg_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsrobot_single_msg_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultsget_robot_pre_question_list_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_get_robot_pre_question_list_req_default_instance_;
    new (ptr) ::robot_session::get_robot_pre_question_list_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::get_robot_pre_question_list_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_get_robot_pre_question_list_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsget_robot_pre_question_list_req}, {}};

static void InitDefaultsget_robot_pre_question_list_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_get_robot_pre_question_list_ack_default_instance_;
    new (ptr) ::robot_session::get_robot_pre_question_list_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::get_robot_pre_question_list_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_get_robot_pre_question_list_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsget_robot_pre_question_list_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,
      &protobuf_robot_5fsession_2eproto::scc_info_pre_question.base,}};

static void InitDefaultsinquery_robot_pre_question_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_inquery_robot_pre_question_req_default_instance_;
    new (ptr) ::robot_session::inquery_robot_pre_question_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::inquery_robot_pre_question_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_inquery_robot_pre_question_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsinquery_robot_pre_question_req}, {}};

static void InitDefaultsinquery_robot_pre_question_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_inquery_robot_pre_question_ack_default_instance_;
    new (ptr) ::robot_session::inquery_robot_pre_question_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::inquery_robot_pre_question_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_inquery_robot_pre_question_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsinquery_robot_pre_question_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

static void InitDefaultsedit_pre_question() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_edit_pre_question_default_instance_;
    new (ptr) ::robot_session::edit_pre_question();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::edit_pre_question::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_edit_pre_question =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsedit_pre_question}, {}};

static void InitDefaultsedit_robot_pre_questions_req() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_edit_robot_pre_questions_req_default_instance_;
    new (ptr) ::robot_session::edit_robot_pre_questions_req();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::edit_robot_pre_questions_req::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_edit_robot_pre_questions_req =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsedit_robot_pre_questions_req}, {
      &protobuf_robot_5fsession_2eproto::scc_info_edit_pre_question.base,}};

static void InitDefaultsedit_robot_pre_questions_ack() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_session::_edit_robot_pre_questions_ack_default_instance_;
    new (ptr) ::robot_session::edit_robot_pre_questions_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_session::edit_robot_pre_questions_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_edit_robot_pre_questions_ack =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsedit_robot_pre_questions_ack}, {
      &protobuf_common_2eproto::scc_info_errorinfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_pre_question.base);
  ::google::protobuf::internal::InitSCC(&scc_info_enter_robot_session_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_enter_robot_session_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_robot_single_msg_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_robot_single_msg_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_get_robot_pre_question_list_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_get_robot_pre_question_list_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_inquery_robot_pre_question_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_inquery_robot_pre_question_ack.base);
  ::google::protobuf::internal::InitSCC(&scc_info_edit_pre_question.base);
  ::google::protobuf::internal::InitSCC(&scc_info_edit_robot_pre_questions_req.base);
  ::google::protobuf::internal::InitSCC(&scc_info_edit_robot_pre_questions_ack.base);
}

::google::protobuf::Metadata file_level_metadata[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::pre_question, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::pre_question, question_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::pre_question, question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::pre_question, question_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::pre_question, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::pre_question, answer_template_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::pre_question, create_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::pre_question, update_date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::enter_robot_session_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::enter_robot_session_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::enter_robot_session_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::enter_robot_session_ack, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::enter_robot_session_ack, robot_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::enter_robot_session_ack, enter_session_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::enter_robot_session_ack, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::enter_robot_session_ack, robot_welcome_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::enter_robot_session_ack, pre_questions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_req, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_req, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_req, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_req, send_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_ack, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_ack, send_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_ack, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_ack, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::robot_single_msg_ack, msg_template_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::get_robot_pre_question_list_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::get_robot_pre_question_list_req, question_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::get_robot_pre_question_list_req, answer_template_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::get_robot_pre_question_list_req, search_words_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::get_robot_pre_question_list_req, page_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::get_robot_pre_question_list_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::get_robot_pre_question_list_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::get_robot_pre_question_list_ack, pre_questions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::get_robot_pre_question_list_ack, total_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::inquery_robot_pre_question_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::inquery_robot_pre_question_req, question_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::inquery_robot_pre_question_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::inquery_robot_pre_question_ack, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::inquery_robot_pre_question_ack, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::inquery_robot_pre_question_ack, answer_template_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_pre_question, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_pre_question, question_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_pre_question, question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_pre_question, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_pre_question, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_pre_question, answer_template_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_robot_pre_questions_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_robot_pre_questions_req, edit_pre_questions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_robot_pre_questions_req, update_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_robot_pre_questions_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robot_session::edit_robot_pre_questions_ack, error_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::robot_session::pre_question)},
  { 12, -1, sizeof(::robot_session::enter_robot_session_req)},
  { 17, -1, sizeof(::robot_session::enter_robot_session_ack)},
  { 29, -1, sizeof(::robot_session::robot_single_msg_req)},
  { 38, -1, sizeof(::robot_session::robot_single_msg_ack)},
  { 49, -1, sizeof(::robot_session::get_robot_pre_question_list_req)},
  { 58, -1, sizeof(::robot_session::get_robot_pre_question_list_ack)},
  { 66, -1, sizeof(::robot_session::inquery_robot_pre_question_req)},
  { 72, -1, sizeof(::robot_session::inquery_robot_pre_question_ack)},
  { 80, -1, sizeof(::robot_session::edit_pre_question)},
  { 90, -1, sizeof(::robot_session::edit_robot_pre_questions_req)},
  { 97, -1, sizeof(::robot_session::edit_robot_pre_questions_ack)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_pre_question_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_enter_robot_session_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_enter_robot_session_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_robot_single_msg_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_robot_single_msg_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_get_robot_pre_question_list_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_get_robot_pre_question_list_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_inquery_robot_pre_question_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_inquery_robot_pre_question_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_edit_pre_question_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_edit_robot_pre_questions_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robot_session::_edit_robot_pre_questions_ack_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "robot_session.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023robot_session.proto\022\rrobot_session\032\014co"
      "mmon.proto\"\237\001\n\014pre_question\022\023\n\013question_"
      "id\030\001 \001(\004\022\020\n\010question\030\002 \001(\014\022\025\n\rquestion_t"
      "ype\030\003 \001(\r\022\016\n\006answer\030\004 \001(\014\022\027\n\017answer_temp"
      "late\030\005 \001(\r\022\023\n\013create_date\030\006 \001(\r\022\023\n\013updat"
      "e_date\030\007 \001(\r\"\031\n\027enter_robot_session_req\""
      "\332\001\n\027enter_robot_session_ack\022 \n\005error\030\001 \001"
      "(\0132\021.common.errorinfo\022\016\n\006userid\030\002 \001(\r\022\022\n"
      "\nrobot_name\030\003 \001(\014\022\032\n\022enter_session_time\030"
      "\004 \001(\r\022\022\n\nsession_id\030\005 \001(\004\022\025\n\rrobot_welco"
      "me\030\006 \001(\014\0222\n\rpre_questions\030\007 \003(\0132\033.robot_"
      "session.pre_question\"X\n\024robot_single_msg"
      "_req\022\020\n\010msg_type\030\001 \001(\r\022\013\n\003msg\030\002 \001(\014\022\016\n\006m"
      "sg_id\030\003 \001(\004\022\021\n\tsend_time\030\004 \001(\r\"\220\001\n\024robot"
      "_single_msg_ack\022 \n\005error\030\001 \001(\0132\021.common."
      "errorinfo\022\016\n\006msg_id\030\002 \001(\004\022\021\n\tsend_time\030\003"
      " \001(\r\022\020\n\010msg_type\030\004 \001(\r\022\013\n\003msg\030\005 \001(\014\022\024\n\014m"
      "sg_template\030\006 \001(\r\"u\n\037get_robot_pre_quest"
      "ion_list_req\022\025\n\rquestion_type\030\001 \001(\r\022\027\n\017a"
      "nswer_template\030\002 \001(\r\022\024\n\014search_words\030\003 \001"
      "(\014\022\014\n\004page\030\004 \001(\r\"\212\001\n\037get_robot_pre_quest"
      "ion_list_ack\022 \n\005error\030\001 \001(\0132\021.common.err"
      "orinfo\0222\n\rpre_questions\030\002 \003(\0132\033.robot_se"
      "ssion.pre_question\022\021\n\ttotal_num\030\003 \001(\r\"5\n"
      "\036inquery_robot_pre_question_req\022\023\n\013quest"
      "ion_id\030\001 \001(\004\"k\n\036inquery_robot_pre_questi"
      "on_ack\022 \n\005error\030\001 \001(\0132\021.common.errorinfo"
      "\022\016\n\006answer\030\002 \001(\014\022\027\n\017answer_template\030\003 \001("
      "\r\"q\n\021edit_pre_question\022\023\n\013question_id\030\001 "
      "\001(\004\022\020\n\010question\030\002 \001(\014\022\016\n\006answer\030\003 \001(\014\022\014\n"
      "\004type\030\004 \001(\r\022\027\n\017answer_template\030\005 \001(\r\"q\n\034"
      "edit_robot_pre_questions_req\022<\n\022edit_pre"
      "_questions\030\001 \003(\0132 .robot_session.edit_pr"
      "e_question\022\023\n\013update_type\030\002 \001(\r\"@\n\034edit_"
      "robot_pre_questions_ack\022 \n\005error\030\001 \001(\0132\021"
      ".common.errorinfob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot_session.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_robot_5fsession_2eproto
namespace robot_session {

// ===================================================================

void pre_question::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pre_question::kQuestionIdFieldNumber;
const int pre_question::kQuestionFieldNumber;
const int pre_question::kQuestionTypeFieldNumber;
const int pre_question::kAnswerFieldNumber;
const int pre_question::kAnswerTemplateFieldNumber;
const int pre_question::kCreateDateFieldNumber;
const int pre_question::kUpdateDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pre_question::pre_question()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_pre_question.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.pre_question)
}
pre_question::pre_question(const pre_question& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.question().size() > 0) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.answer().size() > 0) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  ::memcpy(&question_id_, &from.question_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_date_) -
    reinterpret_cast<char*>(&question_id_)) + sizeof(update_date_));
  // @@protoc_insertion_point(copy_constructor:robot_session.pre_question)
}

void pre_question::SharedCtor() {
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&question_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_date_) -
      reinterpret_cast<char*>(&question_id_)) + sizeof(update_date_));
}

pre_question::~pre_question() {
  // @@protoc_insertion_point(destructor:robot_session.pre_question)
  SharedDtor();
}

void pre_question::SharedDtor() {
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void pre_question::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* pre_question::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const pre_question& pre_question::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_pre_question.base);
  return *internal_default_instance();
}


void pre_question::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.pre_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&question_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_date_) -
      reinterpret_cast<char*>(&question_id_)) + sizeof(update_date_));
  _internal_metadata_.Clear();
}

bool pre_question::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.pre_question)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 question_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes question = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_question()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 question_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes answer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_answer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 answer_template = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_template_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_date = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.pre_question)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.pre_question)
  return false;
#undef DO_
}

void pre_question::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.pre_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->question_id(), output);
  }

  // bytes question = 2;
  if (this->question().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->question(), output);
  }

  // uint32 question_type = 3;
  if (this->question_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->question_type(), output);
  }

  // bytes answer = 4;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->answer(), output);
  }

  // uint32 answer_template = 5;
  if (this->answer_template() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->answer_template(), output);
  }

  // uint32 create_date = 6;
  if (this->create_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->create_date(), output);
  }

  // uint32 update_date = 7;
  if (this->update_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->update_date(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.pre_question)
}

::google::protobuf::uint8* pre_question::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.pre_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->question_id(), target);
  }

  // bytes question = 2;
  if (this->question().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->question(), target);
  }

  // uint32 question_type = 3;
  if (this->question_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->question_type(), target);
  }

  // bytes answer = 4;
  if (this->answer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->answer(), target);
  }

  // uint32 answer_template = 5;
  if (this->answer_template() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->answer_template(), target);
  }

  // uint32 create_date = 6;
  if (this->create_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->create_date(), target);
  }

  // uint32 update_date = 7;
  if (this->update_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->update_date(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.pre_question)
  return target;
}

size_t pre_question::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.pre_question)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes question = 2;
  if (this->question().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->question());
  }

  // bytes answer = 4;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->answer());
  }

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->question_id());
  }

  // uint32 question_type = 3;
  if (this->question_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->question_type());
  }

  // uint32 answer_template = 5;
  if (this->answer_template() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->answer_template());
  }

  // uint32 create_date = 6;
  if (this->create_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_date());
  }

  // uint32 update_date = 7;
  if (this->update_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pre_question::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.pre_question)
  GOOGLE_DCHECK_NE(&from, this);
  const pre_question* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const pre_question>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.pre_question)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.pre_question)
    MergeFrom(*source);
  }
}

void pre_question::MergeFrom(const pre_question& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.pre_question)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.question().size() > 0) {

    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.question_id() != 0) {
    set_question_id(from.question_id());
  }
  if (from.question_type() != 0) {
    set_question_type(from.question_type());
  }
  if (from.answer_template() != 0) {
    set_answer_template(from.answer_template());
  }
  if (from.create_date() != 0) {
    set_create_date(from.create_date());
  }
  if (from.update_date() != 0) {
    set_update_date(from.update_date());
  }
}

void pre_question::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.pre_question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pre_question::CopyFrom(const pre_question& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.pre_question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pre_question::IsInitialized() const {
  return true;
}

void pre_question::Swap(pre_question* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pre_question::InternalSwap(pre_question* other) {
  using std::swap;
  question_.Swap(&other->question_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  answer_.Swap(&other->answer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(question_id_, other->question_id_);
  swap(question_type_, other->question_type_);
  swap(answer_template_, other->answer_template_);
  swap(create_date_, other->create_date_);
  swap(update_date_, other->update_date_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata pre_question::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void enter_robot_session_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

enter_robot_session_req::enter_robot_session_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_enter_robot_session_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.enter_robot_session_req)
}
enter_robot_session_req::enter_robot_session_req(const enter_robot_session_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:robot_session.enter_robot_session_req)
}

void enter_robot_session_req::SharedCtor() {
}

enter_robot_session_req::~enter_robot_session_req() {
  // @@protoc_insertion_point(destructor:robot_session.enter_robot_session_req)
  SharedDtor();
}

void enter_robot_session_req::SharedDtor() {
}

void enter_robot_session_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* enter_robot_session_req::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const enter_robot_session_req& enter_robot_session_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_enter_robot_session_req.base);
  return *internal_default_instance();
}


void enter_robot_session_req::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.enter_robot_session_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool enter_robot_session_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.enter_robot_session_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.enter_robot_session_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.enter_robot_session_req)
  return false;
#undef DO_
}

void enter_robot_session_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.enter_robot_session_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.enter_robot_session_req)
}

::google::protobuf::uint8* enter_robot_session_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.enter_robot_session_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.enter_robot_session_req)
  return target;
}

size_t enter_robot_session_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.enter_robot_session_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void enter_robot_session_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.enter_robot_session_req)
  GOOGLE_DCHECK_NE(&from, this);
  const enter_robot_session_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const enter_robot_session_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.enter_robot_session_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.enter_robot_session_req)
    MergeFrom(*source);
  }
}

void enter_robot_session_req::MergeFrom(const enter_robot_session_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.enter_robot_session_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void enter_robot_session_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.enter_robot_session_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_robot_session_req::CopyFrom(const enter_robot_session_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.enter_robot_session_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_robot_session_req::IsInitialized() const {
  return true;
}

void enter_robot_session_req::Swap(enter_robot_session_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void enter_robot_session_req::InternalSwap(enter_robot_session_req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata enter_robot_session_req::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void enter_robot_session_ack::InitAsDefaultInstance() {
  ::robot_session::_enter_robot_session_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void enter_robot_session_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int enter_robot_session_ack::kErrorFieldNumber;
const int enter_robot_session_ack::kUseridFieldNumber;
const int enter_robot_session_ack::kRobotNameFieldNumber;
const int enter_robot_session_ack::kEnterSessionTimeFieldNumber;
const int enter_robot_session_ack::kSessionIdFieldNumber;
const int enter_robot_session_ack::kRobotWelcomeFieldNumber;
const int enter_robot_session_ack::kPreQuestionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

enter_robot_session_ack::enter_robot_session_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_enter_robot_session_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.enter_robot_session_ack)
}
enter_robot_session_ack::enter_robot_session_ack(const enter_robot_session_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pre_questions_(from.pre_questions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  robot_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robot_name().size() > 0) {
    robot_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_name_);
  }
  robot_welcome_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robot_welcome().size() > 0) {
    robot_welcome_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_welcome_);
  }
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:robot_session.enter_robot_session_ack)
}

void enter_robot_session_ack::SharedCtor() {
  robot_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_welcome_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&error_)) + sizeof(session_id_));
}

enter_robot_session_ack::~enter_robot_session_ack() {
  // @@protoc_insertion_point(destructor:robot_session.enter_robot_session_ack)
  SharedDtor();
}

void enter_robot_session_ack::SharedDtor() {
  robot_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_welcome_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void enter_robot_session_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* enter_robot_session_ack::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const enter_robot_session_ack& enter_robot_session_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_enter_robot_session_ack.base);
  return *internal_default_instance();
}


void enter_robot_session_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.enter_robot_session_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pre_questions_.Clear();
  robot_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_welcome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(session_id_));
  _internal_metadata_.Clear();
}

bool enter_robot_session_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.enter_robot_session_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes robot_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_robot_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 enter_session_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enter_session_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 session_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes robot_welcome = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_robot_welcome()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robot_session.pre_question pre_questions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pre_questions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.enter_robot_session_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.enter_robot_session_ack)
  return false;
#undef DO_
}

void enter_robot_session_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.enter_robot_session_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // uint32 userid = 2;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userid(), output);
  }

  // bytes robot_name = 3;
  if (this->robot_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->robot_name(), output);
  }

  // uint32 enter_session_time = 4;
  if (this->enter_session_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enter_session_time(), output);
  }

  // uint64 session_id = 5;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->session_id(), output);
  }

  // bytes robot_welcome = 6;
  if (this->robot_welcome().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->robot_welcome(), output);
  }

  // repeated .robot_session.pre_question pre_questions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pre_questions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->pre_questions(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.enter_robot_session_ack)
}

::google::protobuf::uint8* enter_robot_session_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.enter_robot_session_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // uint32 userid = 2;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userid(), target);
  }

  // bytes robot_name = 3;
  if (this->robot_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->robot_name(), target);
  }

  // uint32 enter_session_time = 4;
  if (this->enter_session_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enter_session_time(), target);
  }

  // uint64 session_id = 5;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->session_id(), target);
  }

  // bytes robot_welcome = 6;
  if (this->robot_welcome().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->robot_welcome(), target);
  }

  // repeated .robot_session.pre_question pre_questions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pre_questions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->pre_questions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.enter_robot_session_ack)
  return target;
}

size_t enter_robot_session_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.enter_robot_session_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .robot_session.pre_question pre_questions = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->pre_questions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pre_questions(static_cast<int>(i)));
    }
  }

  // bytes robot_name = 3;
  if (this->robot_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->robot_name());
  }

  // bytes robot_welcome = 6;
  if (this->robot_welcome().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->robot_welcome());
  }

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint32 userid = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->userid());
  }

  // uint32 enter_session_time = 4;
  if (this->enter_session_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->enter_session_time());
  }

  // uint64 session_id = 5;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void enter_robot_session_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.enter_robot_session_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const enter_robot_session_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const enter_robot_session_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.enter_robot_session_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.enter_robot_session_ack)
    MergeFrom(*source);
  }
}

void enter_robot_session_ack::MergeFrom(const enter_robot_session_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.enter_robot_session_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pre_questions_.MergeFrom(from.pre_questions_);
  if (from.robot_name().size() > 0) {

    robot_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_name_);
  }
  if (from.robot_welcome().size() > 0) {

    robot_welcome_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_welcome_);
  }
  if (from.has_error()) {
    mutable_error()->::common::errorinfo::MergeFrom(from.error());
  }
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.enter_session_time() != 0) {
    set_enter_session_time(from.enter_session_time());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void enter_robot_session_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.enter_robot_session_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_robot_session_ack::CopyFrom(const enter_robot_session_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.enter_robot_session_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_robot_session_ack::IsInitialized() const {
  return true;
}

void enter_robot_session_ack::Swap(enter_robot_session_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void enter_robot_session_ack::InternalSwap(enter_robot_session_ack* other) {
  using std::swap;
  CastToBase(&pre_questions_)->InternalSwap(CastToBase(&other->pre_questions_));
  robot_name_.Swap(&other->robot_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_welcome_.Swap(&other->robot_welcome_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(userid_, other->userid_);
  swap(enter_session_time_, other->enter_session_time_);
  swap(session_id_, other->session_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata enter_robot_session_ack::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void robot_single_msg_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int robot_single_msg_req::kMsgTypeFieldNumber;
const int robot_single_msg_req::kMsgFieldNumber;
const int robot_single_msg_req::kMsgIdFieldNumber;
const int robot_single_msg_req::kSendTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

robot_single_msg_req::robot_single_msg_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_robot_single_msg_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.robot_single_msg_req)
}
robot_single_msg_req::robot_single_msg_req(const robot_single_msg_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&msg_type_, &from.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:robot_session.robot_single_msg_req)
}

void robot_single_msg_req::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(msg_id_));
}

robot_single_msg_req::~robot_single_msg_req() {
  // @@protoc_insertion_point(destructor:robot_session.robot_single_msg_req)
  SharedDtor();
}

void robot_single_msg_req::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void robot_single_msg_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* robot_single_msg_req::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const robot_single_msg_req& robot_single_msg_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_robot_single_msg_req.base);
  return *internal_default_instance();
}


void robot_single_msg_req::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.robot_single_msg_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

bool robot_single_msg_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.robot_single_msg_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.robot_single_msg_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.robot_single_msg_req)
  return false;
#undef DO_
}

void robot_single_msg_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.robot_single_msg_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_type = 1;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_type(), output);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  // uint64 msg_id = 3;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  // uint32 send_time = 4;
  if (this->send_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->send_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.robot_single_msg_req)
}

::google::protobuf::uint8* robot_single_msg_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.robot_single_msg_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_type = 1;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_type(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  // uint64 msg_id = 3;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  // uint32 send_time = 4;
  if (this->send_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->send_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.robot_single_msg_req)
  return target;
}

size_t robot_single_msg_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.robot_single_msg_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // uint32 msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());
  }

  // uint32 send_time = 4;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_time());
  }

  // uint64 msg_id = 3;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void robot_single_msg_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.robot_single_msg_req)
  GOOGLE_DCHECK_NE(&from, this);
  const robot_single_msg_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const robot_single_msg_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.robot_single_msg_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.robot_single_msg_req)
    MergeFrom(*source);
  }
}

void robot_single_msg_req::MergeFrom(const robot_single_msg_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.robot_single_msg_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.send_time() != 0) {
    set_send_time(from.send_time());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void robot_single_msg_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.robot_single_msg_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void robot_single_msg_req::CopyFrom(const robot_single_msg_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.robot_single_msg_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool robot_single_msg_req::IsInitialized() const {
  return true;
}

void robot_single_msg_req::Swap(robot_single_msg_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void robot_single_msg_req::InternalSwap(robot_single_msg_req* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_type_, other->msg_type_);
  swap(send_time_, other->send_time_);
  swap(msg_id_, other->msg_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata robot_single_msg_req::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void robot_single_msg_ack::InitAsDefaultInstance() {
  ::robot_session::_robot_single_msg_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void robot_single_msg_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int robot_single_msg_ack::kErrorFieldNumber;
const int robot_single_msg_ack::kMsgIdFieldNumber;
const int robot_single_msg_ack::kSendTimeFieldNumber;
const int robot_single_msg_ack::kMsgTypeFieldNumber;
const int robot_single_msg_ack::kMsgFieldNumber;
const int robot_single_msg_ack::kMsgTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

robot_single_msg_ack::robot_single_msg_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_robot_single_msg_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.robot_single_msg_ack)
}
robot_single_msg_ack::robot_single_msg_ack(const robot_single_msg_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_template_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_template_));
  // @@protoc_insertion_point(copy_constructor:robot_session.robot_single_msg_ack)
}

void robot_single_msg_ack::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_template_) -
      reinterpret_cast<char*>(&error_)) + sizeof(msg_template_));
}

robot_single_msg_ack::~robot_single_msg_ack() {
  // @@protoc_insertion_point(destructor:robot_session.robot_single_msg_ack)
  SharedDtor();
}

void robot_single_msg_ack::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void robot_single_msg_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* robot_single_msg_ack::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const robot_single_msg_ack& robot_single_msg_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_robot_single_msg_ack.base);
  return *internal_default_instance();
}


void robot_single_msg_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.robot_single_msg_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_template_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_template_));
  _internal_metadata_.Clear();
}

bool robot_single_msg_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.robot_single_msg_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 msg_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_template = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_template_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.robot_single_msg_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.robot_single_msg_ack)
  return false;
#undef DO_
}

void robot_single_msg_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.robot_single_msg_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // uint64 msg_id = 2;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  // uint32 send_time = 3;
  if (this->send_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->send_time(), output);
  }

  // uint32 msg_type = 4;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_type(), output);
  }

  // bytes msg = 5;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msg(), output);
  }

  // uint32 msg_template = 6;
  if (this->msg_template() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->msg_template(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.robot_single_msg_ack)
}

::google::protobuf::uint8* robot_single_msg_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.robot_single_msg_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // uint64 msg_id = 2;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  // uint32 send_time = 3;
  if (this->send_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->send_time(), target);
  }

  // uint32 msg_type = 4;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msg_type(), target);
  }

  // bytes msg = 5;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msg(), target);
  }

  // uint32 msg_template = 6;
  if (this->msg_template() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->msg_template(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.robot_single_msg_ack)
  return target;
}

size_t robot_single_msg_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.robot_single_msg_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint64 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());
  }

  // uint32 send_time = 3;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_time());
  }

  // uint32 msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_type());
  }

  // uint32 msg_template = 6;
  if (this->msg_template() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msg_template());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void robot_single_msg_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.robot_single_msg_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const robot_single_msg_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const robot_single_msg_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.robot_single_msg_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.robot_single_msg_ack)
    MergeFrom(*source);
  }
}

void robot_single_msg_ack::MergeFrom(const robot_single_msg_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.robot_single_msg_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_error()) {
    mutable_error()->::common::errorinfo::MergeFrom(from.error());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.send_time() != 0) {
    set_send_time(from.send_time());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.msg_template() != 0) {
    set_msg_template(from.msg_template());
  }
}

void robot_single_msg_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.robot_single_msg_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void robot_single_msg_ack::CopyFrom(const robot_single_msg_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.robot_single_msg_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool robot_single_msg_ack::IsInitialized() const {
  return true;
}

void robot_single_msg_ack::Swap(robot_single_msg_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void robot_single_msg_ack::InternalSwap(robot_single_msg_ack* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(msg_id_, other->msg_id_);
  swap(send_time_, other->send_time_);
  swap(msg_type_, other->msg_type_);
  swap(msg_template_, other->msg_template_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata robot_single_msg_ack::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void get_robot_pre_question_list_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_robot_pre_question_list_req::kQuestionTypeFieldNumber;
const int get_robot_pre_question_list_req::kAnswerTemplateFieldNumber;
const int get_robot_pre_question_list_req::kSearchWordsFieldNumber;
const int get_robot_pre_question_list_req::kPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_robot_pre_question_list_req::get_robot_pre_question_list_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_get_robot_pre_question_list_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.get_robot_pre_question_list_req)
}
get_robot_pre_question_list_req::get_robot_pre_question_list_req(const get_robot_pre_question_list_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_words_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.search_words().size() > 0) {
    search_words_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_words_);
  }
  ::memcpy(&question_type_, &from.question_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_) -
    reinterpret_cast<char*>(&question_type_)) + sizeof(page_));
  // @@protoc_insertion_point(copy_constructor:robot_session.get_robot_pre_question_list_req)
}

void get_robot_pre_question_list_req::SharedCtor() {
  search_words_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&question_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_) -
      reinterpret_cast<char*>(&question_type_)) + sizeof(page_));
}

get_robot_pre_question_list_req::~get_robot_pre_question_list_req() {
  // @@protoc_insertion_point(destructor:robot_session.get_robot_pre_question_list_req)
  SharedDtor();
}

void get_robot_pre_question_list_req::SharedDtor() {
  search_words_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void get_robot_pre_question_list_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* get_robot_pre_question_list_req::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_robot_pre_question_list_req& get_robot_pre_question_list_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_get_robot_pre_question_list_req.base);
  return *internal_default_instance();
}


void get_robot_pre_question_list_req::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.get_robot_pre_question_list_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_words_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&question_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_) -
      reinterpret_cast<char*>(&question_type_)) + sizeof(page_));
  _internal_metadata_.Clear();
}

bool get_robot_pre_question_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.get_robot_pre_question_list_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 question_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 answer_template = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_template_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes search_words = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_search_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 page = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.get_robot_pre_question_list_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.get_robot_pre_question_list_req)
  return false;
#undef DO_
}

void get_robot_pre_question_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.get_robot_pre_question_list_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 question_type = 1;
  if (this->question_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->question_type(), output);
  }

  // uint32 answer_template = 2;
  if (this->answer_template() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->answer_template(), output);
  }

  // bytes search_words = 3;
  if (this->search_words().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->search_words(), output);
  }

  // uint32 page = 4;
  if (this->page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.get_robot_pre_question_list_req)
}

::google::protobuf::uint8* get_robot_pre_question_list_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.get_robot_pre_question_list_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 question_type = 1;
  if (this->question_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->question_type(), target);
  }

  // uint32 answer_template = 2;
  if (this->answer_template() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->answer_template(), target);
  }

  // bytes search_words = 3;
  if (this->search_words().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->search_words(), target);
  }

  // uint32 page = 4;
  if (this->page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->page(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.get_robot_pre_question_list_req)
  return target;
}

size_t get_robot_pre_question_list_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.get_robot_pre_question_list_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes search_words = 3;
  if (this->search_words().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->search_words());
  }

  // uint32 question_type = 1;
  if (this->question_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->question_type());
  }

  // uint32 answer_template = 2;
  if (this->answer_template() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->answer_template());
  }

  // uint32 page = 4;
  if (this->page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_robot_pre_question_list_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.get_robot_pre_question_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  const get_robot_pre_question_list_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_robot_pre_question_list_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.get_robot_pre_question_list_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.get_robot_pre_question_list_req)
    MergeFrom(*source);
  }
}

void get_robot_pre_question_list_req::MergeFrom(const get_robot_pre_question_list_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.get_robot_pre_question_list_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.search_words().size() > 0) {

    search_words_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_words_);
  }
  if (from.question_type() != 0) {
    set_question_type(from.question_type());
  }
  if (from.answer_template() != 0) {
    set_answer_template(from.answer_template());
  }
  if (from.page() != 0) {
    set_page(from.page());
  }
}

void get_robot_pre_question_list_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.get_robot_pre_question_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_robot_pre_question_list_req::CopyFrom(const get_robot_pre_question_list_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.get_robot_pre_question_list_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_robot_pre_question_list_req::IsInitialized() const {
  return true;
}

void get_robot_pre_question_list_req::Swap(get_robot_pre_question_list_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_robot_pre_question_list_req::InternalSwap(get_robot_pre_question_list_req* other) {
  using std::swap;
  search_words_.Swap(&other->search_words_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(question_type_, other->question_type_);
  swap(answer_template_, other->answer_template_);
  swap(page_, other->page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata get_robot_pre_question_list_req::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void get_robot_pre_question_list_ack::InitAsDefaultInstance() {
  ::robot_session::_get_robot_pre_question_list_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void get_robot_pre_question_list_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_robot_pre_question_list_ack::kErrorFieldNumber;
const int get_robot_pre_question_list_ack::kPreQuestionsFieldNumber;
const int get_robot_pre_question_list_ack::kTotalNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_robot_pre_question_list_ack::get_robot_pre_question_list_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_get_robot_pre_question_list_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.get_robot_pre_question_list_ack)
}
get_robot_pre_question_list_ack::get_robot_pre_question_list_ack(const get_robot_pre_question_list_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pre_questions_(from.pre_questions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  total_num_ = from.total_num_;
  // @@protoc_insertion_point(copy_constructor:robot_session.get_robot_pre_question_list_ack)
}

void get_robot_pre_question_list_ack::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_num_) -
      reinterpret_cast<char*>(&error_)) + sizeof(total_num_));
}

get_robot_pre_question_list_ack::~get_robot_pre_question_list_ack() {
  // @@protoc_insertion_point(destructor:robot_session.get_robot_pre_question_list_ack)
  SharedDtor();
}

void get_robot_pre_question_list_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void get_robot_pre_question_list_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* get_robot_pre_question_list_ack::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const get_robot_pre_question_list_ack& get_robot_pre_question_list_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_get_robot_pre_question_list_ack.base);
  return *internal_default_instance();
}


void get_robot_pre_question_list_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.get_robot_pre_question_list_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pre_questions_.Clear();
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  total_num_ = 0u;
  _internal_metadata_.Clear();
}

bool get_robot_pre_question_list_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.get_robot_pre_question_list_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robot_session.pre_question pre_questions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pre_questions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.get_robot_pre_question_list_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.get_robot_pre_question_list_ack)
  return false;
#undef DO_
}

void get_robot_pre_question_list_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.get_robot_pre_question_list_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // repeated .robot_session.pre_question pre_questions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pre_questions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pre_questions(static_cast<int>(i)),
      output);
  }

  // uint32 total_num = 3;
  if (this->total_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.get_robot_pre_question_list_ack)
}

::google::protobuf::uint8* get_robot_pre_question_list_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.get_robot_pre_question_list_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // repeated .robot_session.pre_question pre_questions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pre_questions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pre_questions(static_cast<int>(i)), deterministic, target);
  }

  // uint32 total_num = 3;
  if (this->total_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.get_robot_pre_question_list_ack)
  return target;
}

size_t get_robot_pre_question_list_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.get_robot_pre_question_list_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .robot_session.pre_question pre_questions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pre_questions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pre_questions(static_cast<int>(i)));
    }
  }

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint32 total_num = 3;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_robot_pre_question_list_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.get_robot_pre_question_list_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const get_robot_pre_question_list_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const get_robot_pre_question_list_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.get_robot_pre_question_list_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.get_robot_pre_question_list_ack)
    MergeFrom(*source);
  }
}

void get_robot_pre_question_list_ack::MergeFrom(const get_robot_pre_question_list_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.get_robot_pre_question_list_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pre_questions_.MergeFrom(from.pre_questions_);
  if (from.has_error()) {
    mutable_error()->::common::errorinfo::MergeFrom(from.error());
  }
  if (from.total_num() != 0) {
    set_total_num(from.total_num());
  }
}

void get_robot_pre_question_list_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.get_robot_pre_question_list_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_robot_pre_question_list_ack::CopyFrom(const get_robot_pre_question_list_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.get_robot_pre_question_list_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_robot_pre_question_list_ack::IsInitialized() const {
  return true;
}

void get_robot_pre_question_list_ack::Swap(get_robot_pre_question_list_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_robot_pre_question_list_ack::InternalSwap(get_robot_pre_question_list_ack* other) {
  using std::swap;
  CastToBase(&pre_questions_)->InternalSwap(CastToBase(&other->pre_questions_));
  swap(error_, other->error_);
  swap(total_num_, other->total_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata get_robot_pre_question_list_ack::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void inquery_robot_pre_question_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int inquery_robot_pre_question_req::kQuestionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

inquery_robot_pre_question_req::inquery_robot_pre_question_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_inquery_robot_pre_question_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.inquery_robot_pre_question_req)
}
inquery_robot_pre_question_req::inquery_robot_pre_question_req(const inquery_robot_pre_question_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  question_id_ = from.question_id_;
  // @@protoc_insertion_point(copy_constructor:robot_session.inquery_robot_pre_question_req)
}

void inquery_robot_pre_question_req::SharedCtor() {
  question_id_ = GOOGLE_ULONGLONG(0);
}

inquery_robot_pre_question_req::~inquery_robot_pre_question_req() {
  // @@protoc_insertion_point(destructor:robot_session.inquery_robot_pre_question_req)
  SharedDtor();
}

void inquery_robot_pre_question_req::SharedDtor() {
}

void inquery_robot_pre_question_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* inquery_robot_pre_question_req::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const inquery_robot_pre_question_req& inquery_robot_pre_question_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_inquery_robot_pre_question_req.base);
  return *internal_default_instance();
}


void inquery_robot_pre_question_req::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.inquery_robot_pre_question_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  question_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool inquery_robot_pre_question_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.inquery_robot_pre_question_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 question_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.inquery_robot_pre_question_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.inquery_robot_pre_question_req)
  return false;
#undef DO_
}

void inquery_robot_pre_question_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.inquery_robot_pre_question_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->question_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.inquery_robot_pre_question_req)
}

::google::protobuf::uint8* inquery_robot_pre_question_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.inquery_robot_pre_question_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->question_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.inquery_robot_pre_question_req)
  return target;
}

size_t inquery_robot_pre_question_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.inquery_robot_pre_question_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->question_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void inquery_robot_pre_question_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.inquery_robot_pre_question_req)
  GOOGLE_DCHECK_NE(&from, this);
  const inquery_robot_pre_question_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const inquery_robot_pre_question_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.inquery_robot_pre_question_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.inquery_robot_pre_question_req)
    MergeFrom(*source);
  }
}

void inquery_robot_pre_question_req::MergeFrom(const inquery_robot_pre_question_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.inquery_robot_pre_question_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.question_id() != 0) {
    set_question_id(from.question_id());
  }
}

void inquery_robot_pre_question_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.inquery_robot_pre_question_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inquery_robot_pre_question_req::CopyFrom(const inquery_robot_pre_question_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.inquery_robot_pre_question_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inquery_robot_pre_question_req::IsInitialized() const {
  return true;
}

void inquery_robot_pre_question_req::Swap(inquery_robot_pre_question_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void inquery_robot_pre_question_req::InternalSwap(inquery_robot_pre_question_req* other) {
  using std::swap;
  swap(question_id_, other->question_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata inquery_robot_pre_question_req::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void inquery_robot_pre_question_ack::InitAsDefaultInstance() {
  ::robot_session::_inquery_robot_pre_question_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void inquery_robot_pre_question_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int inquery_robot_pre_question_ack::kErrorFieldNumber;
const int inquery_robot_pre_question_ack::kAnswerFieldNumber;
const int inquery_robot_pre_question_ack::kAnswerTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

inquery_robot_pre_question_ack::inquery_robot_pre_question_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_inquery_robot_pre_question_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.inquery_robot_pre_question_ack)
}
inquery_robot_pre_question_ack::inquery_robot_pre_question_ack(const inquery_robot_pre_question_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.answer().size() > 0) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  answer_template_ = from.answer_template_;
  // @@protoc_insertion_point(copy_constructor:robot_session.inquery_robot_pre_question_ack)
}

void inquery_robot_pre_question_ack::SharedCtor() {
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&answer_template_) -
      reinterpret_cast<char*>(&error_)) + sizeof(answer_template_));
}

inquery_robot_pre_question_ack::~inquery_robot_pre_question_ack() {
  // @@protoc_insertion_point(destructor:robot_session.inquery_robot_pre_question_ack)
  SharedDtor();
}

void inquery_robot_pre_question_ack::SharedDtor() {
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void inquery_robot_pre_question_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* inquery_robot_pre_question_ack::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const inquery_robot_pre_question_ack& inquery_robot_pre_question_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_inquery_robot_pre_question_ack.base);
  return *internal_default_instance();
}


void inquery_robot_pre_question_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.inquery_robot_pre_question_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  answer_template_ = 0u;
  _internal_metadata_.Clear();
}

bool inquery_robot_pre_question_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.inquery_robot_pre_question_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes answer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_answer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 answer_template = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_template_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.inquery_robot_pre_question_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.inquery_robot_pre_question_ack)
  return false;
#undef DO_
}

void inquery_robot_pre_question_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.inquery_robot_pre_question_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  // bytes answer = 2;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->answer(), output);
  }

  // uint32 answer_template = 3;
  if (this->answer_template() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->answer_template(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.inquery_robot_pre_question_ack)
}

::google::protobuf::uint8* inquery_robot_pre_question_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.inquery_robot_pre_question_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  // bytes answer = 2;
  if (this->answer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->answer(), target);
  }

  // uint32 answer_template = 3;
  if (this->answer_template() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->answer_template(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.inquery_robot_pre_question_ack)
  return target;
}

size_t inquery_robot_pre_question_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.inquery_robot_pre_question_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes answer = 2;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->answer());
  }

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint32 answer_template = 3;
  if (this->answer_template() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->answer_template());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void inquery_robot_pre_question_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.inquery_robot_pre_question_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const inquery_robot_pre_question_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const inquery_robot_pre_question_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.inquery_robot_pre_question_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.inquery_robot_pre_question_ack)
    MergeFrom(*source);
  }
}

void inquery_robot_pre_question_ack::MergeFrom(const inquery_robot_pre_question_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.inquery_robot_pre_question_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.has_error()) {
    mutable_error()->::common::errorinfo::MergeFrom(from.error());
  }
  if (from.answer_template() != 0) {
    set_answer_template(from.answer_template());
  }
}

void inquery_robot_pre_question_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.inquery_robot_pre_question_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void inquery_robot_pre_question_ack::CopyFrom(const inquery_robot_pre_question_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.inquery_robot_pre_question_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool inquery_robot_pre_question_ack::IsInitialized() const {
  return true;
}

void inquery_robot_pre_question_ack::Swap(inquery_robot_pre_question_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void inquery_robot_pre_question_ack::InternalSwap(inquery_robot_pre_question_ack* other) {
  using std::swap;
  answer_.Swap(&other->answer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(answer_template_, other->answer_template_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata inquery_robot_pre_question_ack::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void edit_pre_question::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int edit_pre_question::kQuestionIdFieldNumber;
const int edit_pre_question::kQuestionFieldNumber;
const int edit_pre_question::kAnswerFieldNumber;
const int edit_pre_question::kTypeFieldNumber;
const int edit_pre_question::kAnswerTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

edit_pre_question::edit_pre_question()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_edit_pre_question.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.edit_pre_question)
}
edit_pre_question::edit_pre_question(const edit_pre_question& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.question().size() > 0) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.answer().size() > 0) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  ::memcpy(&question_id_, &from.question_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&answer_template_) -
    reinterpret_cast<char*>(&question_id_)) + sizeof(answer_template_));
  // @@protoc_insertion_point(copy_constructor:robot_session.edit_pre_question)
}

void edit_pre_question::SharedCtor() {
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&question_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&answer_template_) -
      reinterpret_cast<char*>(&question_id_)) + sizeof(answer_template_));
}

edit_pre_question::~edit_pre_question() {
  // @@protoc_insertion_point(destructor:robot_session.edit_pre_question)
  SharedDtor();
}

void edit_pre_question::SharedDtor() {
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void edit_pre_question::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* edit_pre_question::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const edit_pre_question& edit_pre_question::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_edit_pre_question.base);
  return *internal_default_instance();
}


void edit_pre_question::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.edit_pre_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&question_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&answer_template_) -
      reinterpret_cast<char*>(&question_id_)) + sizeof(answer_template_));
  _internal_metadata_.Clear();
}

bool edit_pre_question::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.edit_pre_question)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 question_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes question = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_question()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes answer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_answer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 answer_template = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_template_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.edit_pre_question)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.edit_pre_question)
  return false;
#undef DO_
}

void edit_pre_question::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.edit_pre_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->question_id(), output);
  }

  // bytes question = 2;
  if (this->question().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->question(), output);
  }

  // bytes answer = 3;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->answer(), output);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // uint32 answer_template = 5;
  if (this->answer_template() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->answer_template(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.edit_pre_question)
}

::google::protobuf::uint8* edit_pre_question::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.edit_pre_question)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->question_id(), target);
  }

  // bytes question = 2;
  if (this->question().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->question(), target);
  }

  // bytes answer = 3;
  if (this->answer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->answer(), target);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // uint32 answer_template = 5;
  if (this->answer_template() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->answer_template(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.edit_pre_question)
  return target;
}

size_t edit_pre_question::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.edit_pre_question)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes question = 2;
  if (this->question().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->question());
  }

  // bytes answer = 3;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->answer());
  }

  // uint64 question_id = 1;
  if (this->question_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->question_id());
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // uint32 answer_template = 5;
  if (this->answer_template() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->answer_template());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void edit_pre_question::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.edit_pre_question)
  GOOGLE_DCHECK_NE(&from, this);
  const edit_pre_question* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const edit_pre_question>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.edit_pre_question)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.edit_pre_question)
    MergeFrom(*source);
  }
}

void edit_pre_question::MergeFrom(const edit_pre_question& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.edit_pre_question)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.question().size() > 0) {

    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.question_id() != 0) {
    set_question_id(from.question_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.answer_template() != 0) {
    set_answer_template(from.answer_template());
  }
}

void edit_pre_question::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.edit_pre_question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void edit_pre_question::CopyFrom(const edit_pre_question& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.edit_pre_question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool edit_pre_question::IsInitialized() const {
  return true;
}

void edit_pre_question::Swap(edit_pre_question* other) {
  if (other == this) return;
  InternalSwap(other);
}
void edit_pre_question::InternalSwap(edit_pre_question* other) {
  using std::swap;
  question_.Swap(&other->question_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  answer_.Swap(&other->answer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(question_id_, other->question_id_);
  swap(type_, other->type_);
  swap(answer_template_, other->answer_template_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata edit_pre_question::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void edit_robot_pre_questions_req::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int edit_robot_pre_questions_req::kEditPreQuestionsFieldNumber;
const int edit_robot_pre_questions_req::kUpdateTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

edit_robot_pre_questions_req::edit_robot_pre_questions_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_edit_robot_pre_questions_req.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.edit_robot_pre_questions_req)
}
edit_robot_pre_questions_req::edit_robot_pre_questions_req(const edit_robot_pre_questions_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      edit_pre_questions_(from.edit_pre_questions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_type_ = from.update_type_;
  // @@protoc_insertion_point(copy_constructor:robot_session.edit_robot_pre_questions_req)
}

void edit_robot_pre_questions_req::SharedCtor() {
  update_type_ = 0u;
}

edit_robot_pre_questions_req::~edit_robot_pre_questions_req() {
  // @@protoc_insertion_point(destructor:robot_session.edit_robot_pre_questions_req)
  SharedDtor();
}

void edit_robot_pre_questions_req::SharedDtor() {
}

void edit_robot_pre_questions_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* edit_robot_pre_questions_req::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const edit_robot_pre_questions_req& edit_robot_pre_questions_req::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_edit_robot_pre_questions_req.base);
  return *internal_default_instance();
}


void edit_robot_pre_questions_req::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.edit_robot_pre_questions_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edit_pre_questions_.Clear();
  update_type_ = 0u;
  _internal_metadata_.Clear();
}

bool edit_robot_pre_questions_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.edit_robot_pre_questions_req)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robot_session.edit_pre_question edit_pre_questions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_edit_pre_questions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.edit_robot_pre_questions_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.edit_robot_pre_questions_req)
  return false;
#undef DO_
}

void edit_robot_pre_questions_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.edit_robot_pre_questions_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robot_session.edit_pre_question edit_pre_questions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edit_pre_questions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->edit_pre_questions(static_cast<int>(i)),
      output);
  }

  // uint32 update_type = 2;
  if (this->update_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.edit_robot_pre_questions_req)
}

::google::protobuf::uint8* edit_robot_pre_questions_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.edit_robot_pre_questions_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robot_session.edit_pre_question edit_pre_questions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edit_pre_questions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->edit_pre_questions(static_cast<int>(i)), deterministic, target);
  }

  // uint32 update_type = 2;
  if (this->update_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.edit_robot_pre_questions_req)
  return target;
}

size_t edit_robot_pre_questions_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.edit_robot_pre_questions_req)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .robot_session.edit_pre_question edit_pre_questions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->edit_pre_questions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->edit_pre_questions(static_cast<int>(i)));
    }
  }

  // uint32 update_type = 2;
  if (this->update_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void edit_robot_pre_questions_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.edit_robot_pre_questions_req)
  GOOGLE_DCHECK_NE(&from, this);
  const edit_robot_pre_questions_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const edit_robot_pre_questions_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.edit_robot_pre_questions_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.edit_robot_pre_questions_req)
    MergeFrom(*source);
  }
}

void edit_robot_pre_questions_req::MergeFrom(const edit_robot_pre_questions_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.edit_robot_pre_questions_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edit_pre_questions_.MergeFrom(from.edit_pre_questions_);
  if (from.update_type() != 0) {
    set_update_type(from.update_type());
  }
}

void edit_robot_pre_questions_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.edit_robot_pre_questions_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void edit_robot_pre_questions_req::CopyFrom(const edit_robot_pre_questions_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.edit_robot_pre_questions_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool edit_robot_pre_questions_req::IsInitialized() const {
  return true;
}

void edit_robot_pre_questions_req::Swap(edit_robot_pre_questions_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void edit_robot_pre_questions_req::InternalSwap(edit_robot_pre_questions_req* other) {
  using std::swap;
  CastToBase(&edit_pre_questions_)->InternalSwap(CastToBase(&other->edit_pre_questions_));
  swap(update_type_, other->update_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata edit_robot_pre_questions_req::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void edit_robot_pre_questions_ack::InitAsDefaultInstance() {
  ::robot_session::_edit_robot_pre_questions_ack_default_instance_._instance.get_mutable()->error_ = const_cast< ::common::errorinfo*>(
      ::common::errorinfo::internal_default_instance());
}
void edit_robot_pre_questions_ack::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int edit_robot_pre_questions_ack::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

edit_robot_pre_questions_ack::edit_robot_pre_questions_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robot_5fsession_2eproto::scc_info_edit_robot_pre_questions_ack.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_session.edit_robot_pre_questions_ack)
}
edit_robot_pre_questions_ack::edit_robot_pre_questions_ack(const edit_robot_pre_questions_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::common::errorinfo(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:robot_session.edit_robot_pre_questions_ack)
}

void edit_robot_pre_questions_ack::SharedCtor() {
  error_ = NULL;
}

edit_robot_pre_questions_ack::~edit_robot_pre_questions_ack() {
  // @@protoc_insertion_point(destructor:robot_session.edit_robot_pre_questions_ack)
  SharedDtor();
}

void edit_robot_pre_questions_ack::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void edit_robot_pre_questions_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* edit_robot_pre_questions_ack::descriptor() {
  ::protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const edit_robot_pre_questions_ack& edit_robot_pre_questions_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robot_5fsession_2eproto::scc_info_edit_robot_pre_questions_ack.base);
  return *internal_default_instance();
}


void edit_robot_pre_questions_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_session.edit_robot_pre_questions_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool edit_robot_pre_questions_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_session.edit_robot_pre_questions_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errorinfo error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_session.edit_robot_pre_questions_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_session.edit_robot_pre_questions_ack)
  return false;
#undef DO_
}

void edit_robot_pre_questions_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_session.edit_robot_pre_questions_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_session.edit_robot_pre_questions_ack)
}

::google::protobuf::uint8* edit_robot_pre_questions_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_session.edit_robot_pre_questions_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errorinfo error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_session.edit_robot_pre_questions_ack)
  return target;
}

size_t edit_robot_pre_questions_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_session.edit_robot_pre_questions_ack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.errorinfo error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void edit_robot_pre_questions_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_session.edit_robot_pre_questions_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const edit_robot_pre_questions_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const edit_robot_pre_questions_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_session.edit_robot_pre_questions_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_session.edit_robot_pre_questions_ack)
    MergeFrom(*source);
  }
}

void edit_robot_pre_questions_ack::MergeFrom(const edit_robot_pre_questions_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_session.edit_robot_pre_questions_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::common::errorinfo::MergeFrom(from.error());
  }
}

void edit_robot_pre_questions_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_session.edit_robot_pre_questions_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void edit_robot_pre_questions_ack::CopyFrom(const edit_robot_pre_questions_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_session.edit_robot_pre_questions_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool edit_robot_pre_questions_ack::IsInitialized() const {
  return true;
}

void edit_robot_pre_questions_ack::Swap(edit_robot_pre_questions_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void edit_robot_pre_questions_ack::InternalSwap(edit_robot_pre_questions_ack* other) {
  using std::swap;
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata edit_robot_pre_questions_ack::GetMetadata() const {
  protobuf_robot_5fsession_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robot_5fsession_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robot_session
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::pre_question* Arena::CreateMaybeMessage< ::robot_session::pre_question >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::pre_question >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::enter_robot_session_req* Arena::CreateMaybeMessage< ::robot_session::enter_robot_session_req >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::enter_robot_session_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::enter_robot_session_ack* Arena::CreateMaybeMessage< ::robot_session::enter_robot_session_ack >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::enter_robot_session_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::robot_single_msg_req* Arena::CreateMaybeMessage< ::robot_session::robot_single_msg_req >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::robot_single_msg_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::robot_single_msg_ack* Arena::CreateMaybeMessage< ::robot_session::robot_single_msg_ack >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::robot_single_msg_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::get_robot_pre_question_list_req* Arena::CreateMaybeMessage< ::robot_session::get_robot_pre_question_list_req >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::get_robot_pre_question_list_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::get_robot_pre_question_list_ack* Arena::CreateMaybeMessage< ::robot_session::get_robot_pre_question_list_ack >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::get_robot_pre_question_list_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::inquery_robot_pre_question_req* Arena::CreateMaybeMessage< ::robot_session::inquery_robot_pre_question_req >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::inquery_robot_pre_question_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::inquery_robot_pre_question_ack* Arena::CreateMaybeMessage< ::robot_session::inquery_robot_pre_question_ack >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::inquery_robot_pre_question_ack >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::edit_pre_question* Arena::CreateMaybeMessage< ::robot_session::edit_pre_question >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::edit_pre_question >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::edit_robot_pre_questions_req* Arena::CreateMaybeMessage< ::robot_session::edit_robot_pre_questions_req >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::edit_robot_pre_questions_req >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robot_session::edit_robot_pre_questions_ack* Arena::CreateMaybeMessage< ::robot_session::edit_robot_pre_questions_ack >(Arena* arena) {
  return Arena::CreateInternal< ::robot_session::edit_robot_pre_questions_ack >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
